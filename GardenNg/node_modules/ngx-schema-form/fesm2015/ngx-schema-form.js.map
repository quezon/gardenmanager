{"version":3,"file":"ngx-schema-form.js.map","sources":["ng://ngx-schema-form/lib/model/actionregistry.ts","ng://ngx-schema-form/lib/model/formproperty.ts","ng://ngx-schema-form/lib/model/typemapping.ts","ng://ngx-schema-form/lib/model/formpropertyfactory.ts","ng://ngx-schema-form/lib/model/utils.ts","ng://ngx-schema-form/lib/model/schemapreprocessor.ts","ng://ngx-schema-form/lib/model/validatorregistry.ts","ng://ngx-schema-form/lib/model/bindingregistry.ts","ng://ngx-schema-form/lib/schemavalidatorfactory.ts","ng://ngx-schema-form/lib/widgetregistry.ts","ng://ngx-schema-form/lib/widgetfactory.ts","ng://ngx-schema-form/lib/terminator.service.ts","ng://ngx-schema-form/lib/property-binding-registry.ts","ng://ngx-schema-form/lib/expression-compiler-factory.ts","ng://ngx-schema-form/lib/form.component.ts","ng://ngx-schema-form/lib/formelement.component.ts","ng://ngx-schema-form/lib/formelement.action.component.ts","ng://ngx-schema-form/lib/widgetchooser.component.ts","ng://ngx-schema-form/lib/model/atomicproperty.ts","ng://ngx-schema-form/lib/model/objectproperty.ts","ng://ngx-schema-form/lib/model/arrayproperty.ts","ng://ngx-schema-form/lib/model/stringproperty.ts","ng://ngx-schema-form/lib/model/booleanproperty.ts","ng://ngx-schema-form/lib/model/numberproperty.ts","ng://ngx-schema-form/lib/widget.ts","ng://ngx-schema-form/lib/defaultwidgets/array/array.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/button/button.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/object/object.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/checkbox/checkbox.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/file/file.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/integer/integer.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/textarea/textarea.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/radio/radio.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/range/range.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/select/select.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/string/string.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/defaultwidgetregistry.ts","ng://ngx-schema-form/lib/defaultwidgets/_directives/disableControl.directive.ts","ng://ngx-schema-form/lib/default.widget.ts","ng://ngx-schema-form/lib/schema-form.module.ts","ng://ngx-schema-form/lib/template-schema/template-schema.service.ts","ng://ngx-schema-form/lib/template-schema/template-schema-element.ts","ng://ngx-schema-form/lib/template-schema/button/button.component.ts","ng://ngx-schema-form/lib/template-schema/field/field.ts","ng://ngx-schema-form/lib/template-schema/field/field-parent.ts","ng://ngx-schema-form/lib/template-schema/field/item/item.component.ts","ng://ngx-schema-form/lib/template-schema/field/field.component.ts","ng://ngx-schema-form/lib/template-schema/template-schema.directive.ts","ng://ngx-schema-form/lib/template-schema/template-schema.module.ts"],"sourcesContent":["import { Action } from './action';\n\nexport class ActionRegistry {\n  actions: {[key: string]: Action} = {};\n\n  clear() {\n    this.actions = {};\n  }\n\n  register(actionId: string, action: Action) {\n    this.actions[actionId] = action;\n  }\n\n  get(actionId: string) {\n    return this.actions[actionId];\n  }\n}\n","import {BehaviorSubject, combineLatest} from 'rxjs';\nimport {distinctUntilChanged, map} from 'rxjs/operators';\n\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\nimport {PropertyBindingRegistry} from '../property-binding-registry';\nimport { ExpressionCompilerFactory, ExpressionCompilerVisibilityIf } from '../expression-compiler-factory';\n\nexport abstract class FormProperty {\n  public schemaValidator: Function;\n  public expressionCompilerVisibiltyIf: ExpressionCompilerVisibilityIf;\n\n  _value: any = null;\n  _errors: any = null;\n  private _valueChanges = new BehaviorSubject<any>(null);\n  private _errorsChanges = new BehaviorSubject<any>(null);\n  private _visible = true;\n  private _visibilityChanges = new BehaviorSubject<boolean>(true);\n  private _root: PropertyGroup;\n  private _parent: PropertyGroup;\n  private _path: string;\n  _propertyBindingRegistry: PropertyBindingRegistry;\n  __canonicalPath: string;\n  __canonicalPathNotation: string;\n  \n  /**\n   * Provides the unique path of this form element.<br/>\n   * E.g.: \n   * <code>/garage/cars</code>,<br/>\n   * <code>/shop/book/0/page/1/</code>\n   */\n  get _canonicalPath() { return this.__canonicalPath; }\n  set _canonicalPath(canonicalPath: string) { \n    this.__canonicalPath = canonicalPath; \n    this.__canonicalPathNotation = (this.__canonicalPath||'')\n      .replace(new RegExp('^/', 'ig'), '')\n      .replace(new RegExp('/$', 'ig'), '')\n      .replace(new RegExp('/', 'ig'), '.');\n  }\n  /**\n   * Uses the unique path provided by the property <code>_canonicalPath</code><br/>\n   * but converts it to a HTML Element Attribute ID compliant format.<br/>\n   * E.g.: \n   * <code>garage.cars</code>,<br/>\n   * <code>shop.book.0.page.1.</code>\n   */\n  get canonicalPathNotation() { return this.__canonicalPathNotation; }\n\n  private _rootName;\n  /**\n   * Provides the HTML Element Attribute ID/NAME compliant representation \n   * of the root element.<br/>\n   * Represents the HTML FORM NAME.<br/>\n   * Only the root <code>FormProperty</code> will provide a value here.\n   */\n  get rootName() { return this._rootName; }\n\n  constructor(schemaValidatorFactory: SchemaValidatorFactory,\n              private validatorRegistry: ValidatorRegistry,\n              expressionCompilerFactory: ExpressionCompilerFactory,\n              public schema: any,\n              parent: PropertyGroup,\n              path: string) {\n    this.schemaValidator = schemaValidatorFactory.createValidatorFn(this.schema);\n    this.expressionCompilerVisibiltyIf = expressionCompilerFactory.createExpressionCompilerVisibilityIf();\n\n    this._parent = parent;\n    if (parent) {\n      this._root = parent.root;\n    } else if (this instanceof PropertyGroup) {\n      this._root = <PropertyGroup><any>this;\n      this._rootName = this.createRootName();\n    }\n    this._path = path;\n  }\n\n  /**\n   * Creates the HTML ID and NAME attribute compliant string.\n   */\n  private createRootName(): string {\n    if (this.schema && this.schema['name']) {\n      return this._rootName = this.schema['name'].replace(new RegExp('[\\\\s]+', 'ig'), '_')\n    }\n    return ''\n  }\n\n  public get valueChanges() {\n    return this._valueChanges;\n  }\n\n  public get errorsChanges() {\n    return this._errorsChanges;\n  }\n\n  public get type(): string {\n    return this.schema.type;\n  }\n\n  public get parent(): PropertyGroup {\n    return this._parent;\n  }\n\n  public get root(): PropertyGroup {\n    return this._root || <PropertyGroup><any>this;\n  }\n\n  public get path(): string {\n    return this._path;\n  }\n\n  public get value() {\n    return this._value;\n  }\n\n  public get visible() {\n    return this._visible;\n  }\n\n  public get valid() {\n    return this._errors === null;\n  }\n\n  public abstract setValue(value: any, onlySelf: boolean);\n\n  public abstract reset(value: any, onlySelf: boolean);\n\n  public updateValueAndValidity(onlySelf = false, emitEvent = true) {\n    this._updateValue();\n\n    if (emitEvent) {\n      this.valueChanges.next(this.value);\n    }\n\n    this._runValidation();\n\n    if (this.parent && !onlySelf) {\n      this.parent.updateValueAndValidity(onlySelf, emitEvent);\n    }\n\n  }\n\n  /**\n   * @internal\n   */\n  public abstract _hasValue(): boolean;\n\n  /**\n   *  @internal\n   */\n  public abstract _updateValue();\n\n  /**\n   * @internal\n   */\n  public _runValidation(): any {\n    let errors = this.schemaValidator(this._value) || [];\n    let customValidator = this.validatorRegistry.get(this.path);\n    if (customValidator) {\n      let customErrors = customValidator(this.value, this, this.findRoot());\n      errors = this.mergeErrors(errors, customErrors);\n    }\n    if (errors.length === 0) {\n      errors = null;\n    }\n\n    this._errors = errors;\n    this.setErrors(this._errors);\n  }\n\n  private mergeErrors(errors, newErrors) {\n    if (newErrors) {\n      if (Array.isArray(newErrors)) {\n        errors = errors.concat(...newErrors);\n      } else {\n        errors.push(newErrors);\n      }\n    }\n    return errors;\n  }\n\n  private setErrors(errors) {\n    this._errors = errors;\n    this._errorsChanges.next(errors);\n  }\n\n  public extendErrors(errors) {\n    errors = this.mergeErrors(this._errors || [], errors);\n    this.setErrors(errors);\n  }\n\n  searchProperty(path: string): FormProperty {\n    let prop: FormProperty = this;\n    let base: PropertyGroup = null;\n\n    let result = null;\n    if (path[0] === '/') {\n      base = this.findRoot();\n      result = base.getProperty(path.substr(1));\n    } else {\n      while (result === null && prop.parent !== null) {\n        prop = base = prop.parent;\n        result = base.getProperty(path);\n      }\n    }\n    return result;\n  }\n\n  public findRoot(): PropertyGroup {\n    let property: FormProperty = this;\n    while (property.parent !== null) {\n      property = property.parent;\n    }\n    return <PropertyGroup>property;\n  }\n\n  private setVisible(visible: boolean) {\n    this._visible = visible;\n    this._visibilityChanges.next(visible);\n    this.updateValueAndValidity();\n    if (this.parent) {\n      this.parent.updateValueAndValidity(false, true);\n    }\n  }\n\n  /**\n   * Making use of the expression compiler for the <code>visibleIf</code> condition\n   */\n  private __evaluateVisibilityIf(\n    sourceProperty: FormProperty,\n    targetProperty: FormProperty,\n    dependencyPath: string,\n    value: any = '',\n    expression: string|string[] = ''): boolean {\n    try {\n      let valid = false\n      if (expression.indexOf('$ANY$') !== -1) {\n        valid = value && value.length > 0;\n      } else if ((expression||[]).toString().indexOf('$EXP$') === 0) {\n        // since visibleIf condition values are an array... we must do this\n        const expArray = Array.isArray(expression) ? expression : (expression ? [expression] : [])\n        for (const expString of expArray) {\n          const _expresssion = expString.substring('$EXP$'.length);\n          valid = true === this.expressionCompilerVisibiltyIf.evaluate(_expresssion, {\n            source: sourceProperty,\n            target: targetProperty\n          })\n          if (valid) {\n            break\n          }\n        }\n      } else {\n        valid = expression.indexOf(value) !== -1;\n      }\n      return valid\n    } catch (error) {\n      console.error('Error processing \"VisibileIf\" expression for path: ', dependencyPath,\n        `source - ${sourceProperty._canonicalPath}: `, sourceProperty,\n        `target - ${targetProperty._canonicalPath}: `, targetProperty,\n        'value:', value,\n        'expression: ', expression,\n        'error: ', error)\n    }\n  }\n\n  private __bindVisibility(): boolean {\n    /**\n     * <pre>\n     *     \"oneOf\":[{\n     *         \"path\":[\"value\",\"value\"]\n     *     },{\n     *         \"path\":[\"value\",\"value\"]\n     *     }]\n     *     </pre>\n     * <pre>\n     *     \"allOf\":[{\n     *         \"path\":[\"value\",\"value\"]\n     *     },{\n     *         \"path\":[\"value\",\"value\"]\n     *     }]\n     *     </pre>\n     */\n    const visibleIfProperty = this.schema.visibleIf;\n    const visibleIfOf = (visibleIfProperty || {}).oneOf || (visibleIfProperty || {}).allOf;\n    if (visibleIfOf) {\n      for (const visibleIf of visibleIfOf) {\n        if (typeof visibleIf === 'object' && Object.keys(visibleIf).length === 0) {\n          this.setVisible(false);\n        } else if (visibleIf !== undefined) {\n          const propertiesBinding = [];\n          for (const dependencyPath in visibleIf) {\n            if (visibleIf.hasOwnProperty(dependencyPath)) {\n              const properties = this.findProperties(this, dependencyPath);\n              if ((properties || []).length) {\n                for (const property of properties) {\n                  if (property) {\n                    let valueCheck;\n                    if (this.schema.visibleIf.oneOf) {\n                      valueCheck = property.valueChanges.pipe(map(\n                        value => this.__evaluateVisibilityIf(this, property, dependencyPath, value, visibleIf[dependencyPath])\n                      ));\n                    } else if (this.schema.visibleIf.allOf) {\n                      const _chk = (value) => {\n                        for (const item of this.schema.visibleIf.allOf) {\n                          for (const depPath of Object.keys(item)) {\n                            const prop = this.searchProperty(depPath);\n                            const propVal = prop.value;\n                            if (!this.__evaluateVisibilityIf(this, prop, dependencyPath, propVal, item[depPath])) {\n                              return false;\n                            }\n                          }\n                        }\n                        return true;\n                      };\n                      valueCheck = property.valueChanges.pipe(map(_chk));\n                    }\n                    const visibilityCheck = property._visibilityChanges;\n                    const and = combineLatest([valueCheck, visibilityCheck], (v1, v2) => v1 && v2);\n                    propertiesBinding.push(and);\n                  }\n                }\n              } else {\n                console.warn('Can\\'t find property ' + dependencyPath + ' for visibility check of ' + this.path);\n                this.registerMissingVisibilityBinding(dependencyPath, this);\n                // not visible if not existent\n                this.setVisible(false);\n              }\n            }\n          }\n\n          combineLatest(propertiesBinding, (...values: boolean[]) => {\n            return values.indexOf(true) !== -1;\n          }).pipe(distinctUntilChanged()).subscribe((visible) => {\n            this.setVisible(visible);\n          });\n        }\n      }\n      return true;\n    }\n  }\n\n  // A field is visible if AT LEAST ONE of the properties it depends on is visible AND has a value in the list\n  public _bindVisibility() {\n    if (this.__bindVisibility())\n      return;\n    let visibleIf = this.schema.visibleIf;\n    if (typeof visibleIf === 'object' && Object.keys(visibleIf).length === 0) {\n      this.setVisible(false);\n    } else if (visibleIf !== undefined) {\n      let propertiesBinding = [];\n      for (let dependencyPath in visibleIf) {\n        if (visibleIf.hasOwnProperty(dependencyPath)) {\n          const properties = this.findProperties(this, dependencyPath);\n          if ((properties || []).length) {\n            for (const property of properties) {\n              if (property) {\n                const valueCheck = property.valueChanges.pipe(map(\n                  value => this.__evaluateVisibilityIf(this, property, dependencyPath, value, visibleIf[dependencyPath])\n                ));\n                const visibilityCheck = property._visibilityChanges;\n                const and = combineLatest([valueCheck, visibilityCheck], (v1, v2) => v1 && v2);\n                propertiesBinding.push(and);\n              }\n            }\n          } else {\n            console.warn('Can\\'t find property ' + dependencyPath + ' for visibility check of ' + this.path);\n            this.registerMissingVisibilityBinding(dependencyPath, this);\n            // not visible if not existent\n            this.setVisible(false);\n          }\n        }\n      }\n\n      combineLatest(propertiesBinding, (...values: boolean[]) => {\n        return values.indexOf(true) !== -1;\n      }).pipe(distinctUntilChanged()).subscribe((visible) => {\n        this.setVisible(visible);\n      });\n    }\n  }\n\n  private registerMissingVisibilityBinding(dependencyPath: string, formProperty: FormProperty) {\n    formProperty._propertyBindingRegistry.getPropertyBindingsVisibility().add(dependencyPath, formProperty.path);\n  }\n\n\n  /**\n   * Finds all <code>formProperties</code> from a path with wildcards.<br/>\n   * e.g: <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>\n   * @param target\n   * @param propertyPath\n   */\n  findProperties(target: FormProperty, propertyPath: string): FormProperty[] {\n    const props: FormProperty[] = [];\n    const paths = this.findPropertyPaths(target, propertyPath);\n    for (const path of paths) {\n      const p: FormProperty = target.searchProperty(path);\n      if (p) {\n        props.push(p);\n      }\n    }\n    return props;\n  }\n\n  /**\n   * Creates canonical paths from a path with wildcards.\n   * e.g:<br/>\n   * From:<br/>\n   * <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>\n   * it creates:<br/>\n   * <code>/garage/cars/0/tires/0/name</code><br/>\n   * <code>/garage/cars/0/tires/1/name</code><br/>\n   * <code>/garage/cars/0/tires/2/name</code><br/>\n   * <code>/garage/cars/0/tires/3/name</code><br/>\n   * <code>/garage/cars/1/tires/0/name</code><br/>\n   * <code>/garage/cars/2/tires/1/name</code><br/>\n   * <code>/garage/cars/3/tires/2/name</code><br/>\n   * <code>/garage/cars/3/tires/3/name</code><br/>\n   * <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>\n   * <code>/garage/cars/&#42;/tires/2/name</code><br/>\n   * <code>/garage/cars/&#42;/tires/3/name</code><br/>\n   * <br/>etc...\n   * @param target\n   * @param path\n   * @param parentPath\n   */\n  findPropertyPaths(target: FormProperty, path: string, parentPath?: string): string[] {\n    const ix = path.indexOf('*');\n    if (-1 !== ix) {\n      const prePath = ix > -1 ? path.substring(0, ix - 1) : path;\n      const subPath = ix > -1 ? path.substring(ix + 1) : path;\n      const prop: FormProperty = target.searchProperty(prePath);\n      let pathFound = [];\n      if (prop instanceof PropertyGroup) {\n        const arrProp = prop.properties as FormProperty[];\n        for (let i = 0; i < arrProp.length; i++) {\n          const curreItemPath = (parentPath || '') + prePath + (prePath.endsWith('/') ? '' : '/') + i + subPath;\n          const curreItemPrePath = (parentPath || '') + prePath + i;\n          if (-1 === curreItemPath.indexOf('*')) {\n            pathFound.push(curreItemPath);\n          }\n          const childrenPathFound = this.findPropertyPaths(arrProp[i], subPath, curreItemPrePath);\n          pathFound = pathFound.concat(childrenPathFound);\n        }\n      }\n      return pathFound;\n    }\n    return [path];\n  }\n}\n\nexport abstract class PropertyGroup extends FormProperty {\n\n  _properties: FormProperty[] | { [key: string]: FormProperty } = null;\n\n  get properties() {\n    return this._properties;\n  }\n\n  set properties(properties: FormProperty[] | { [key: string]: FormProperty }) {\n    /**\n     * Override the setter to add an observer that notices when an item is added or removed.<br/>\n     */\n    this._properties = new Proxy(properties, this._propertyProxyHandler);\n  }\n\n  private _propertyProxyHandler: ProxyHandler<FormProperty[] | { [key: string]: FormProperty }> = {\n    /**\n     * When a new item is added it will be checked for visibility updates to proceed <br/>\n     * if any other field has a binding reference to it.<br/>\n     */\n    set(target: FormProperty[] | { [p: string]: FormProperty }, p: PropertyKey, value: any, receiver: any): boolean {\n\n      /**\n       * 1) Make sure a canonical path is set\n       */\n      const assertCanonicalPath = (propertyValue: any) => {\n        const formProperty = propertyValue as FormProperty;\n        if (Array.isArray(target) && propertyValue instanceof FormProperty) {\n          /**\n           * Create a canonical path replacing the last '*' with the elements position in array\n           * @param propertyPath\n           * @param indexOfChild\n           */\n          const getCanonicalPath = (propertyPath: string, indexOfChild: number) => {\n            let pos;\n            if (propertyPath && -1 !== (pos = propertyPath.lastIndexOf('*'))) {\n              return propertyPath.substring(0, pos) + indexOfChild.toString() + propertyPath.substring(pos + 1);\n            }\n          };\n          if (formProperty) {\n            formProperty._canonicalPath = getCanonicalPath(formProperty._canonicalPath, p as number);\n          }\n        }\n\n        const propertyGroup = formProperty as PropertyGroup;\n        const propertyGroupChildren = (Array.isArray(propertyGroup.properties) ?\n          propertyGroup.properties :\n          Object.values(propertyGroup.properties || {})) as FormProperty[];\n        if ((formProperty.path || '').endsWith('/*')) {\n          /**\n           * If it is an array, then all children canonical paths must be computed now.\n           * The children don't have the parent's path segment set yet,\n           * because they are created before the parent gets attached to its parent.\n           */\n          for (const child of propertyGroupChildren) {\n            child._canonicalPath = formProperty._canonicalPath + child._canonicalPath.substring(formProperty.path.length);\n          }\n        }\n        return {property: formProperty, children: propertyGroupChildren};\n      };\n      const {property, children} = assertCanonicalPath(value);\n\n      /**\n       * 2) Add the new property before rebinding, so it can be found by <code>_bindVisibility</code>\n       */\n      const result = target[p as string] = value;\n\n      /**\n       * 3) Re-bind the visibility bindings referencing to this canonical paths\n       */\n      const rebindVisibility = () => {\n        const rebindAll = [property].concat(children);\n        const findPropertiesToRebind = (formProperty: FormProperty) => {\n          const propertyBindings = formProperty._propertyBindingRegistry.getPropertyBindingsVisibility();\n          let rebind: string[] = [];\n          if (formProperty._canonicalPath) {\n            rebind = rebind.concat(rebind.concat(propertyBindings.findByDependencyPath(formProperty._canonicalPath) || []));\n            if (formProperty._canonicalPath.startsWith('/')) {\n              rebind = rebind.concat(rebind.concat(propertyBindings.findByDependencyPath(formProperty._canonicalPath.substring(1)) || []));\n            }\n          }\n          rebind = rebind.concat(propertyBindings.findByDependencyPath(formProperty.path) || []);\n          if (formProperty.path.startsWith('/')) {\n            rebind = rebind.concat(rebind.concat(propertyBindings.findByDependencyPath(formProperty.path.substring(1)) || []));\n          }\n          const uniqueValues = {};\n          for (const item of rebind) {\n            uniqueValues[item] = item;\n          }\n          return Object.keys(uniqueValues);\n        };\n        for (const _property of rebindAll) {\n          if (_property instanceof FormProperty) {\n            try {\n              const rebindPaths = findPropertiesToRebind(_property);\n              for (const rebindPropPath of rebindPaths) {\n                const rebindProp = _property.searchProperty(rebindPropPath);\n                rebindProp._bindVisibility();\n              }\n            } catch (e) {\n              console.error('Rebinding visibility error at path:', _property.path, 'property:', _property, e);\n            }\n          }\n        }\n      };\n      rebindVisibility();\n\n      return result;\n    },\n    get(target: FormProperty[] | { [p: string]: FormProperty }, p: PropertyKey, receiver: any): any {\n      return target[p as string];\n    },\n    deleteProperty(target: FormProperty[] | { [p: string]: FormProperty }, p: PropertyKey): boolean {\n      return delete target[p as string];\n    }\n  };\n\n  getProperty(path: string) {\n    let subPathIdx = path.indexOf('/');\n    let propertyId = subPathIdx !== -1 ? path.substr(0, subPathIdx) : path;\n\n    let property = this.properties[propertyId];\n    if (property !== null && subPathIdx !== -1 && property instanceof PropertyGroup) {\n      let subPath = path.substr(subPathIdx + 1);\n      property = (<PropertyGroup>property).getProperty(subPath);\n    }\n    return property;\n  }\n\n  public forEachChild(fn: (formProperty: FormProperty, str: String) => void) {\n    for (let propertyId in this.properties) {\n      if (this.properties.hasOwnProperty(propertyId)) {\n        let property = this.properties[propertyId];\n        fn(property, propertyId);\n      }\n    }\n  }\n\n  public forEachChildRecursive(fn: (formProperty: FormProperty) => void) {\n    this.forEachChild((child) => {\n      fn(child);\n      if (child instanceof PropertyGroup) {\n        (<PropertyGroup>child).forEachChildRecursive(fn);\n      }\n    });\n  }\n\n  public _bindVisibility() {\n    super._bindVisibility();\n    this._bindVisibilityRecursive();\n  }\n\n  private _bindVisibilityRecursive() {\n    this.forEachChildRecursive((property) => {\n      property._bindVisibility();\n    });\n  }\n\n  public isRoot() {\n    return this === this.root;\n  }\n}\n\n\n","export const PROPERTY_TYPE_MAPPING: { [type: string]: any } = {};\n","import {FormProperty, PropertyGroup} from './formproperty';\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\nimport {PropertyBindingRegistry} from '../property-binding-registry';\nimport { ExpressionCompilerFactory } from '../expression-compiler-factory';\nimport { PROPERTY_TYPE_MAPPING } from './typemapping';\n\nexport class FormPropertyFactory {\n\n  constructor(private schemaValidatorFactory: SchemaValidatorFactory, private validatorRegistry: ValidatorRegistry,\n              private propertyBindingRegistry: PropertyBindingRegistry,\n              private expressionCompilerFactory: ExpressionCompilerFactory) {\n  }\n\n  createProperty(schema: any, parent: PropertyGroup = null, propertyId?: string): FormProperty {\n    let newProperty = null;\n    let path = '';\n    let _canonicalPath = '';\n    if (parent) {\n      path += parent.path;\n      if (parent.parent !== null) {\n        path += '/';\n        _canonicalPath += '/';\n      }\n      if (parent.type === 'object') {\n        path += propertyId;\n        _canonicalPath += propertyId;\n      } else if (parent.type === 'array') {\n        path += '*';\n        _canonicalPath += '*';\n      } else {\n        throw 'Instanciation of a FormProperty with an unknown parent type: ' + parent.type;\n      }\n      _canonicalPath = (parent._canonicalPath || parent.path) + _canonicalPath;\n    } else {\n      path = '/';\n      _canonicalPath = '/';\n    }\n\n    if (schema.$ref) {\n      const refSchema = this.schemaValidatorFactory.getSchema(parent.root.schema, schema.$ref);\n      newProperty = this.createProperty(refSchema, parent, path);\n    } else {\n        if (PROPERTY_TYPE_MAPPING[schema.type]) {\n            if (schema.type === 'object' || schema.type === 'array') {\n                newProperty = PROPERTY_TYPE_MAPPING[schema.type](\n                    this.schemaValidatorFactory, this.validatorRegistry, this.expressionCompilerFactory, schema, parent, path, this);\n            } else {\n                newProperty = PROPERTY_TYPE_MAPPING[schema.type](\n                    this.schemaValidatorFactory, this.validatorRegistry, this.expressionCompilerFactory, schema, parent, path);\n            }\n        } else {\n            throw new TypeError(`Undefined type ${schema.type} (existing: ${Object.keys(PROPERTY_TYPE_MAPPING)})`);\n        }\n    }\n\n    newProperty._propertyBindingRegistry = this.propertyBindingRegistry;\n    newProperty._canonicalPath = _canonicalPath;\n\n    if (newProperty instanceof PropertyGroup) {\n      this.initializeRoot(newProperty);\n    }\n\n    return newProperty;\n  }\n\n  private initializeRoot(rootProperty: PropertyGroup) {\n    rootProperty.reset(null, true);\n    rootProperty._bindVisibility();\n  }\n}\n","export function isPresent(o) {\n  return o !== null && o !== undefined;\n}\n\nexport function isBlank(o) {\n  return o === null || o === undefined;\n}\n","import {isBlank} from './utils';\n\nfunction formatMessage(message, path) {\n  return `Parsing error on ${path}: ${message}`;\n}\n\nfunction schemaError(message, path): void {\n  let mesg = formatMessage(message, path);\n  throw new Error(mesg);\n}\n\nfunction schemaWarning(message, path): void {\n  let mesg = formatMessage(message, path);\n  throw new Error(mesg);\n}\n\nexport class SchemaPreprocessor {\n\n  static preprocess(jsonSchema: any, path = '/'): any {\n    jsonSchema = jsonSchema || {};\n    SchemaPreprocessor.normalizeExtensions(jsonSchema);\n    if (jsonSchema.type === 'object') {\n      SchemaPreprocessor.checkProperties(jsonSchema, path);\n      SchemaPreprocessor.checkAndCreateFieldsets(jsonSchema, path);\n    } else if (jsonSchema.type === 'array') {\n      SchemaPreprocessor.checkItems(jsonSchema, path);\n    }\n    SchemaPreprocessor.normalizeWidget(jsonSchema);\n    SchemaPreprocessor.recursiveCheck(jsonSchema, path);\n  }\n\n  private static checkProperties(jsonSchema, path: string) {\n    if (isBlank(jsonSchema.properties)) {\n      jsonSchema.properties = {};\n      schemaWarning('Provided json schema does not contain a \\'properties\\' entry. Output schema will be empty', path);\n    }\n  }\n\n  private static checkAndCreateFieldsets(jsonSchema: any, path: string) {\n    if (jsonSchema.fieldsets === undefined) {\n      if (jsonSchema.order !== undefined) {\n        SchemaPreprocessor.replaceOrderByFieldsets(jsonSchema);\n      } else {\n        SchemaPreprocessor.createFieldsets(jsonSchema);\n      }\n    }\n    SchemaPreprocessor.checkFieldsUsage(jsonSchema, path);\n  }\n\n  private static checkFieldsUsage(jsonSchema, path: string) {\n    let fieldsId: string[] = Object.keys(jsonSchema.properties);\n    let usedFields = {};\n    for (let fieldset of jsonSchema.fieldsets) {\n      for (let fieldId of fieldset.fields) {\n        if (usedFields[fieldId] === undefined) {\n          usedFields[fieldId] = [];\n        }\n        usedFields[fieldId].push(fieldset.id);\n      }\n    }\n\n    for (const fieldId of fieldsId) {\n      const isRequired = jsonSchema.required && jsonSchema.required.indexOf(fieldId) > -1;\n      if (isRequired && jsonSchema.properties[fieldId]) {\n        jsonSchema.properties[fieldId].isRequired = true;\n      }\n      if (usedFields.hasOwnProperty(fieldId)) {\n        if (usedFields[fieldId].length > 1) {\n          schemaError(`${fieldId} is referenced by more than one fieldset: ${usedFields[fieldId]}`, path);\n        }\n        delete usedFields[fieldId];\n      } else if (isRequired) {\n        schemaError(`${fieldId} is a required field but it is not referenced as part of a 'order' or a 'fieldset' property`, path);\n      } else {\n        delete jsonSchema[fieldId];\n        schemaWarning(`Removing unreferenced field ${fieldId}`, path);\n      }\n    }\n\n    for (let remainingfieldsId in usedFields) {\n      if (usedFields.hasOwnProperty(remainingfieldsId)) {\n        schemaWarning(`Referencing non-existent field ${remainingfieldsId} in one or more fieldsets`, path);\n      }\n    }\n  }\n\n  private static createFieldsets(jsonSchema) {\n    jsonSchema.order = Object.keys(jsonSchema.properties);\n    SchemaPreprocessor.replaceOrderByFieldsets(jsonSchema);\n  }\n\n  private static replaceOrderByFieldsets(jsonSchema) {\n    jsonSchema.fieldsets = [{\n      id: 'fieldset-default',\n      title: jsonSchema.title || '',\n      description: jsonSchema.description || '',\n      name: jsonSchema.name || '',\n      fields: jsonSchema.order\n    }];\n    delete jsonSchema.order;\n  }\n\n  private static normalizeWidget(fieldSchema: any) {\n    let widget = fieldSchema.widget;\n    if (widget === undefined) {\n      widget = {'id': fieldSchema.type};\n    } else if (typeof widget === 'string') {\n      widget = {'id': widget};\n    }\n    fieldSchema.widget = widget;\n  }\n\n  private static checkItems(jsonSchema, path) {\n    if (jsonSchema.items === undefined) {\n      schemaError('No \\'items\\' property in array', path);\n    }\n  }\n\n  private static recursiveCheck(jsonSchema, path: string) {\n    if (jsonSchema.type === 'object') {\n      for (let fieldId in jsonSchema.properties) {\n        if (jsonSchema.properties.hasOwnProperty(fieldId)) {\n          let fieldSchema = jsonSchema.properties[fieldId];\n          SchemaPreprocessor.preprocess(fieldSchema, path + fieldId + '/');\n        }\n      }\n      if (jsonSchema.hasOwnProperty('definitions')) {\n        for (let fieldId in jsonSchema.definitions) {\n          if (jsonSchema.definitions.hasOwnProperty(fieldId)) {\n            let fieldSchema = jsonSchema.definitions[fieldId];\n            SchemaPreprocessor.removeRecursiveRefProperties(fieldSchema, `#/definitions/${fieldId}`);\n            SchemaPreprocessor.preprocess(fieldSchema, path + fieldId + '/');\n          }\n        }\n      }\n    } else if (jsonSchema.type === 'array') {\n      SchemaPreprocessor.preprocess(jsonSchema.items, path + '*/');\n    }\n  }\n\n  private static removeRecursiveRefProperties(jsonSchema, definitionPath) {\n    // to avoid infinite loop\n    if (jsonSchema.type === 'object') {\n      for (let fieldId in jsonSchema.properties) {\n        if (jsonSchema.properties.hasOwnProperty(fieldId)) {\n          if (jsonSchema.properties[fieldId].$ref\n            && jsonSchema.properties[fieldId].$ref === definitionPath) {\n            delete jsonSchema.properties[fieldId];\n          } else if (jsonSchema.properties[fieldId].type === 'object') {\n            SchemaPreprocessor.removeRecursiveRefProperties(jsonSchema.properties[fieldId], definitionPath);\n          }\n        }\n      }\n    }\n  }\n  \n  /**\n   * Enables alias names for JSON schema extensions.\n   *\n   * Copies the value of each alias JSON schema property\n   * to the JSON schema property of ngx-schema-form.\n   *\n   * @param schema JSON schema to enable alias names.\n   */\n  private static normalizeExtensions(schema: any): void {\n    const extensions = [\n        { name: \"fieldsets\", regex: /^x-?field-?sets$/i },\n        { name: \"widget\",    regex: /^x-?widget$/i },\n        { name: \"visibleIf\", regex: /^x-?visible-?if$/i }\n    ];\n    const keys = Object.keys(schema);\n    for (let i = 0; i < keys.length; ++i) {\n      let k = keys[i];\n      let e = extensions.find(e => !!k.match(e.regex));\n      if (e) {\n        let v = schema[k];\n        let copy = JSON.parse(JSON.stringify(v));\n        schema[e.name] = copy;\n      }\n    }\n  }\n}\n\n","import { Validator } from './validator';\n\nexport class ValidatorRegistry {\n  private validators: Validator[] = [];\n\n  register(path: string, validator: Validator) {\n    this.validators[path] = validator;\n  }\n\n  get(path: string): Validator {\n    return this.validators[path];\n  }\n\n  clear() {\n    this.validators = [];\n  }\n}\n","import {Binding} from './binding';\n\nexport class BindingRegistry {\n  bindings: Binding[] = [];\n\n  clear() {\n    this.bindings = [];\n  }\n\n  register(path: string, binding: Binding | Binding[]) {\n    this.bindings[path] = [].concat(binding);\n  }\n\n  get(path: string): Binding[] {\n    return this.bindings[path];\n  }\n}\n","import * as ZSchema from 'z-schema';\n\nexport abstract class SchemaValidatorFactory {\n  abstract createValidatorFn(schema): (value: any) => any;\n\n  abstract getSchema(schema, ref): any;\n\n  /**\n   * Override this method to reset the schema validator instance.<br/>\n   * This may be required since some schema validators keep a deep copy<br/>\n   * of your schemas and changes at runtime are not recognized by the schema validator.<br/>\n   * In this method you should either re-instantiate the schema validator or\n   * clear its cache.<br/>\n   * Example of re-instantiating schema validator\n   * <code>\n   *     reset(){\n   *         this.zschema = new ZSchema({})\n   *     }\n   * </code>\n   * <br/>\n   * Since this method it self does nothing there is <br/>\n   * no need to call the <code>super.reset()</code>\n   */\n  reset() {\n\n  }\n}\n\nexport class ZSchemaValidatorFactory extends SchemaValidatorFactory {\n\n  protected zschema;\n\n  constructor() {\n    super();\n    this.createSchemaValidator()\n  }\n\n  private createSchemaValidator() {\n    this.zschema =  new ZSchema({\n      breakOnFirstError: false\n    });\n  }\n\n  reset() {\n    this.createSchemaValidator()\n  }\n\n  createValidatorFn(schema: any) {\n    return (value): { [key: string]: boolean } => {\n\n      if (schema.type === 'number' || schema.type === 'integer') {\n        value = +value;\n      }\n\n      this.zschema.validate(value, schema);\n      let err = this.zschema.getLastErrors();\n\n      this.denormalizeRequiredPropertyPaths(err);\n\n      return err || null;\n    };\n  }\n\n  getSchema(schema: any, ref: string) {\n    // check definitions are valid\n    const isValid = this.zschema.compileSchema(schema);\n    if (isValid) {\n      return this.getDefinition(schema, ref);\n    } else {\n      throw this.zschema.getLastError();\n    }\n  }\n\n  private denormalizeRequiredPropertyPaths(err: any[]) {\n    if (err && err.length) {\n      err = err.map(error => {\n        if (error.path === '#/' && error.code === 'OBJECT_MISSING_REQUIRED_PROPERTY') {\n          error.path = `${error.path}${error.params[0]}`;\n        }\n        return error;\n      });\n    }\n  }\n\n  private getDefinition(schema: any, ref: string) {\n    let foundSchema = schema;\n    ref.split('/').slice(1).forEach(ptr => {\n      if (ptr) {\n        foundSchema = foundSchema[ptr];\n      }\n    });\n    return foundSchema;\n  }\n}\n\n","export class WidgetRegistry {\n\n  private widgets: { [type: string]: any } = {};\n\n  private defaultWidget: any;\n\n  constructor() { }\n\n  setDefaultWidget(widget: any) {\n    this.defaultWidget = widget;\n  }\n\n  getDefaultWidget() {\n    return this.defaultWidget;\n  }\n\n  hasWidget(type: string) {\n    return this.widgets.hasOwnProperty(type);\n  }\n\n  register(type: string, widget: any) {\n    this.widgets[type] = widget;\n  }\n\n  getWidgetType(type: string): any {\n    if (this.hasWidget(type)) {\n      return this.widgets[type];\n    }\n    return this.defaultWidget;\n  }\n}\n","import {\n  ViewContainerRef,\n  ComponentRef,\n  ComponentFactoryResolver,\n  Injectable\n} from '@angular/core';\n\nimport { WidgetRegistry } from './widgetregistry';\n\n@Injectable()\nexport class WidgetFactory {\n\n  private resolver: ComponentFactoryResolver;\n  private registry: WidgetRegistry;\n\n  constructor(registry: WidgetRegistry, resolver: ComponentFactoryResolver) {\n    this.registry = registry;\n    this.resolver = resolver;\n  }\n\n  createWidget(container: ViewContainerRef, type: string): ComponentRef<any> {\n    let componentClass = this.registry.getWidgetType(type);\n\n    let componentFactory = this.resolver.resolveComponentFactory(componentClass);\n    return container.createComponent(componentFactory);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class TerminatorService {\n  public onDestroy: Subject<boolean>;\n\n  constructor() {\n    this.onDestroy = new Subject();\n  }\n\n  destroy() {\n    this.onDestroy.next(true);\n  }\n}\n","/**\n * General purpose propery binding registry\n */\nexport class PropertyBindingRegistry {\n\n  private bindings: { [key: string]: PropertyBindings } = {};\n\n  getPropertyBindings(type: PropertyBindingTypes): PropertyBindings {\n    this.bindings[type] = this.bindings[type] || new PropertyBindings();\n    return this.bindings[type];\n  }\n\n  getPropertyBindingsVisibility() {\n    return this.getPropertyBindings(PropertyBindingTypes.visibility);\n  }\n}\n\n/**\n * Defines the types of supported property bindings.<br/>\n * For now only <code>visibility</code> is supported.<br/>\n */\nexport enum PropertyBindingTypes {\n  visibility\n}\n\n/**\n * Storage that holds all bindings that are property paths related.<br/>\n */\nexport class PropertyBindings {\n  sourcesIndex: SimplePropertyIndexer = new SimplePropertyIndexer();\n  dependenciesIndex: SimplePropertyIndexer = new SimplePropertyIndexer();\n\n  add(dependencyPath: string, sourcePropertyPath: string) {\n    this.sourcesIndex.store(sourcePropertyPath, dependencyPath);\n    this.dependenciesIndex.store(dependencyPath, sourcePropertyPath);\n  }\n\n  findByDependencyPath(dependencyPath: string): string[] {\n    const result = this.dependenciesIndex.find(dependencyPath);\n    result.results = result.results || [];\n    let values = [];\n    for (const res of result.results) {\n      values = values.concat(Object.keys(res.value));\n    }\n    return result.found ? values : [];\n  }\n\n  getBySourcePropertyPath(sourcePropertyPath: string): string[] {\n    const result = this.sourcesIndex.find(sourcePropertyPath);\n    result.results = result.results || [];\n    let values = [];\n    for (const res of result.results) {\n      values = values.concat(Object.keys(res.value));\n    }\n    return result.found ? values : [];\n  }\n\n  createPathIndex(path: string): string[] {\n    return path.split('/');\n  }\n}\n\n/**\n * Simple indexer to store property paths\n */\nexport class SimplePropertyIndexer {\n\n  static MARKER = '$____value';\n  index: object = {};\n  findOnlyWithValue = true;\n\n  private _createPathIndex(path: string) {\n    return path\n      .replace(new RegExp('//', 'g'), '/')\n      .replace(new RegExp('^/', 'g'), '')\n      .split('/').filter(item => item);\n  }\n\n  store(propertyPath: string, value?: any) {\n    this._storeIndex(this._createPathIndex(propertyPath), value);\n  }\n\n  private _storeIndex(pathIndex: string[], value?: string) {\n    let indexPos = this.index;\n    for (const key of pathIndex) {\n      indexPos[key] = indexPos[key] || {};\n      indexPos = indexPos[key];\n    }\n    if (indexPos && value) {\n      indexPos[SimplePropertyIndexer.MARKER] = indexPos[SimplePropertyIndexer.MARKER] || {};\n      indexPos[SimplePropertyIndexer.MARKER][value] = value;\n    }\n  }\n\n  /**\n   * Find path in index.<br/>\n   * Will find path like:<br/>\n   * <ul>\n   *     <li>/property/0/prop</li>\n   *     <li>/property/0/prop/2/test</li>\n   *     <li>/property/0/prop/&#42;/test</li>\n   *     <li>/property/&#42;/prop/1/test</li>\n   *     <li>/property/&#42;/prop/&#42;/test</li>\n   *     <li>/property/1/prop/&#42;/test</li>\n   *  </ul>\n   * @param path\n   */\n  find(path: string): IndexerResult {\n    return this._findInIndex(this._createPathIndex(path));\n  }\n\n  _findInIndex(path: string[]): IndexerResult {\n    const ixRes: IndexerResult = {target: path, found: false, results: []};\n    this.__findIndex(ixRes, path, this.index, []);\n    return ixRes;\n  }\n\n  __findIndex(indexerResults: IndexerResult, path: string[], index: object, parent?: string[]) {\n\n    const p = parent || [];\n    const segment = path[0];\n    const wild = ('*' === segment) ? Object.keys(index) : [];\n    const _keys = ((Array.isArray(segment) ? segment : [segment]) as string[]).concat(wild);\n    const keys = _keys.filter((item, pos) => '*' !== item && _keys.indexOf(item) === pos); // remove duplicates\n\n    if (index['*']) {\n      keys.push('*');\n    }\n\n    let paths = [];\n    for (const key of keys) {\n      const restPath = path.slice(1);\n      const restIndex = index[key];\n      const restParent = p.concat(key);\n\n      if (path.length === 1) {// collect only the full paths\n        if (!this.findOnlyWithValue || (restIndex && restIndex[SimplePropertyIndexer.MARKER])) {\n          indexerResults.results = indexerResults.results || [];\n          indexerResults.results.push({\n            path: restParent,\n            value: restIndex[SimplePropertyIndexer.MARKER]\n          });\n          paths.push(restParent);\n          indexerResults.found = indexerResults.results.length > 0;\n        }\n      }\n\n      if (!restPath || !restPath.length || !restIndex) {\n        break;\n      }\n      const restPaths = this.__findIndex(indexerResults, restPath, restIndex, restParent);\n\n      paths = paths.concat(restPaths);\n    }\n    return paths;\n  }\n\n}\n\nexport interface IndexerResult {\n  /**\n   * The path originally searched for\n   */\n  target: string[];\n  /**\n   * Flag for the status of found or not found.<br/>\n   * Usually <code>results</code> will be empty if no matches found.\n   */\n  found: boolean;\n  /**\n   * The result path and values from the index search.<br/>\n   * Usually <code>results</code> will be empty if no matches found.\n   */\n  results: {\n    /**\n     * The path that matched the <code>target</code>\n     * separated in segments\n     */\n    path: string[],\n    /**\n     * The value stored at the <code>path</code>\n     */\n    value: any\n  }[];\n}\n","export abstract class ExpressionCompilerFactory {\n    public abstract createExpressionCompiler(): ExpressionCompiler;\n    public abstract createExpressionCompilerVisibilityIf(): ExpressionCompilerVisibilityIf;\n}\n\nexport interface ExpressionCompiler {\n    evaluate(expression: string, context: object): any;\n}\n\nexport interface ExpressionCompilerVisibilityIf {\n    evaluate(expression: string, context: ExpressionContextVisibilitIf): any;\n}\n/**\n * UseCase:<br/>\n * When evaluating the expression of a <code>visibilityIf</code> condition\n * an instance of this definition will be passed as context.<br/>\n * This will give access to the source and target <code>FormProperty</code>.\n */\nexport interface ExpressionContextVisibilitIf {\n    /**\n     * The source property which has the <code>visibilityIf</code> defined\n     */\n    source: FormProperty\n    /**\n     * The target property given with the <code>visibilityIf</code>\n     * <em>path</em> property\n     */\n    target: FormProperty\n}\n\n\nimport * as JEXL from 'jexl';\nimport { FormProperty } from './model';\n\nexport class JEXLExpressionCompilerFactory extends ExpressionCompilerFactory {\n    public createExpressionCompiler(): ExpressionCompiler {\n        return new JEXLExpressionCompiler();\n    }\n\n    public createExpressionCompilerVisibilityIf(): ExpressionCompilerVisibilityIf {\n        return new JEXLExpressionCompilerVisibiltyIf();\n    }\n}\n\nexport class JEXLExpressionCompiler implements ExpressionCompiler {\n    evaluate(expression: string, context: object = {}): any {\n        return new JEXL.Jexl().evalSync(expression, context)\n    }\n}\n\nexport class JEXLExpressionCompilerVisibiltyIf implements ExpressionCompilerVisibilityIf {\n    evaluate(expression: string, context: ExpressionContextVisibilitIf = { source: {} as FormProperty, target: {} as FormProperty }): any {\n        return new JEXL.Jexl().evalSync(expression, context)\n    }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnChanges,\n  EventEmitter,\n  Input,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport {Action} from './model/action';\nimport {ActionRegistry} from './model/actionregistry';\nimport {FormProperty} from './model/formproperty';\nimport {FormPropertyFactory} from './model/formpropertyfactory';\nimport {SchemaPreprocessor} from './model/schemapreprocessor';\nimport {ValidatorRegistry} from './model/validatorregistry';\nimport {Validator} from './model/validator';\nimport {Binding} from './model/binding';\nimport {BindingRegistry} from './model/bindingregistry';\n\nimport {SchemaValidatorFactory} from './schemavalidatorfactory';\nimport {WidgetFactory} from './widgetfactory';\nimport {TerminatorService} from './terminator.service';\nimport {PropertyBindingRegistry} from './property-binding-registry';\nimport { ExpressionCompilerFactory } from './expression-compiler-factory';\n\nexport function useFactory(schemaValidatorFactory, validatorRegistry, propertyBindingRegistry, expressionCompilerFactory) {\n  return new FormPropertyFactory(schemaValidatorFactory, validatorRegistry, propertyBindingRegistry, expressionCompilerFactory);\n}\n\n@Component({\n  selector: 'sf-form',\n  template: `\n    <form *ngIf=\"rootProperty\" [attr.name]=\"rootProperty.rootName\" [attr.id]=\"rootProperty.rootName\">\n      <sf-form-element [formProperty]=\"rootProperty\"></sf-form-element>\n    </form>`,\n  providers: [\n    ActionRegistry,\n    ValidatorRegistry,\n    PropertyBindingRegistry,\n    BindingRegistry,\n    SchemaPreprocessor,\n    WidgetFactory,\n    {\n      provide: FormPropertyFactory,\n      useFactory: useFactory,\n      deps: [SchemaValidatorFactory, ValidatorRegistry, PropertyBindingRegistry, ExpressionCompilerFactory]\n    },\n    TerminatorService,\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: FormComponent,\n      multi: true\n    }\n  ]\n})\nexport class FormComponent implements OnChanges, ControlValueAccessor {\n\n  @Input() schema: any = null;\n\n  @Input() model: any;\n\n  @Input() actions: { [actionId: string]: Action } = {};\n\n  @Input() validators: { [path: string]: Validator } = {};\n\n  @Input() bindings: { [path: string]: Binding } = {};\n\n  @Output() onChange = new EventEmitter<{ value: any }>();\n\n  @Output() modelChange = new EventEmitter<any>();\n\n  @Output() isValid = new EventEmitter<boolean>();\n\n  @Output() onErrorChange = new EventEmitter<{ value: any[] }>();\n\n  @Output() onErrorsChange = new EventEmitter<{value: any}>();\n\n  rootProperty: FormProperty = null;\n\n  private onChangeCallback: any;\n\n  constructor(\n    private formPropertyFactory: FormPropertyFactory,\n    private actionRegistry: ActionRegistry,\n    private validatorRegistry: ValidatorRegistry,\n    private bindingRegistry: BindingRegistry,\n    private cdr: ChangeDetectorRef,\n    private terminator: TerminatorService\n  ) { }\n\n  writeValue(obj: any) {\n    if (this.rootProperty) {\n      this.rootProperty.reset(obj, false);\n    }\n  }\n\n  registerOnChange(fn: any) {\n    this.onChangeCallback = fn;\n    if (this.rootProperty) {\n      this.rootProperty.valueChanges.subscribe(\n        this.onValueChanges.bind(this)\n      );\n    }\n  }\n\n  // TODO implement\n  registerOnTouched(fn: any) {\n  }\n\n  // TODO implement\n  // setDisabledState(isDisabled: boolean)?: void\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.validators) {\n      this.setValidators();\n    }\n\n    if (changes.actions) {\n      this.setActions();\n    }\n\n    if (changes.bindings) {\n      this.setBindings();\n    }\n\n    if (this.schema && !this.schema.type) {\n      this.schema.type = 'object';\n    }\n\n    if (this.schema && changes.schema) {\n      if (!changes.schema.firstChange) {\n        this.terminator.destroy();\n      }\n\n      SchemaPreprocessor.preprocess(this.schema);\n      this.rootProperty = this.formPropertyFactory.createProperty(this.schema);\n      if (this.model) {\n        // this.rootProperty.reset(this.model, false);\n      }\n\n      this.rootProperty.valueChanges.subscribe(\n        this.onValueChanges.bind(this)\n      );\n\n      this.rootProperty.errorsChanges.subscribe(value => {\n        this.onErrorChange.emit({value: value});\n        this.isValid.emit(!(value && value.length));\n      });\n\n    }\n\n    if (this.schema && (changes.model || changes.schema )) {\n      this.rootProperty.reset(this.model, false);\n      this.cdr.detectChanges();\n    }\n\n  }\n\n  private setValidators() {\n    this.validatorRegistry.clear();\n    if (this.validators) {\n      for (const validatorId in this.validators) {\n        if (this.validators.hasOwnProperty(validatorId)) {\n          this.validatorRegistry.register(validatorId, this.validators[validatorId]);\n        }\n      }\n    }\n  }\n\n  private setActions() {\n    this.actionRegistry.clear();\n    if (this.actions) {\n      for (const actionId in this.actions) {\n        if (this.actions.hasOwnProperty(actionId)) {\n          this.actionRegistry.register(actionId, this.actions[actionId]);\n        }\n      }\n    }\n  }\n\n  private setBindings() {\n    this.bindingRegistry.clear();\n    if (this.bindings) {\n      for (const bindingPath in this.bindings) {\n        if (this.bindings.hasOwnProperty(bindingPath)) {\n          this.bindingRegistry.register(bindingPath, this.bindings[bindingPath]);\n        }\n      }\n    }\n  }\n\n  public reset() {\n    this.rootProperty.reset(null, true);\n  }\n\n  private setModel(value: any) {\n    if (this.model) {\n      Object.assign(this.model, value);\n    } else {\n      this.model = value;\n    }\n  }\n\n  private onValueChanges(value) {\n    if (this.onChangeCallback) {\n      this.setModel(value);\n      this.onChangeCallback(value);\n    }\n\n    // two way binding is used\n    if (this.modelChange.observers.length > 0) {\n      if (!this.onChangeCallback) {\n        this.setModel(value);\n      }\n    }\n    this.onChange.emit({value: value});\n  }\n}\n","import {\n  Component, ElementRef,\n  Input, OnDestroy,\n  OnInit, Renderer2\n} from '@angular/core';\n\nimport {\n  FormControl\n} from '@angular/forms';\n\nimport {Widget} from './widget';\n\nimport {ActionRegistry} from './model/actionregistry';\nimport {FormProperty} from './model/formproperty';\nimport {BindingRegistry} from './model/bindingregistry';\nimport {Binding} from './model/binding';\n\n@Component({\n  selector: 'sf-form-element',\n  template: `\n    <div *ngIf=\"formProperty.visible\"\n         [class.has-error]=\"!control.valid\"\n         [class.has-success]=\"control.valid\">\n      <sf-widget-chooser\n        (widgetInstanciated)=\"onWidgetInstanciated($event)\"\n        [widgetInfo]=\"formProperty.schema.widget\">\n      </sf-widget-chooser>\n      <sf-form-element-action *ngFor=\"let button of buttons\" [button]=\"button\" [formProperty]=\"formProperty\"></sf-form-element-action>\n    </div>`\n})\nexport class FormElementComponent implements OnInit, OnDestroy {\n\n  private static counter = 0;\n\n  @Input() formProperty: FormProperty;\n  control: FormControl = new FormControl('', () => null);\n\n  widget: Widget<any> = null;\n\n  buttons = [];\n\n  unlisten = [];\n\n  constructor(private actionRegistry: ActionRegistry,\n              private bindingRegistry: BindingRegistry,\n              private renderer: Renderer2,\n              private elementRef: ElementRef) {\n  }\n\n  ngOnInit() {\n    this.parseButtons();\n    this.setupBindings();\n  }\n\n  private setupBindings() {\n    const bindings: Binding[] = this.bindingRegistry.get(this.formProperty.path);\n    if ((bindings || []).length) {\n      bindings.forEach((binding) => {\n        for (const eventId in binding) {\n          this.createBinding(eventId, binding[eventId]);\n        }\n      });\n    }\n  }\n\n  private createBinding(eventId, listener) {\n    this.unlisten.push(this.renderer.listen(this.elementRef.nativeElement,\n      eventId,\n      (event) => {\n        if (listener instanceof Function) {\n          listener(event, this.formProperty);\n        } else {\n          console.warn('Calling non function handler for eventId ' + eventId + ' for path ' + this.formProperty.path);\n        }\n      }));\n  }\n\n  private parseButtons() {\n    if (this.formProperty.schema.buttons !== undefined) {\n      this.buttons = this.formProperty.schema.buttons;\n\n      for (let button of this.buttons) {\n        this.createButtonCallback(button);\n      }\n    }\n  }\n\n  private createButtonCallback(button) {\n    button.action = (e) => {\n      let action;\n      if (button.id && (action = this.actionRegistry.get(button.id))) {\n        if (action) {\n          action(this.formProperty, button.parameters);\n        }\n      }\n      e.preventDefault();\n    };\n  }\n\n  onWidgetInstanciated(widget: Widget<any>) {\n    this.widget = widget;\n    let id = this.formProperty.canonicalPathNotation ||Â 'field' + (FormElementComponent.counter++);\n    if (this.formProperty.root.rootName) {\n      id = `${this.formProperty.root.rootName}:${id}`;\n    }\n\n    this.widget.formProperty = this.formProperty;\n    this.widget.schema = this.formProperty.schema;\n    this.widget.name = id;\n    this.widget.id = id;\n    this.widget.control = this.control;\n  }\n\n  ngOnDestroy(): void {\n    if (this.unlisten) {\n      this.unlisten.forEach((item) => {\n        item();\n      });\n    }\n  }\n\n}\n","import {\n  Component,\n  ComponentRef,\n  Input,\n  OnChanges,\n  ViewChild,\n  ViewContainerRef,\n  OnInit,\n  OnDestroy\n} from \"@angular/core\";\nimport {Subscription} from 'rxjs';\nimport {WidgetFactory} from \"./widgetfactory\";\nimport {TerminatorService} from \"./terminator.service\";\n\n@Component({\n  selector: 'sf-form-element-action',\n  template: '<ng-template #target></ng-template>'\n})\nexport class FormElementComponentAction implements OnInit, OnChanges, OnDestroy {\n\n  @Input()\n  button: any;\n\n  @Input()\n  formProperty: any;\n\n  @ViewChild('target', { read: ViewContainerRef, static: true }) container: ViewContainerRef;\n\n  private ref: ComponentRef<any>;\n  private subs: Subscription;\n\n  constructor(private widgetFactory: WidgetFactory = null,\n              private terminator: TerminatorService) {\n  }\n\n  ngOnInit() {\n    this.subs = this.terminator.onDestroy.subscribe(destroy => {\n      if (destroy) {\n        this.ref.destroy();\n      }\n    });\n  }\n\n  ngOnChanges() {\n    this.ref = this.widgetFactory.createWidget(this.container, this.button.widget || 'button');\n    this.ref.instance.button = this.button;\n    this.ref.instance.formProperty = this.formProperty;\n  }\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ComponentRef,\n  ChangeDetectorRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  OnInit,\n  OnDestroy\n} from '@angular/core';\nimport { TerminatorService } from './terminator.service';\nimport { WidgetFactory } from './widgetfactory';\nimport { Subscription } from 'rxjs';\n\n\n@Component({\n  selector: 'sf-widget-chooser',\n  template: `<div #target></div>`,\n})\nexport class WidgetChooserComponent implements OnInit, OnChanges, OnDestroy {\n\n  @Input() widgetInfo: any;\n\n  @Output() widgetInstanciated = new EventEmitter<any>();\n\n  @ViewChild('target', { read: ViewContainerRef, static: true }) container: ViewContainerRef;\n\n  private widgetInstance: any;\n  private ref: ComponentRef<any>;\n  private subs: Subscription;\n\n  constructor(\n    private widgetFactory: WidgetFactory = null,\n    private cdr: ChangeDetectorRef,\n    private terminator: TerminatorService,\n  ) { }\n\n  ngOnInit() {\n    this.subs = this.terminator.onDestroy.subscribe(destroy => {\n      if (destroy) {\n        this.ref.destroy();\n      }\n    });\n  }\n\n  ngOnChanges() {\n    this.ref = this.widgetFactory.createWidget(this.container, this.widgetInfo.id);\n    this.widgetInstanciated.emit(this.ref.instance);\n    this.widgetInstance = this.ref.instance;\n    this.cdr.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n  }\n}\n","import {FormProperty} from './formproperty';\n\nexport abstract class AtomicProperty extends FormProperty {\n\n  setValue(value, onlySelf = false) {\n    this._value = value;\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  reset(value: any = null, onlySelf = true) {\n    this.resetValue(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  resetValue(value: any): any {\n    if (value === null) {\n      if (this.schema.default !== undefined) {\n        value = this.schema.default;\n      } else {\n        value = this.fallbackValue();\n      }\n    }\n    this._value = value;\n  }\n\n  public _hasValue(): boolean {\n    return this.fallbackValue() !== this.value;\n  }\n\n  abstract fallbackValue(): any;\n\n  public _updateValue() {\n  }\n}\n","import { PROPERTY_TYPE_MAPPING } from './typemapping';\nimport {PropertyGroup} from './formproperty';\nimport {FormPropertyFactory} from './formpropertyfactory';\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\nimport { ExpressionCompilerFactory } from '../expression-compiler-factory';\n\nexport class ObjectProperty extends PropertyGroup {\n\n  private propertiesId: string[] = [];\n\n  constructor(private formPropertyFactory: FormPropertyFactory,\n              schemaValidatorFactory: SchemaValidatorFactory,\n              validatorRegistry: ValidatorRegistry,\n              expressionCompilerFactory: ExpressionCompilerFactory,\n              schema: any,\n              parent: PropertyGroup,\n              path: string) {\n    super(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n    this.createProperties();\n  }\n\n  setValue(value: any, onlySelf: boolean) {\n    for (const propertyId in value) {\n      if (value.hasOwnProperty(propertyId)) {\n        this.properties[propertyId].setValue(value[propertyId], true);\n      }\n    }\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  reset(value: any, onlySelf = true) {\n    value = value || this.schema.default || {};\n    this.resetProperties(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  resetProperties(value: any) {\n    for (const propertyId in this.schema.properties) {\n      if (this.schema.properties.hasOwnProperty(propertyId)) {\n        this.properties[propertyId].reset(value[propertyId], true);\n      }\n    }\n  }\n\n  createProperties() {\n    this.properties = {};\n    this.propertiesId = [];\n    for (const propertyId in this.schema.properties) {\n      if (this.schema.properties.hasOwnProperty(propertyId)) {\n        const propertySchema = this.schema.properties[propertyId];\n        this.properties[propertyId] = this.formPropertyFactory.createProperty(propertySchema, this, propertyId);\n        this.propertiesId.push(propertyId);\n      }\n    }\n  }\n\n  public _hasValue(): boolean {\n    return !!Object.keys(this.value).length;\n  }\n\n  public _updateValue() {\n    this.reduceValue();\n  }\n\n  public _runValidation() {\n    super._runValidation();\n\n    if (this._errors) {\n      this._errors.forEach(error => {\n        const prop = this.searchProperty(error.path.slice(1));\n        if (prop) {\n          prop.extendErrors(error);\n        }\n      });\n    }\n  }\n\n  private reduceValue(): void {\n    const value = {};\n    this.forEachChild((property, propertyId: string) => {\n      if (property.visible && property._hasValue()) {\n        value[propertyId] = property.value;\n      }\n    });\n    this._value = value;\n  }\n}\n\nPROPERTY_TYPE_MAPPING.object = (\n    schemaValidatorFactory: SchemaValidatorFactory,\n    validatorRegistry: ValidatorRegistry,\n    expressionCompilerFactory: ExpressionCompilerFactory,\n    schema: any,\n    parent: PropertyGroup,\n    path: string,\n    formPropertyFactory: FormPropertyFactory,\n) => {\n    return new ObjectProperty(\n        formPropertyFactory, schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n};\n","import {FormProperty, PropertyGroup} from './formproperty';\nimport {FormPropertyFactory} from './formpropertyfactory';\nimport { PROPERTY_TYPE_MAPPING } from './typemapping';\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\nimport { ExpressionCompilerFactory } from '../expression-compiler-factory';\n\nexport class ArrayProperty extends PropertyGroup {\n\n  constructor(private formPropertyFactory: FormPropertyFactory,\n              schemaValidatorFactory: SchemaValidatorFactory,\n              validatorRegistry: ValidatorRegistry,\n              expressionCompilerFactory: ExpressionCompilerFactory,\n              schema: any,\n              parent: PropertyGroup,\n              path: string) {\n    super(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n  }\n\n  addItem(value: any = null): FormProperty {\n    let newProperty = this.addProperty();\n    newProperty.reset(value, false);\n    return newProperty;\n  }\n\n  private addProperty() {\n    let newProperty = this.formPropertyFactory.createProperty(this.schema.items, this);\n    (<FormProperty[]>this.properties).push(newProperty);\n    return newProperty;\n  }\n\n  removeItem(item: FormProperty) {\n    this.properties = (<FormProperty[]>this.properties).filter(i => i !== item);\n    this.updateValueAndValidity(false, true);\n  }\n\n  setValue(value: any, onlySelf: boolean) {\n    this.createProperties();\n    this.resetProperties(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  public _hasValue(): boolean {\n    return true;\n  }\n\n  public _updateValue() {\n    this.reduceValue();\n  }\n\n  private reduceValue(): void {\n    const value = [];\n    this.forEachChild((property, _) => {\n      if (property.visible && property._hasValue()) {\n        value.push(property.value);\n      }\n    });\n    this._value = value;\n  }\n\n  reset(value: any, onlySelf = true) {\n    value = value || this.schema.default || [];\n    this.properties = [];\n    this.resetProperties(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  private createProperties() {\n    this.properties = [];\n  }\n\n\n  private resetProperties(value: any) {\n    for (let idx in value) {\n      if (value.hasOwnProperty(idx)) {\n        let property = this.addProperty();\n        property.reset(value[idx], true);\n      }\n    }\n  }\n}\n\nPROPERTY_TYPE_MAPPING.array = (\n    schemaValidatorFactory: SchemaValidatorFactory,\n    validatorRegistry: ValidatorRegistry,\n    expressionCompilerFactory: ExpressionCompilerFactory,\n    schema: any,\n    parent: PropertyGroup,\n    path: string,\n    formPropertyFactory: FormPropertyFactory,\n) => {\n    return new ArrayProperty(\n        formPropertyFactory, schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n};\n","import { AtomicProperty } from './atomicproperty';\nimport { PROPERTY_TYPE_MAPPING } from './typemapping';\nimport { PropertyGroup } from './formproperty';\nimport { ExpressionCompilerFactory } from '../expression-compiler-factory';\nimport { ValidatorRegistry } from './validatorregistry';\nimport { SchemaValidatorFactory } from '../schemavalidatorfactory';\n\nexport class StringProperty extends AtomicProperty {\n\n  fallbackValue() {\n    return '';\n  }\n\n}\n\nPROPERTY_TYPE_MAPPING.string = (\n    schemaValidatorFactory: SchemaValidatorFactory,\n    validatorRegistry: ValidatorRegistry,\n    expressionCompilerFactory: ExpressionCompilerFactory,\n    schema: any,\n    parent: PropertyGroup,\n    path: string\n) => {\n    return new StringProperty(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n};\n","import { AtomicProperty } from './atomicproperty';\nimport { ValidatorRegistry, PropertyGroup } from '.';\nimport { ExpressionCompilerFactory } from '../expression-compiler-factory';\nimport { SchemaValidatorFactory } from '../schemavalidatorfactory';\nimport { PROPERTY_TYPE_MAPPING } from './typemapping';\n\nexport class BooleanProperty extends AtomicProperty {\n\n  fallbackValue() {\n    return null;\n  }\n}\n\nPROPERTY_TYPE_MAPPING.boolean = (\n    schemaValidatorFactory: SchemaValidatorFactory,\n    validatorRegistry: ValidatorRegistry,\n    expressionCompilerFactory: ExpressionCompilerFactory,\n    schema: any,\n    parent: PropertyGroup,\n    path: string\n) => {\n    return new BooleanProperty(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n};\n","import {AtomicProperty} from './atomicproperty';\nimport { ValidatorRegistry, PropertyGroup } from '.';\nimport { ExpressionCompilerFactory } from '../expression-compiler-factory';\nimport { SchemaValidatorFactory } from '../schemavalidatorfactory';\nimport { PROPERTY_TYPE_MAPPING } from './typemapping';\n\nexport class NumberProperty extends AtomicProperty {\n\n  fallbackValue() {\n    return null;\n  }\n\n  setValue(value, onlySelf = false) {\n    if (typeof value === 'string') {\n      if (value.length) {\n        value = value.indexOf('.') > -1 ? parseFloat(value) : parseInt(value, 10);\n      } else {\n        value = null;\n      }\n    }\n    this._value = value;\n    this.updateValueAndValidity(onlySelf, true);\n  }\n}\n\nPROPERTY_TYPE_MAPPING.integer = (\n    schemaValidatorFactory: SchemaValidatorFactory,\n    validatorRegistry: ValidatorRegistry,\n    expressionCompilerFactory: ExpressionCompilerFactory,\n    schema: any,\n    parent: PropertyGroup,\n    path: string\n) => {\n    return new NumberProperty(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n};\n\n PROPERTY_TYPE_MAPPING.number = (\n    schemaValidatorFactory: SchemaValidatorFactory,\n    validatorRegistry: ValidatorRegistry,\n    expressionCompilerFactory: ExpressionCompilerFactory,\n    schema: any,\n    parent: PropertyGroup,\n    path: string\n) => {\n    return new NumberProperty(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n};\n","import {AfterViewInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport {ArrayProperty} from './model/arrayproperty';\nimport {FormProperty} from './model/formproperty';\nimport {ObjectProperty} from './model/objectproperty';\n\nexport abstract class Widget<T extends FormProperty> {\n  formProperty: T;\n  control: FormControl;\n  errorMessages: string[];\n\n  id: string = '';\n  name: string = '';\n  schema: any = {};\n}\n\nexport class ControlWidget extends Widget<FormProperty> implements AfterViewInit {\n\n  ngAfterViewInit() {\n    const control = this.control;\n    this.formProperty.valueChanges.subscribe((newValue) => {\n      if (control.value !== newValue) {\n        control.setValue(newValue, {emitEvent: false});\n      }\n    });\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, { emitEvent: true });\n      const messages = (errors || [])\n        .filter(e => {\n          return e.path && e.path.slice(1) === this.formProperty.path;\n        })\n        .map(e => e.message);\n      this.errorMessages = messages.filter((m, i) => messages.indexOf(m) === i);\n    });\n    control.valueChanges.subscribe((newValue) => {\n      this.formProperty.setValue(newValue, false);\n    });\n  }\n\n}\n\nexport class ArrayLayoutWidget extends Widget<ArrayProperty> implements AfterViewInit {\n\n  ngAfterViewInit() {\n    const control = this.control;\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, {emitEvent: true});\n    });\n  }\n}\n\nexport class ObjectLayoutWidget extends Widget<ObjectProperty> implements AfterViewInit {\n\n  ngAfterViewInit() {\n    const control = this.control;\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, {emitEvent: true});\n    });\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { ArrayLayoutWidget } from '../../widget';\nimport { FormProperty } from '../../model';\n\n@Component({\n  selector: 'sf-array-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n\t<span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<div *ngFor=\"let itemProperty of formProperty.properties\">\n\t\t<sf-form-element [formProperty]=\"itemProperty\"></sf-form-element>\n\t\t<button (click)=\"removeItem(itemProperty)\" class=\"btn btn-default array-remove-button\"\n\t\t\t[disabled]=\"isRemoveButtonDisabled()\" \n\t\t\t*ngIf=\"!(schema.hasOwnProperty('minItems') && schema.hasOwnProperty('maxItems') && schema.minItems === schema.maxItems)\"\n\t\t\t>\n\t\t\t<span class=\"glyphicon glyphicon-minus\" aria-hidden=\"true\"></span> Remove\n\t\t</button>\n\t</div>\n\t<button (click)=\"addItem()\" class=\"btn btn-default array-add-button\"\n\t\t[disabled]=\"isAddButtonDisabled()\"\n\t\t*ngIf=\"!(schema.hasOwnProperty('minItems') && schema.hasOwnProperty('maxItems') && schema.minItems === schema.maxItems)\"\n\t>\n\t\t<span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span> Add\n\t</button>\n</div>`\n})\nexport class ArrayWidget extends ArrayLayoutWidget {\n  buttonDisabledAdd:boolean\n  buttonDisabledRemove:boolean\n\n  addItem() {\n\tthis.formProperty.addItem();\n\tthis.updateButtonDisabledState()\n  }\n\n  removeItem(item: FormProperty) {\n\tthis.formProperty.removeItem(item);\n\tthis.updateButtonDisabledState()\n  }\n\n  trackByIndex(index: number, item: any) {\n    return index;\n  }\n\n\tupdateButtonDisabledState() {\n\t\tthis.buttonDisabledAdd = this.isAddButtonDisabled()\n\t\tthis.buttonDisabledRemove = this.isRemoveButtonDisabled()\n\t}\n\tisAddButtonDisabled() {\n\t\tif (this.schema.hasOwnProperty('maxItems') && Array.isArray(this.formProperty.properties)) {\n\t\t\tif (this.formProperty.properties.length >= this.schema.maxItems) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\n\tisRemoveButtonDisabled() {\n\t\tif (this.schema.hasOwnProperty('minItems') && Array.isArray(this.formProperty.properties)) {\n\t\t\tif (this.formProperty.properties.length <= this.schema.minItems) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n}\n","import {Component} from \"@angular/core\";\n\n@Component({\n  selector: 'sf-button-widget',\n  template: '<button (click)=\"button.action($event)\">{{button.label}}</button>'\n})\nexport class ButtonWidget {\n  public button\n  public formProperty\n}\n","import { Component } from '@angular/core';\n\nimport { ObjectLayoutWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-form-object',\n  template: `<fieldset *ngFor=\"let fieldset of formProperty.schema.fieldsets\">\n\t<legend *ngIf=\"fieldset.title\">{{fieldset.title}}</legend>\n\t<div *ngIf=\"fieldset.description\">{{fieldset.description}}</div>\n\t<div *ngFor=\"let fieldId of fieldset.fields\">\n\t\t<sf-form-element [formProperty]=\"formProperty.getProperty(fieldId)\"></sf-form-element>\n\t</div>\n</fieldset>`\n})\nexport class ObjectWidget extends ObjectLayoutWidget { }\n","import { Component, AfterViewInit } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-checkbox-widget',\n  template: `<div class=\"widget form-group\">\n    <label [attr.for]=\"id\" class=\"horizontal control-label\">\n        {{ schema.title }}\n    </label>\n\t<div *ngIf=\"schema.type!='array'\" class=\"checkbox\">\n\t\t<label class=\"horizontal control-label\">\n\t\t\t<input [formControl]=\"control\" [attr.name]=\"name\" [attr.id]=\"id\" [indeterminate]=\"control.value !== false && control.value !== true ? true :null\" type=\"checkbox\" [disabled]=\"schema.readOnly\">\n\t\t\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n\t\t\t{{schema.description}}\n\t\t</label>\n\t</div>\n\t<ng-container *ngIf=\"schema.type==='array'\">\n\t\t<div *ngFor=\"let option of schema.items.oneOf\" class=\"checkbox\">\n\t\t\t<label class=\"horizontal control-label\">\n\t\t\t\t<input [attr.name]=\"name\"\n\t\t\t\t\tvalue=\"{{option.enum[0]}}\" type=\"checkbox\" \n\t\t\t\t\t[attr.disabled]=\"schema.readOnly\"\n\t\t\t\t\t(change)=\"onCheck($event.target)\"\n\t\t\t\t\t[attr.checked]=\"checked[option.enum[0]] ? true : null\"\n\t\t\t\t\t[attr.id]=\"id + '.' + option.enum[0]\"\n\t\t\t\t\t>\n\t\t\t\t{{option.description}}\n\t\t\t</label>\n\t\t</div>\n\t</ng-container>\n</div>`\n})\nexport class CheckboxWidget extends ControlWidget implements AfterViewInit {\n\n\tchecked: any = {};\n\n\tngAfterViewInit() {\n\t\tconst control = this.control;\n\t\tthis.formProperty.valueChanges.subscribe((newValue) => {\n\t\t\tif (control.value !== newValue) {\n\t\t\t\tcontrol.setValue(newValue, { emitEvent: false });\n\t\t\t\tif (newValue && Array.isArray(newValue)) {\n\t\t\t\t\tnewValue.map(v => this.checked[v] = true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.formProperty.errorsChanges.subscribe((errors) => {\n\t\t\tcontrol.setErrors(errors, { emitEvent: true });\n\t\t});\n\t\tcontrol.valueChanges.subscribe((newValue) => {\n\t\t\tthis.formProperty.setValue(newValue, false);\n\t\t});\n\t}\n\n\tonCheck(el) {\n\t\tif (el.checked) {\n\t\t\tthis.checked[el.value] = true;\n\t\t} else {\n\t\t\tdelete this.checked[el.value];\n\t\t}\n\t\tthis.formProperty.setValue(Object.keys(this.checked), false);\n\t}\n}\n","import { Component, AfterViewInit } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-file-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n  <input [name]=\"name\" class=\"text-widget file-widget\" [attr.id]=\"id\"\n    [formControl]=\"control\" type=\"file\" [attr.disabled]=\"schema.readOnly?true:null\"\n    (change)=\"onFileChange($event)\">\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>`\n})\nexport class FileWidget extends ControlWidget implements AfterViewInit {\n\n  protected reader = new FileReader();\n  protected filedata: any = {};\n\n  constructor() {\n    super();\n  }\n\n  ngAfterViewInit() {\n    // OVERRIDE ControlWidget ngAfterViewInit() as ReactiveForms do not handle\n    // file inputs\n    const control = this.control;\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, { emitEvent: true });\n    });\n\n    this.reader.onloadend = () => {\n      this.filedata.data = window.btoa((this.reader.result as string));\n      this.formProperty.setValue(this.filedata, false);\n    };\n  }\n\n  onFileChange($event) {\n    const file = $event.target.files[0];\n    this.filedata.filename = file.name;\n    this.filedata.size = file.size;\n    this.filedata['content-type'] = file.type;\n    this.filedata.encoding = 'base64';\n    this.reader.readAsBinaryString(file);\n  }\n}\n","import {\n  Component,\n} from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-integer-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n  <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<input [attr.readonly]=\"schema.readOnly?true:null\" [attr.name]=\"name\"\n\t[attr.id]=\"id\"\n\tclass=\"text-widget integer-widget form-control\" [formControl]=\"control\"\n\t[attr.type]=\"'number'\" [attr.min]=\"schema.minimum\" [attr.max]=\"schema.maximum\"\n\t[attr.placeholder]=\"schema.placeholder\"\n\t[attr.maxLength]=\"schema.maxLength || null\"\n  [attr.minLength]=\"schema.minLength || null\">\n</div>`\n})\nexport class IntegerWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-textarea-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<textarea [readonly]=\"schema.readOnly\" [name]=\"name\"\n\t\t[attr.id]=\"id\"\n\t\tclass=\"text-widget textarea-widget form-control\"\n\t\t[attr.placeholder]=\"schema.placeholder\"\n\t\t[attr.maxLength]=\"schema.maxLength || null\"\n    [attr.minLength]=\"schema.minLength || null\"\n\t\t[formControl]=\"control\"></textarea>\n</div>`\n})\nexport class TextAreaWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-radio-widget',\n  template: `<div class=\"widget form-group\">\n\t<label>{{schema.title}}</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<div *ngFor=\"let option of schema.oneOf\" class=\"radio\">\n\t\t<label class=\"horizontal control-label\">\n\t\t\t<input [formControl]=\"control\" [attr.name]=\"name\" [attr.id]=\"id + '.' + option.enum[0]\" value=\"{{option.enum[0]}}\" type=\"radio\"  [disabled]=\"schema.readOnly||option.readOnly\">\n\t\t\t{{option.description}}\n\t\t</label>\n\t</div>\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>`\n})\nexport class RadioWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-range-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\t\n\t<input [name]=\"name\" class=\"text-widget range-widget\" [attr.id]=\"id\"\n\t[formControl]=\"control\" [attr.type]=\"'range'\" [attr.min]=\"schema.minimum\" [attr.max]=\"schema.maximum\" [disabled]=\"schema.readOnly?true:null\" >\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\">\n</div>`\n})\nexport class RangeWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n\tselector: 'sf-select-widget',\n\ttemplate: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n\n\t<span *ngIf=\"schema.description\" class=\"formHelp\">\n\t\t{{schema.description}}\n\t</span>\n\n\t<select *ngIf=\"schema.type!='array'\" [formControl]=\"control\" [attr.name]=\"name\" [attr.id]=\"id\" [disabled]=\"schema.readOnly\" [disableControl]=\"schema.readOnly\" class=\"form-control\">\n\t\t<ng-container *ngIf=\"schema.oneOf; else use_enum\">\n\t\t\t<option *ngFor=\"let option of schema.oneOf\" [ngValue]=\"option.enum[0]\" >{{option.description}}</option>\n\t\t</ng-container>\n\t\t<ng-template #use_enum>\n\t\t\t<option *ngFor=\"let option of schema.enum\" [ngValue]=\"option\" >{{option}}</option>\n\t\t</ng-template>\n\t</select>\n\n\t<select *ngIf=\"schema.type==='array'\" multiple [formControl]=\"control\" [attr.name]=\"name\" [attr.id]=\"id\" [disabled]=\"schema.readOnly\" [disableControl]=\"schema.readOnly\" class=\"form-control\">\n    <option *ngFor=\"let option of schema.items.oneOf\" [ngValue]=\"option.enum[0]\" [disabled]=\"option.readOnly\">{{option.description}}</option>\n\t</select>\n\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>`\n})\nexport class SelectWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-string-widget',\n  template: `<input *ngIf=\"this.schema.widget.id ==='hidden'; else notHiddenFieldBlock\"\n  [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n<ng-template #notHiddenFieldBlock>\n<div class=\"widget form-group\">\n    <label [attr.for]=\"id\" class=\"horizontal control-label\">\n    \t{{ schema.title }}\n    </label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n    <input [name]=\"name\" [attr.readonly]=\"(schema.widget.id!=='color') && schema.readOnly?true:null\"\n    class=\"text-widget.id textline-widget form-control\"\n    [attr.type]=\"!this.schema.widget.id || this.schema.widget.id === 'string' ? 'text' : this.schema.widget.id\"\n    [attr.id]=\"id\"  [formControl]=\"control\" [attr.placeholder]=\"schema.placeholder\"\n    [attr.maxLength]=\"schema.maxLength || null\"\n    [attr.minLength]=\"schema.minLength || null\"\n    [attr.required]=\"schema.isRequired || null\"\n    [attr.disabled]=\"(schema.widget.id=='color' && schema.readOnly)?true:null\">\n    <input *ngIf=\"(schema.widget.id==='color' && schema.readOnly)\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>\n</ng-template>`\n})\nexport class StringWidget extends ControlWidget {\n\n    getInputType() {\n        if (!this.schema.widget.id || this.schema.widget.id === 'string') {\n            return 'text';\n        } else {\n            return this.schema.widget.id;\n        }\n    }\n}\n","import { ArrayWidget } from './array/array.widget';\nimport { ButtonWidget } from './button/button.widget';\nimport { CheckboxWidget } from './checkbox/checkbox.widget';\nimport { FileWidget } from './file/file.widget';\nimport { IntegerWidget } from './integer/integer.widget';\nimport { ObjectWidget } from './object/object.widget';\nimport { RadioWidget } from './radio/radio.widget';\nimport { RangeWidget } from './range/range.widget';\nimport { SelectWidget } from './select/select.widget';\nimport { StringWidget } from './string/string.widget';\nimport { TextAreaWidget } from './textarea/textarea.widget';\n\nimport { WidgetRegistry } from '../widgetregistry';\n\nexport class DefaultWidgetRegistry extends WidgetRegistry {\n  constructor() {\n    super();\n\n    this.register('array',  ArrayWidget);\n    this.register('object',  ObjectWidget);\n\n    this.register('string', StringWidget);\n    this.register('search', StringWidget);\n    this.register('tel', StringWidget);\n    this.register('url', StringWidget);\n    this.register('email', StringWidget);\n    this.register('password', StringWidget);\n    this.register('color', StringWidget);\n    this.register('date', StringWidget);\n    this.register('date-time', StringWidget);\n    this.register('time', StringWidget);\n\n    this.register('integer', IntegerWidget);\n    this.register('number', IntegerWidget);\n    this.register('range', RangeWidget);\n\n    this.register('textarea', TextAreaWidget);\n\n    this.register('file', FileWidget);\n    this.register('select', SelectWidget);\n    this.register('radio', RadioWidget);\n    this.register('boolean', CheckboxWidget);\n    this.register('checkbox', CheckboxWidget);\n\n    this.register('button', ButtonWidget);\n\n    this.setDefaultWidget(StringWidget);\n  }\n}\n","import { Input, Directive } from '@angular/core'\nimport { NgControl } from '@angular/forms';\n\n@Directive({\n    selector: '[disableControl]'\n})\nexport class DisableControlDirective {\n\n    @Input() set disableControl(condition: boolean) {\n        const action = condition ? 'disable' : 'enable';\n        this.ngControl.control[action]();\n    }\n\n    constructor(private ngControl: NgControl) {\n    }\n\n}","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sf-default-field',\n  template: `<p>Unknow type</p>`\n})\nexport class DefaultWidget {}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {\n  FormsModule,\n  ReactiveFormsModule\n} from '@angular/forms';\n\nimport {FormElementComponent} from './formelement.component';\nimport {FormComponent} from './form.component';\nimport {WidgetChooserComponent} from './widgetchooser.component';\nimport {ArrayWidget} from './defaultwidgets/array/array.widget';\nimport {ButtonWidget} from './defaultwidgets/button/button.widget';\nimport {ObjectWidget} from './defaultwidgets/object/object.widget';\nimport {CheckboxWidget} from './defaultwidgets/checkbox/checkbox.widget';\nimport {FileWidget} from './defaultwidgets/file/file.widget';\nimport {IntegerWidget} from './defaultwidgets/integer/integer.widget';\nimport {TextAreaWidget} from './defaultwidgets/textarea/textarea.widget';\nimport {RadioWidget} from './defaultwidgets/radio/radio.widget';\nimport {RangeWidget} from './defaultwidgets/range/range.widget';\nimport {SelectWidget} from './defaultwidgets/select/select.widget';\nimport {StringWidget} from './defaultwidgets/string/string.widget';\nimport {DefaultWidgetRegistry} from './defaultwidgets/defaultwidgetregistry';\nimport {DisableControlDirective} from './defaultwidgets/_directives/disableControl.directive';\n\nimport {\n  DefaultWidget\n} from './default.widget';\n\nimport {WidgetRegistry} from './widgetregistry';\nimport {SchemaValidatorFactory, ZSchemaValidatorFactory} from './schemavalidatorfactory';\nimport {FormElementComponentAction} from './formelement.action.component';\nimport {ExpressionCompilerFactory, JEXLExpressionCompilerFactory} from './expression-compiler-factory';\n\nconst moduleProviders = [\n  {\n    provide: WidgetRegistry,\n    useClass: DefaultWidgetRegistry\n  },\n  {\n    provide: SchemaValidatorFactory,\n    useClass: ZSchemaValidatorFactory\n  },\n  {\n    provide: ExpressionCompilerFactory,\n    useClass: JEXLExpressionCompilerFactory\n  }\n];\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  declarations: [\n    FormElementComponent,\n    FormElementComponentAction,\n    FormComponent,\n    WidgetChooserComponent,\n    DefaultWidget,\n    ArrayWidget,\n    ButtonWidget,\n    ObjectWidget,\n    CheckboxWidget,\n    FileWidget,\n    IntegerWidget,\n    TextAreaWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    StringWidget,\n    DisableControlDirective\n  ],\n  entryComponents: [\n    FormElementComponent,\n    FormElementComponentAction,\n    FormComponent,\n    WidgetChooserComponent,\n    ArrayWidget,\n    ButtonWidget,\n    ObjectWidget,\n    CheckboxWidget,\n    FileWidget,\n    IntegerWidget,\n    TextAreaWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    StringWidget\n  ],\n  exports: [\n    FormComponent,\n    FormElementComponent,\n    FormElementComponentAction,\n    WidgetChooserComponent,\n    ArrayWidget,\n    ButtonWidget,\n    ObjectWidget,\n    CheckboxWidget,\n    FileWidget,\n    IntegerWidget,\n    TextAreaWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    StringWidget,\n    DisableControlDirective\n  ]\n})\nexport class SchemaFormModule {\n\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: SchemaFormModule,\n      providers: [...moduleProviders]\n    };\n  }\n\n}\n","import { Injectable, EventEmitter } from '@angular/core';\n\nexport class TemplateSchemaService {\n\n  changes = new EventEmitter();\n\n  constructor() { }\n\n  changed() {\n    this.changes.emit();\n  }\n\n}\n","import { ElementRef } from '@angular/core';\n\nexport class TemplateSchemaElement {\n\n  getTextContent(elementRef: ElementRef): string {\n    const nodes = Array.from(elementRef.nativeElement.childNodes);\n    const node = <HTMLElement>nodes.filter((el: HTMLElement) => {\n      return el.nodeType === el.TEXT_NODE;\n    }).pop();\n\n    if (!node || !node.nodeValue) {\n      return '';\n    }\n\n    return node.nodeValue.trim();\n  }\n\n}\n","import {\n  Component,\n  AfterContentInit,\n  Input,\n  Output,\n  ElementRef,\n  EventEmitter,\n  forwardRef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { TemplateSchemaElement } from '../template-schema-element';\n\n\n@Component({\n  selector: 'sf-button',\n  templateUrl: './button.component.html',\n  providers: [\n    {\n      provide: TemplateSchemaElement,\n      useExisting: forwardRef(() => ButtonComponent),\n    }\n  ]\n})\nexport class ButtonComponent extends TemplateSchemaElement implements AfterContentInit {\n\n  @Input()\n  id: string;\n\n  @Input()\n  label = '';\n\n  @Input()\n  widget: string | object;\n\n  @Output()\n  click = new EventEmitter<any>();\n\n  constructor(private elementRef: ElementRef) {\n    super();\n  }\n\n  private setLabelFromContent() {\n    const textContent = this.getTextContent(this.elementRef);\n\n    // label as @Input takes priority over content text\n    if (textContent && !this.label) {\n      this.label = textContent;\n    }\n\n  }\n\n  ngAfterContentInit() {\n    this.setLabelFromContent();\n  }\n\n}\n","import { Validator } from '../../model/validator';\n\nexport enum FieldType {\n  String = 'string',\n  Object = 'object',\n  Array = 'array',\n  Boolean = 'boolean',\n  Integer =  'integer',\n  Number = 'number',\n}\n\nexport interface Field {\n  name: string;\n  required: boolean;\n  getSchema(): any;\n  getButtons(): any;\n  getValidators(): { path: string, validator: Validator }[];\n}\n\n\n","import { ElementRef, QueryList } from '@angular/core';\n\nimport { Validator } from '../../model/validator';\nimport { ActionRegistry } from '../../model/actionregistry';\nimport { ButtonComponent } from '../button/button.component';\nimport { TemplateSchemaElement } from '../template-schema-element';\n\nimport { Field, FieldType } from './field';\n\nexport abstract class FieldParent extends TemplateSchemaElement {\n\n  name = '';\n  type: FieldType;\n\n  get path(): string {\n    if (!this.name) {\n      return '';\n    }\n\n    return '/' + this.name;\n  }\n\n  protected abstract actionRegistry: ActionRegistry;\n  protected abstract childButtons: QueryList<ButtonComponent>;\n\n\n  getButtons(): { id: string, label: string, widget?: string | object }[] {\n\n    return this.childButtons.map((button, index) => {\n\n      if (!button.id) {\n        const randomString = Math.random().toString(16).substr(2, 8);\n        // generate id for button\n        button.id = this.name + randomString + '_'  + (index + 1);\n      }\n\n      // register as button action the EventEmitter click\n      this.actionRegistry.register(\n        button.id,\n        button.click.emit.bind(button.click)\n      );\n\n      const _button = <any>{\n        id: button.id,\n        label: button.label,\n      };\n\n      if (button.widget) {\n        _button.widget = button.widget;\n      }\n\n      return _button;\n\n    });\n  }\n\n  protected getFieldsValidators(\n    fields: Field[]\n  ): { path: string, validator: Validator }[] {\n\n    return fields.reduce((validators, field) => {\n      return validators.concat(field.getValidators());\n    }, []);\n\n  }\n\n  protected getFieldsSchema(fields: Field[]) {\n    return fields.reduce((schema: any, field) => {\n\n      switch (this.type) {\n        case FieldType.Array:\n          schema.items = field.getSchema();\n          break;\n\n        default:\n          if (!schema.properties) {\n            schema.properties = {};\n          }\n\n          schema.properties[field.name] = field.getSchema();\n          break;\n      }\n\n      const buttons = field.getButtons();\n      if (buttons.length > 0) {\n        schema.buttons = buttons;\n      }\n\n      if (!field.required) {\n        return schema;\n      }\n\n      if (!schema.required) {\n        schema.required = [];\n      }\n      schema.required.push(field.name);\n      return schema;\n    }, {});\n  }\n\n}\n","import {\n Component,\n ElementRef,\n Input,\n OnInit,\n forwardRef\n} from '@angular/core';\n\nimport { TemplateSchemaElement } from '../../template-schema-element';\n\n\n@Component({\n  selector: 'sf-item',\n  templateUrl: './item.component.html'\n})\nexport class ItemComponent extends TemplateSchemaElement implements OnInit {\n\n  @Input()\n  value: any;\n\n  description: string;\n\n  constructor(private elementRef: ElementRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this.description = this.getTextContent(this.elementRef);\n  }\n\n}\n","import {\n  Component,\n  Input,\n  Output,\n  OnInit,\n  AfterContentInit,\n  ContentChildren,\n  ViewChild,\n  QueryList,\n  ElementRef,\n  forwardRef,\n  SimpleChanges,\n  SimpleChange,\n  OnChanges\n} from '@angular/core';\nimport { Observable, merge } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Action } from '../../model/action';\nimport { ActionRegistry } from '../../model/actionregistry';\nimport { Validator } from '../../model/validator';\n\nimport { TemplateSchemaElement } from '../template-schema-element';\nimport { TemplateSchemaService } from '../template-schema.service';\nimport { ButtonComponent } from '../button/button.component';\n\nimport { FieldParent } from './field-parent';\nimport { FieldType, Field } from './field';\nimport { ItemComponent } from './item/item.component';\n\n\n@Component({\n  selector: 'sf-field',\n  templateUrl: './field.component.html'\n})\nexport class FieldComponent extends FieldParent implements\nField, OnChanges, AfterContentInit {\n\n  @ContentChildren(FieldComponent)\n  childFields: QueryList<FieldComponent>;\n\n  @ContentChildren(ItemComponent)\n  childItems: QueryList<ItemComponent>;\n\n  @ContentChildren(ButtonComponent)\n  childButtons: QueryList<ButtonComponent>;\n\n  @Input()\n  name: string;\n\n  @Input()\n  type = FieldType.String;\n\n  @Input()\n  format: string;\n\n  @Input()\n  required: boolean;\n\n  @Input()\n  readOnly: boolean;\n\n  @Input()\n  title: string;\n\n  @Input()\n  description: string;\n\n  @Input()\n  placeholder: string;\n\n  @Input()\n  widget: string | object;\n\n  @Input()\n  validator: Validator;\n\n  @Input()\n  schema: any = { };\n\n  constructor(\n    private elementRef: ElementRef,\n    private templateSchemaService: TemplateSchemaService,\n    protected actionRegistry: ActionRegistry\n  ) {\n    super();\n  }\n\n  getSchema(): any {\n\n    const { properties, items, required } = this.getFieldsSchema(\n      this.childFields.filter(field => field !== this)\n    );\n\n    const oneOf = this.getOneOf();\n\n    const schema = <any>{\n      type: this.type\n    };\n\n    if (this.title !== undefined) {\n      schema.title = this.title;\n    }\n\n    if (properties !== undefined) {\n      schema.properties = properties;\n    }\n\n    if (items !== undefined) {\n      schema.items = items;\n    }\n\n    // requried child fields\n    if (required !== undefined) {\n      schema.required = required;\n    }\n\n    if (oneOf !== undefined) {\n      schema.oneOf = oneOf;\n    }\n\n    if (this.description !== undefined) {\n      schema.description = this.description;\n    }\n\n    if (this.placeholder !== undefined) {\n      schema.placeholder = this.placeholder;\n    }\n\n    if (this.format !== undefined) {\n      schema.format = this.format;\n    }\n\n    if (this.widget !== undefined) {\n      schema.widget = this.widget;\n    }\n\n    if (this.readOnly !== undefined) {\n      schema.readOnly = this.readOnly;\n    }\n\n    const buttons = this.getButtons();\n    if (buttons.length > 0) {\n      schema.buttons = buttons;\n    }\n\n    // @Input schema takes precedence\n    return Object.assign(schema, this.schema);\n\n  }\n\n  getValidators(): { path: string, validator: Validator }[] {\n\n    // registering validator here is not possible since prop full path is needed\n    const childValidators = this.getFieldsValidators(\n      this.childFields.filter(field => field !== this)\n    );\n    const validators = childValidators.map(({ path, validator }) => {\n      return {\n        path: this.path + path,\n        validator\n      };\n    });\n\n    if (!this.validator) {\n      return validators;\n    }\n\n    validators.push({ path: this.path, validator: this.validator });\n    return validators;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n\n    const keys = Object.keys(changes);\n    if (keys.length > 0) {\n      for (const key of keys) {\n        if (!changes[key].isFirstChange()) {\n          // on any input change, force schema change generation\n          this.templateSchemaService.changed();\n          break;\n        }\n      }\n    }\n\n  }\n\n\n  private getOneOf() {\n\n    if (this.childItems.length === 0) {\n      return;\n    }\n\n    const items = this.childItems.map(({ value, description }) => {\n      if (!Array.isArray(value)) {\n        return { enum: [value], description };\n      }\n\n      return { enum: value, description };\n    });\n\n    if (items.length === 0) {\n      return;\n    }\n\n    return items;\n  }\n\n\n  private setTitleFromContent() {\n    const textContent = this.getTextContent(this.elementRef);\n\n    //  title as @Input takes priority over content text\n    if (textContent && !this.title) {\n      this.title = textContent;\n    }\n  }\n\n  ngAfterContentInit() {\n\n    // cache it\n    this.setTitleFromContent();\n\n    merge(\n      this.childFields.changes,\n      this.childItems.changes,\n      this.childButtons.changes\n    )\n    .subscribe(() => this.templateSchemaService.changed());\n  }\n\n}\n","import {\n  Directive,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  HostBinding,\n  SimpleChange,\n  SimpleChanges\n} from '@angular/core';\nimport { merge } from 'rxjs';\n\nimport { FormComponent } from '../form.component';\nimport { ActionRegistry } from '../model/actionregistry';\nimport { ValidatorRegistry } from '../model/validatorregistry';\nimport { TerminatorService } from '../terminator.service';\n\nimport { TemplateSchemaService } from './template-schema.service';\nimport { FieldComponent } from './field/field.component';\nimport { FieldType, Field } from './field/field';\nimport { ButtonComponent } from './button/button.component';\nimport { FieldParent } from './field/field-parent';\n\n\n@Directive({\n  selector: 'sf-form[templateSchema]',\n  providers: [\n    TemplateSchemaService\n  ]\n})\nexport class TemplateSchemaDirective extends FieldParent implements AfterContentInit {\n\n  @ContentChildren(FieldComponent)\n  childFields: QueryList<FieldComponent>;\n\n  @ContentChildren(ButtonComponent)\n  childButtons: QueryList<ButtonComponent>;\n\n  constructor(\n    protected actionRegistry: ActionRegistry,\n    protected validatorRegistry: ValidatorRegistry,\n    private formComponent: FormComponent,\n    private terminatorService: TerminatorService,\n    private templateSchemaService: TemplateSchemaService\n  ) {\n    super();\n  }\n\n  setFormDocumentSchema(fields: FieldComponent[]) {\n      this.actionRegistry.clear();\n      this.validatorRegistry.clear();\n\n      const schema = this.getFieldsSchema(fields);\n\n      const validators = this.getFieldsValidators(fields);\n      validators.forEach(({ path, validator }) => {\n        this.validatorRegistry.register(path, validator);\n      });\n\n      const previousSchema = this.formComponent.schema;\n      this.formComponent.schema = {\n        type: FieldType.Object,\n        properties: schema.properties\n      };\n\n      if (schema.required && schema.required.length > 0) {\n        this.formComponent.schema.requred = schema.required;\n      }\n\n      const buttons = this.getButtons();\n      if (buttons.length > 0) {\n        this.formComponent.schema.buttons = buttons;\n      }\n\n      this.formComponent.ngOnChanges({\n        schema: new SimpleChange(\n          previousSchema,\n          this.formComponent.schema,\n          Boolean(previousSchema)\n        )\n      });\n\n  }\n\n\n  ngAfterContentInit() {\n\n    if (this.childFields.length > 0) {\n      this.setFormDocumentSchema(this.childFields.toArray());\n    }\n\n    merge(\n      this.childFields.changes,\n      this.templateSchemaService.changes\n    )\n   .subscribe(() => {\n      this.terminatorService.destroy();\n      this.setFormDocumentSchema(this.childFields.toArray());\n    });\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FieldComponent } from './field/field.component';\nimport { TemplateSchemaDirective } from './template-schema.directive';\nimport { ButtonComponent } from './button/button.component';\nimport { ItemComponent } from './field/item/item.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    TemplateSchemaDirective,\n    FieldComponent,\n    ButtonComponent,\n    ItemComponent\n  ],\n  exports: [\n    TemplateSchemaDirective,\n    FieldComponent,\n    ButtonComponent,\n    ItemComponent\n  ]\n})\nexport class TemplateSchemaModule { }\n"],"names":["JEXL.Jexl"],"mappings":"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"}
