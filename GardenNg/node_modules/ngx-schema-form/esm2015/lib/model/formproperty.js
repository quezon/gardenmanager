/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BehaviorSubject, combineLatest } from 'rxjs';
import { distinctUntilChanged, map } from 'rxjs/operators';
/**
 * @abstract
 */
export class FormProperty {
    /**
     * @param {?} schemaValidatorFactory
     * @param {?} validatorRegistry
     * @param {?} expressionCompilerFactory
     * @param {?} schema
     * @param {?} parent
     * @param {?} path
     */
    constructor(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path) {
        this.validatorRegistry = validatorRegistry;
        this.schema = schema;
        this._value = null;
        this._errors = null;
        this._valueChanges = new BehaviorSubject(null);
        this._errorsChanges = new BehaviorSubject(null);
        this._visible = true;
        this._visibilityChanges = new BehaviorSubject(true);
        this.schemaValidator = schemaValidatorFactory.createValidatorFn(this.schema);
        this.expressionCompilerVisibiltyIf = expressionCompilerFactory.createExpressionCompilerVisibilityIf();
        this._parent = parent;
        if (parent) {
            this._root = parent.root;
        }
        else if (this instanceof PropertyGroup) {
            this._root = (/** @type {?} */ ((/** @type {?} */ (this))));
            this._rootName = this.createRootName();
        }
        this._path = path;
    }
    /**
     * Provides the unique path of this form element.<br/>
     * E.g.:
     * <code>/garage/cars</code>,<br/>
     * <code>/shop/book/0/page/1/</code>
     * @return {?}
     */
    get _canonicalPath() { return this.__canonicalPath; }
    /**
     * @param {?} canonicalPath
     * @return {?}
     */
    set _canonicalPath(canonicalPath) {
        this.__canonicalPath = canonicalPath;
        this.__canonicalPathNotation = (this.__canonicalPath || '')
            .replace(new RegExp('^/', 'ig'), '')
            .replace(new RegExp('/$', 'ig'), '')
            .replace(new RegExp('/', 'ig'), '.');
    }
    /**
     * Uses the unique path provided by the property <code>_canonicalPath</code><br/>
     * but converts it to a HTML Element Attribute ID compliant format.<br/>
     * E.g.:
     * <code>garage.cars</code>,<br/>
     * <code>shop.book.0.page.1.</code>
     * @return {?}
     */
    get canonicalPathNotation() { return this.__canonicalPathNotation; }
    /**
     * Provides the HTML Element Attribute ID/NAME compliant representation
     * of the root element.<br/>
     * Represents the HTML FORM NAME.<br/>
     * Only the root <code>FormProperty</code> will provide a value here.
     * @return {?}
     */
    get rootName() { return this._rootName; }
    /**
     * Creates the HTML ID and NAME attribute compliant string.
     * @private
     * @return {?}
     */
    createRootName() {
        if (this.schema && this.schema['name']) {
            return this._rootName = this.schema['name'].replace(new RegExp('[\\s]+', 'ig'), '_');
        }
        return '';
    }
    /**
     * @return {?}
     */
    get valueChanges() {
        return this._valueChanges;
    }
    /**
     * @return {?}
     */
    get errorsChanges() {
        return this._errorsChanges;
    }
    /**
     * @return {?}
     */
    get type() {
        return this.schema.type;
    }
    /**
     * @return {?}
     */
    get parent() {
        return this._parent;
    }
    /**
     * @return {?}
     */
    get root() {
        return this._root || (/** @type {?} */ ((/** @type {?} */ (this))));
    }
    /**
     * @return {?}
     */
    get path() {
        return this._path;
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @return {?}
     */
    get visible() {
        return this._visible;
    }
    /**
     * @return {?}
     */
    get valid() {
        return this._errors === null;
    }
    /**
     * @param {?=} onlySelf
     * @param {?=} emitEvent
     * @return {?}
     */
    updateValueAndValidity(onlySelf = false, emitEvent = true) {
        this._updateValue();
        if (emitEvent) {
            this.valueChanges.next(this.value);
        }
        this._runValidation();
        if (this.parent && !onlySelf) {
            this.parent.updateValueAndValidity(onlySelf, emitEvent);
        }
    }
    /**
     * \@internal
     * @return {?}
     */
    _runValidation() {
        /** @type {?} */
        let errors = this.schemaValidator(this._value) || [];
        /** @type {?} */
        let customValidator = this.validatorRegistry.get(this.path);
        if (customValidator) {
            /** @type {?} */
            let customErrors = customValidator(this.value, this, this.findRoot());
            errors = this.mergeErrors(errors, customErrors);
        }
        if (errors.length === 0) {
            errors = null;
        }
        this._errors = errors;
        this.setErrors(this._errors);
    }
    /**
     * @private
     * @param {?} errors
     * @param {?} newErrors
     * @return {?}
     */
    mergeErrors(errors, newErrors) {
        if (newErrors) {
            if (Array.isArray(newErrors)) {
                errors = errors.concat(...newErrors);
            }
            else {
                errors.push(newErrors);
            }
        }
        return errors;
    }
    /**
     * @private
     * @param {?} errors
     * @return {?}
     */
    setErrors(errors) {
        this._errors = errors;
        this._errorsChanges.next(errors);
    }
    /**
     * @param {?} errors
     * @return {?}
     */
    extendErrors(errors) {
        errors = this.mergeErrors(this._errors || [], errors);
        this.setErrors(errors);
    }
    /**
     * @param {?} path
     * @return {?}
     */
    searchProperty(path) {
        /** @type {?} */
        let prop = this;
        /** @type {?} */
        let base = null;
        /** @type {?} */
        let result = null;
        if (path[0] === '/') {
            base = this.findRoot();
            result = base.getProperty(path.substr(1));
        }
        else {
            while (result === null && prop.parent !== null) {
                prop = base = prop.parent;
                result = base.getProperty(path);
            }
        }
        return result;
    }
    /**
     * @return {?}
     */
    findRoot() {
        /** @type {?} */
        let property = this;
        while (property.parent !== null) {
            property = property.parent;
        }
        return (/** @type {?} */ (property));
    }
    /**
     * @private
     * @param {?} visible
     * @return {?}
     */
    setVisible(visible) {
        this._visible = visible;
        this._visibilityChanges.next(visible);
        this.updateValueAndValidity();
        if (this.parent) {
            this.parent.updateValueAndValidity(false, true);
        }
    }
    /**
     * Making use of the expression compiler for the <code>visibleIf</code> condition
     * @private
     * @param {?} sourceProperty
     * @param {?} targetProperty
     * @param {?} dependencyPath
     * @param {?=} value
     * @param {?=} expression
     * @return {?}
     */
    __evaluateVisibilityIf(sourceProperty, targetProperty, dependencyPath, value = '', expression = '') {
        try {
            /** @type {?} */
            let valid = false;
            if (expression.indexOf('$ANY$') !== -1) {
                valid = value && value.length > 0;
            }
            else if ((expression || []).toString().indexOf('$EXP$') === 0) {
                // since visibleIf condition values are an array... we must do this
                /** @type {?} */
                const expArray = Array.isArray(expression) ? expression : (expression ? [expression] : []);
                for (const expString of expArray) {
                    /** @type {?} */
                    const _expresssion = expString.substring('$EXP$'.length);
                    valid = true === this.expressionCompilerVisibiltyIf.evaluate(_expresssion, {
                        source: sourceProperty,
                        target: targetProperty
                    });
                    if (valid) {
                        break;
                    }
                }
            }
            else {
                valid = expression.indexOf(value) !== -1;
            }
            return valid;
        }
        catch (error) {
            console.error('Error processing "VisibileIf" expression for path: ', dependencyPath, `source - ${sourceProperty._canonicalPath}: `, sourceProperty, `target - ${targetProperty._canonicalPath}: `, targetProperty, 'value:', value, 'expression: ', expression, 'error: ', error);
        }
    }
    /**
     * @private
     * @return {?}
     */
    __bindVisibility() {
        /**
         * <pre>
         *     "oneOf":[{
         *         "path":["value","value"]
         *     },{
         *         "path":["value","value"]
         *     }]
         *     </pre>
         * <pre>
         *     "allOf":[{
         *         "path":["value","value"]
         *     },{
         *         "path":["value","value"]
         *     }]
         *     </pre>
         * @type {?}
         */
        const visibleIfProperty = this.schema.visibleIf;
        /** @type {?} */
        const visibleIfOf = (visibleIfProperty || {}).oneOf || (visibleIfProperty || {}).allOf;
        if (visibleIfOf) {
            for (const visibleIf of visibleIfOf) {
                if (typeof visibleIf === 'object' && Object.keys(visibleIf).length === 0) {
                    this.setVisible(false);
                }
                else if (visibleIf !== undefined) {
                    /** @type {?} */
                    const propertiesBinding = [];
                    for (const dependencyPath in visibleIf) {
                        if (visibleIf.hasOwnProperty(dependencyPath)) {
                            /** @type {?} */
                            const properties = this.findProperties(this, dependencyPath);
                            if ((properties || []).length) {
                                for (const property of properties) {
                                    if (property) {
                                        /** @type {?} */
                                        let valueCheck;
                                        if (this.schema.visibleIf.oneOf) {
                                            valueCheck = property.valueChanges.pipe(map((/**
                                             * @param {?} value
                                             * @return {?}
                                             */
                                            value => this.__evaluateVisibilityIf(this, property, dependencyPath, value, visibleIf[dependencyPath]))));
                                        }
                                        else if (this.schema.visibleIf.allOf) {
                                            /** @type {?} */
                                            const _chk = (/**
                                             * @param {?} value
                                             * @return {?}
                                             */
                                            (value) => {
                                                for (const item of this.schema.visibleIf.allOf) {
                                                    for (const depPath of Object.keys(item)) {
                                                        /** @type {?} */
                                                        const prop = this.searchProperty(depPath);
                                                        /** @type {?} */
                                                        const propVal = prop.value;
                                                        if (!this.__evaluateVisibilityIf(this, prop, dependencyPath, propVal, item[depPath])) {
                                                            return false;
                                                        }
                                                    }
                                                }
                                                return true;
                                            });
                                            valueCheck = property.valueChanges.pipe(map(_chk));
                                        }
                                        /** @type {?} */
                                        const visibilityCheck = property._visibilityChanges;
                                        /** @type {?} */
                                        const and = combineLatest([valueCheck, visibilityCheck], (/**
                                         * @param {?} v1
                                         * @param {?} v2
                                         * @return {?}
                                         */
                                        (v1, v2) => v1 && v2));
                                        propertiesBinding.push(and);
                                    }
                                }
                            }
                            else {
                                console.warn('Can\'t find property ' + dependencyPath + ' for visibility check of ' + this.path);
                                this.registerMissingVisibilityBinding(dependencyPath, this);
                                // not visible if not existent
                                this.setVisible(false);
                            }
                        }
                    }
                    combineLatest(propertiesBinding, (/**
                     * @param {...?} values
                     * @return {?}
                     */
                    (...values) => {
                        return values.indexOf(true) !== -1;
                    })).pipe(distinctUntilChanged()).subscribe((/**
                     * @param {?} visible
                     * @return {?}
                     */
                    (visible) => {
                        this.setVisible(visible);
                    }));
                }
            }
            return true;
        }
    }
    // A field is visible if AT LEAST ONE of the properties it depends on is visible AND has a value in the list
    /**
     * @return {?}
     */
    _bindVisibility() {
        if (this.__bindVisibility())
            return;
        /** @type {?} */
        let visibleIf = this.schema.visibleIf;
        if (typeof visibleIf === 'object' && Object.keys(visibleIf).length === 0) {
            this.setVisible(false);
        }
        else if (visibleIf !== undefined) {
            /** @type {?} */
            let propertiesBinding = [];
            for (let dependencyPath in visibleIf) {
                if (visibleIf.hasOwnProperty(dependencyPath)) {
                    /** @type {?} */
                    const properties = this.findProperties(this, dependencyPath);
                    if ((properties || []).length) {
                        for (const property of properties) {
                            if (property) {
                                /** @type {?} */
                                const valueCheck = property.valueChanges.pipe(map((/**
                                 * @param {?} value
                                 * @return {?}
                                 */
                                value => this.__evaluateVisibilityIf(this, property, dependencyPath, value, visibleIf[dependencyPath]))));
                                /** @type {?} */
                                const visibilityCheck = property._visibilityChanges;
                                /** @type {?} */
                                const and = combineLatest([valueCheck, visibilityCheck], (/**
                                 * @param {?} v1
                                 * @param {?} v2
                                 * @return {?}
                                 */
                                (v1, v2) => v1 && v2));
                                propertiesBinding.push(and);
                            }
                        }
                    }
                    else {
                        console.warn('Can\'t find property ' + dependencyPath + ' for visibility check of ' + this.path);
                        this.registerMissingVisibilityBinding(dependencyPath, this);
                        // not visible if not existent
                        this.setVisible(false);
                    }
                }
            }
            combineLatest(propertiesBinding, (/**
             * @param {...?} values
             * @return {?}
             */
            (...values) => {
                return values.indexOf(true) !== -1;
            })).pipe(distinctUntilChanged()).subscribe((/**
             * @param {?} visible
             * @return {?}
             */
            (visible) => {
                this.setVisible(visible);
            }));
        }
    }
    /**
     * @private
     * @param {?} dependencyPath
     * @param {?} formProperty
     * @return {?}
     */
    registerMissingVisibilityBinding(dependencyPath, formProperty) {
        formProperty._propertyBindingRegistry.getPropertyBindingsVisibility().add(dependencyPath, formProperty.path);
    }
    /**
     * Finds all <code>formProperties</code> from a path with wildcards.<br/>
     * e.g: <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>
     * @param {?} target
     * @param {?} propertyPath
     * @return {?}
     */
    findProperties(target, propertyPath) {
        /** @type {?} */
        const props = [];
        /** @type {?} */
        const paths = this.findPropertyPaths(target, propertyPath);
        for (const path of paths) {
            /** @type {?} */
            const p = target.searchProperty(path);
            if (p) {
                props.push(p);
            }
        }
        return props;
    }
    /**
     * Creates canonical paths from a path with wildcards.
     * e.g:<br/>
     * From:<br/>
     * <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>
     * it creates:<br/>
     * <code>/garage/cars/0/tires/0/name</code><br/>
     * <code>/garage/cars/0/tires/1/name</code><br/>
     * <code>/garage/cars/0/tires/2/name</code><br/>
     * <code>/garage/cars/0/tires/3/name</code><br/>
     * <code>/garage/cars/1/tires/0/name</code><br/>
     * <code>/garage/cars/2/tires/1/name</code><br/>
     * <code>/garage/cars/3/tires/2/name</code><br/>
     * <code>/garage/cars/3/tires/3/name</code><br/>
     * <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>
     * <code>/garage/cars/&#42;/tires/2/name</code><br/>
     * <code>/garage/cars/&#42;/tires/3/name</code><br/>
     * <br/>etc...
     * @param {?} target
     * @param {?} path
     * @param {?=} parentPath
     * @return {?}
     */
    findPropertyPaths(target, path, parentPath) {
        /** @type {?} */
        const ix = path.indexOf('*');
        if (-1 !== ix) {
            /** @type {?} */
            const prePath = ix > -1 ? path.substring(0, ix - 1) : path;
            /** @type {?} */
            const subPath = ix > -1 ? path.substring(ix + 1) : path;
            /** @type {?} */
            const prop = target.searchProperty(prePath);
            /** @type {?} */
            let pathFound = [];
            if (prop instanceof PropertyGroup) {
                /** @type {?} */
                const arrProp = (/** @type {?} */ (prop.properties));
                for (let i = 0; i < arrProp.length; i++) {
                    /** @type {?} */
                    const curreItemPath = (parentPath || '') + prePath + (prePath.endsWith('/') ? '' : '/') + i + subPath;
                    /** @type {?} */
                    const curreItemPrePath = (parentPath || '') + prePath + i;
                    if (-1 === curreItemPath.indexOf('*')) {
                        pathFound.push(curreItemPath);
                    }
                    /** @type {?} */
                    const childrenPathFound = this.findPropertyPaths(arrProp[i], subPath, curreItemPrePath);
                    pathFound = pathFound.concat(childrenPathFound);
                }
            }
            return pathFound;
        }
        return [path];
    }
}
if (false) {
    /** @type {?} */
    FormProperty.prototype.schemaValidator;
    /** @type {?} */
    FormProperty.prototype.expressionCompilerVisibiltyIf;
    /** @type {?} */
    FormProperty.prototype._value;
    /** @type {?} */
    FormProperty.prototype._errors;
    /**
     * @type {?}
     * @private
     */
    FormProperty.prototype._valueChanges;
    /**
     * @type {?}
     * @private
     */
    FormProperty.prototype._errorsChanges;
    /**
     * @type {?}
     * @private
     */
    FormProperty.prototype._visible;
    /**
     * @type {?}
     * @private
     */
    FormProperty.prototype._visibilityChanges;
    /**
     * @type {?}
     * @private
     */
    FormProperty.prototype._root;
    /**
     * @type {?}
     * @private
     */
    FormProperty.prototype._parent;
    /**
     * @type {?}
     * @private
     */
    FormProperty.prototype._path;
    /** @type {?} */
    FormProperty.prototype._propertyBindingRegistry;
    /** @type {?} */
    FormProperty.prototype.__canonicalPath;
    /** @type {?} */
    FormProperty.prototype.__canonicalPathNotation;
    /**
     * @type {?}
     * @private
     */
    FormProperty.prototype._rootName;
    /**
     * @type {?}
     * @private
     */
    FormProperty.prototype.validatorRegistry;
    /** @type {?} */
    FormProperty.prototype.schema;
    /**
     * @abstract
     * @param {?} value
     * @param {?} onlySelf
     * @return {?}
     */
    FormProperty.prototype.setValue = function (value, onlySelf) { };
    /**
     * @abstract
     * @param {?} value
     * @param {?} onlySelf
     * @return {?}
     */
    FormProperty.prototype.reset = function (value, onlySelf) { };
    /**
     * \@internal
     * @abstract
     * @return {?}
     */
    FormProperty.prototype._hasValue = function () { };
    /**
     * \@internal
     * @abstract
     * @return {?}
     */
    FormProperty.prototype._updateValue = function () { };
}
/**
 * @abstract
 */
export class PropertyGroup extends FormProperty {
    constructor() {
        super(...arguments);
        this._properties = null;
        this._propertyProxyHandler = {
            /**
             * When a new item is added it will be checked for visibility updates to proceed <br/>
             * if any other field has a binding reference to it.<br/>
             * @param {?} target
             * @param {?} p
             * @param {?} value
             * @param {?} receiver
             * @return {?}
             */
            set(target, p, value, receiver) {
                /**
                 * 1) Make sure a canonical path is set
                 * @type {?}
                 */
                const assertCanonicalPath = (/**
                 * @param {?} propertyValue
                 * @return {?}
                 */
                (propertyValue) => {
                    /** @type {?} */
                    const formProperty = (/** @type {?} */ (propertyValue));
                    if (Array.isArray(target) && propertyValue instanceof FormProperty) {
                        /**
                         * Create a canonical path replacing the last '*' with the elements position in array
                         * \@param propertyPath
                         * \@param indexOfChild
                         * @type {?}
                         */
                        const getCanonicalPath = (/**
                         * @param {?} propertyPath
                         * @param {?} indexOfChild
                         * @return {?}
                         */
                        (propertyPath, indexOfChild) => {
                            /** @type {?} */
                            let pos;
                            if (propertyPath && -1 !== (pos = propertyPath.lastIndexOf('*'))) {
                                return propertyPath.substring(0, pos) + indexOfChild.toString() + propertyPath.substring(pos + 1);
                            }
                        });
                        if (formProperty) {
                            formProperty._canonicalPath = getCanonicalPath(formProperty._canonicalPath, (/** @type {?} */ (p)));
                        }
                    }
                    /** @type {?} */
                    const propertyGroup = (/** @type {?} */ (formProperty));
                    /** @type {?} */
                    const propertyGroupChildren = (/** @type {?} */ ((Array.isArray(propertyGroup.properties) ?
                        propertyGroup.properties :
                        Object.values(propertyGroup.properties || {}))));
                    if ((formProperty.path || '').endsWith('/*')) {
                        /**
                         * If it is an array, then all children canonical paths must be computed now.
                         * The children don't have the parent's path segment set yet,
                         * because they are created before the parent gets attached to its parent.
                         */
                        for (const child of propertyGroupChildren) {
                            child._canonicalPath = formProperty._canonicalPath + child._canonicalPath.substring(formProperty.path.length);
                        }
                    }
                    return { property: formProperty, children: propertyGroupChildren };
                });
                const { property, children } = assertCanonicalPath(value);
                /**
                 * 2) Add the new property before rebinding, so it can be found by <code>_bindVisibility</code>
                 * @type {?}
                 */
                const result = target[(/** @type {?} */ (p))] = value;
                /**
                 * 3) Re-bind the visibility bindings referencing to this canonical paths
                 * @type {?}
                 */
                const rebindVisibility = (/**
                 * @return {?}
                 */
                () => {
                    /** @type {?} */
                    const rebindAll = [property].concat(children);
                    /** @type {?} */
                    const findPropertiesToRebind = (/**
                     * @param {?} formProperty
                     * @return {?}
                     */
                    (formProperty) => {
                        /** @type {?} */
                        const propertyBindings = formProperty._propertyBindingRegistry.getPropertyBindingsVisibility();
                        /** @type {?} */
                        let rebind = [];
                        if (formProperty._canonicalPath) {
                            rebind = rebind.concat(rebind.concat(propertyBindings.findByDependencyPath(formProperty._canonicalPath) || []));
                            if (formProperty._canonicalPath.startsWith('/')) {
                                rebind = rebind.concat(rebind.concat(propertyBindings.findByDependencyPath(formProperty._canonicalPath.substring(1)) || []));
                            }
                        }
                        rebind = rebind.concat(propertyBindings.findByDependencyPath(formProperty.path) || []);
                        if (formProperty.path.startsWith('/')) {
                            rebind = rebind.concat(rebind.concat(propertyBindings.findByDependencyPath(formProperty.path.substring(1)) || []));
                        }
                        /** @type {?} */
                        const uniqueValues = {};
                        for (const item of rebind) {
                            uniqueValues[item] = item;
                        }
                        return Object.keys(uniqueValues);
                    });
                    for (const _property of rebindAll) {
                        if (_property instanceof FormProperty) {
                            try {
                                /** @type {?} */
                                const rebindPaths = findPropertiesToRebind(_property);
                                for (const rebindPropPath of rebindPaths) {
                                    /** @type {?} */
                                    const rebindProp = _property.searchProperty(rebindPropPath);
                                    rebindProp._bindVisibility();
                                }
                            }
                            catch (e) {
                                console.error('Rebinding visibility error at path:', _property.path, 'property:', _property, e);
                            }
                        }
                    }
                });
                rebindVisibility();
                return result;
            },
            /**
             * @param {?} target
             * @param {?} p
             * @param {?} receiver
             * @return {?}
             */
            get(target, p, receiver) {
                return target[(/** @type {?} */ (p))];
            },
            /**
             * @param {?} target
             * @param {?} p
             * @return {?}
             */
            deleteProperty(target, p) {
                return delete target[(/** @type {?} */ (p))];
            }
        };
    }
    /**
     * @return {?}
     */
    get properties() {
        return this._properties;
    }
    /**
     * @param {?} properties
     * @return {?}
     */
    set properties(properties) {
        /**
         * Override the setter to add an observer that notices when an item is added or removed.<br/>
         */
        this._properties = new Proxy(properties, this._propertyProxyHandler);
    }
    /**
     * @param {?} path
     * @return {?}
     */
    getProperty(path) {
        /** @type {?} */
        let subPathIdx = path.indexOf('/');
        /** @type {?} */
        let propertyId = subPathIdx !== -1 ? path.substr(0, subPathIdx) : path;
        /** @type {?} */
        let property = this.properties[propertyId];
        if (property !== null && subPathIdx !== -1 && property instanceof PropertyGroup) {
            /** @type {?} */
            let subPath = path.substr(subPathIdx + 1);
            property = ((/** @type {?} */ (property))).getProperty(subPath);
        }
        return property;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    forEachChild(fn) {
        for (let propertyId in this.properties) {
            if (this.properties.hasOwnProperty(propertyId)) {
                /** @type {?} */
                let property = this.properties[propertyId];
                fn(property, propertyId);
            }
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    forEachChildRecursive(fn) {
        this.forEachChild((/**
         * @param {?} child
         * @return {?}
         */
        (child) => {
            fn(child);
            if (child instanceof PropertyGroup) {
                ((/** @type {?} */ (child))).forEachChildRecursive(fn);
            }
        }));
    }
    /**
     * @return {?}
     */
    _bindVisibility() {
        super._bindVisibility();
        this._bindVisibilityRecursive();
    }
    /**
     * @private
     * @return {?}
     */
    _bindVisibilityRecursive() {
        this.forEachChildRecursive((/**
         * @param {?} property
         * @return {?}
         */
        (property) => {
            property._bindVisibility();
        }));
    }
    /**
     * @return {?}
     */
    isRoot() {
        return this === this.root;
    }
}
if (false) {
    /** @type {?} */
    PropertyGroup.prototype._properties;
    /**
     * @type {?}
     * @private
     */
    PropertyGroup.prototype._propertyProxyHandler;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybXByb3BlcnR5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXNjaGVtYS1mb3JtLyIsInNvdXJjZXMiOlsibGliL21vZGVsL2Zvcm1wcm9wZXJ0eS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLGVBQWUsRUFBRSxhQUFhLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDcEQsT0FBTyxFQUFDLG9CQUFvQixFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7O0FBT3pELE1BQU0sT0FBZ0IsWUFBWTs7Ozs7Ozs7O0lBaURoQyxZQUFZLHNCQUE4QyxFQUN0QyxpQkFBb0MsRUFDNUMseUJBQW9ELEVBQzdDLE1BQVcsRUFDbEIsTUFBcUIsRUFDckIsSUFBWTtRQUpKLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBbUI7UUFFckMsV0FBTSxHQUFOLE1BQU0sQ0FBSztRQWhEOUIsV0FBTSxHQUFRLElBQUksQ0FBQztRQUNuQixZQUFPLEdBQVEsSUFBSSxDQUFDO1FBQ1osa0JBQWEsR0FBRyxJQUFJLGVBQWUsQ0FBTSxJQUFJLENBQUMsQ0FBQztRQUMvQyxtQkFBYyxHQUFHLElBQUksZUFBZSxDQUFNLElBQUksQ0FBQyxDQUFDO1FBQ2hELGFBQVEsR0FBRyxJQUFJLENBQUM7UUFDaEIsdUJBQWtCLEdBQUcsSUFBSSxlQUFlLENBQVUsSUFBSSxDQUFDLENBQUM7UUE4QzlELElBQUksQ0FBQyxlQUFlLEdBQUcsc0JBQXNCLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzdFLElBQUksQ0FBQyw2QkFBNkIsR0FBRyx5QkFBeUIsQ0FBQyxvQ0FBb0MsRUFBRSxDQUFDO1FBRXRHLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1NBQzFCO2FBQU0sSUFBSSxJQUFJLFlBQVksYUFB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LEtBQUssSUFBSSxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUN0QyxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUFFOztvQkFDMUMsUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDO2dCQUMxQyxFQUFFLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDO2FBQzFCO1NBQ0Y7SUFDSCxDQUFDOzs7OztJQUVNLHFCQUFxQixDQUFDLEVBQXdDO1FBQ25FLElBQUksQ0FBQyxZQUFZOzs7O1FBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUMxQixFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDVixJQUFJLEtBQUssWUFBWSxhQUFhLEVBQUU7Z0JBQ2xDLENBQUMsbUJBQWUsS0FBSyxFQUFBLENBQUMsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLENBQUMsQ0FBQzthQUNsRDtRQUNILENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVNLGVBQWU7UUFDcEIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0lBQ2xDLENBQUM7Ozs7O0lBRU8sd0JBQXdCO1FBQzlCLElBQUksQ0FBQyxxQkFBcUI7Ozs7UUFBQyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3RDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUM3QixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFTSxNQUFNO1FBQ1gsT0FBTyxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQztJQUM1QixDQUFDO0NBQ0Y7OztJQS9KQyxvQ0FBcUU7Ozs7O0lBYXJFLDhDQW9HRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QmVoYXZpb3JTdWJqZWN0LCBjb21iaW5lTGF0ZXN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1NjaGVtYVZhbGlkYXRvckZhY3Rvcnl9IGZyb20gJy4uL3NjaGVtYXZhbGlkYXRvcmZhY3RvcnknO1xuaW1wb3J0IHtWYWxpZGF0b3JSZWdpc3RyeX0gZnJvbSAnLi92YWxpZGF0b3JyZWdpc3RyeSc7XG5pbXBvcnQge1Byb3BlcnR5QmluZGluZ1JlZ2lzdHJ5fSBmcm9tICcuLi9wcm9wZXJ0eS1iaW5kaW5nLXJlZ2lzdHJ5JztcbmltcG9ydCB7IEV4cHJlc3Npb25Db21waWxlckZhY3RvcnksIEV4cHJlc3Npb25Db21waWxlclZpc2liaWxpdHlJZiB9IGZyb20gJy4uL2V4cHJlc3Npb24tY29tcGlsZXItZmFjdG9yeSc7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBGb3JtUHJvcGVydHkge1xuICBwdWJsaWMgc2NoZW1hVmFsaWRhdG9yOiBGdW5jdGlvbjtcbiAgcHVibGljIGV4cHJlc3Npb25Db21waWxlclZpc2liaWx0eUlmOiBFeHByZXNzaW9uQ29tcGlsZXJWaXNpYmlsaXR5SWY7XG5cbiAgX3ZhbHVlOiBhbnkgPSBudWxsO1xuICBfZXJyb3JzOiBhbnkgPSBudWxsO1xuICBwcml2YXRlIF92YWx1ZUNoYW5nZXMgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGFueT4obnVsbCk7XG4gIHByaXZhdGUgX2Vycm9yc0NoYW5nZXMgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PGFueT4obnVsbCk7XG4gIHByaXZhdGUgX3Zpc2libGUgPSB0cnVlO1xuICBwcml2YXRlIF92aXNpYmlsaXR5Q2hhbmdlcyA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4odHJ1ZSk7XG4gIHByaXZhdGUgX3Jvb3Q6IFByb3BlcnR5R3JvdXA7XG4gIHByaXZhdGUgX3BhcmVudDogUHJvcGVydHlHcm91cDtcbiAgcHJpdmF0ZSBfcGF0aDogc3RyaW5nO1xuICBfcHJvcGVydHlCaW5kaW5nUmVnaXN0cnk6IFByb3BlcnR5QmluZGluZ1JlZ2lzdHJ5O1xuICBfX2Nhbm9uaWNhbFBhdGg6IHN0cmluZztcbiAgX19jYW5vbmljYWxQYXRoTm90YXRpb246IHN0cmluZztcbiAgXG4gIC8qKlxuICAgKiBQcm92aWRlcyB0aGUgdW5pcXVlIHBhdGggb2YgdGhpcyBmb3JtIGVsZW1lbnQuPGJyLz5cbiAgICogRS5nLjogXG4gICAqIDxjb2RlPi9nYXJhZ2UvY2FyczwvY29kZT4sPGJyLz5cbiAgICogPGNvZGU+L3Nob3AvYm9vay8wL3BhZ2UvMS88L2NvZGU+XG4gICAqL1xuICBnZXQgX2Nhbm9uaWNhbFBhdGgoKSB7IHJldHVybiB0aGlzLl9fY2Fub25pY2FsUGF0aDsgfVxuICBzZXQgX2Nhbm9uaWNhbFBhdGgoY2Fub25pY2FsUGF0aDogc3RyaW5nKSB7IFxuICAgIHRoaXMuX19jYW5vbmljYWxQYXRoID0gY2Fub25pY2FsUGF0aDsgXG4gICAgdGhpcy5fX2Nhbm9uaWNhbFBhdGhOb3RhdGlvbiA9ICh0aGlzLl9fY2Fub25pY2FsUGF0aHx8JycpXG4gICAgICAucmVwbGFjZShuZXcgUmVnRXhwKCdeLycsICdpZycpLCAnJylcbiAgICAgIC5yZXBsYWNlKG5ldyBSZWdFeHAoJy8kJywgJ2lnJyksICcnKVxuICAgICAgLnJlcGxhY2UobmV3IFJlZ0V4cCgnLycsICdpZycpLCAnLicpO1xuICB9XG4gIC8qKlxuICAgKiBVc2VzIHRoZSB1bmlxdWUgcGF0aCBwcm92aWRlZCBieSB0aGUgcHJvcGVydHkgPGNvZGU+X2Nhbm9uaWNhbFBhdGg8L2NvZGU+PGJyLz5cbiAgICogYnV0IGNvbnZlcnRzIGl0IHRvIGEgSFRNTCBFbGVtZW50IEF0dHJpYnV0ZSBJRCBjb21wbGlhbnQgZm9ybWF0Ljxici8+XG4gICAqIEUuZy46IFxuICAgKiA8Y29kZT5nYXJhZ2UuY2FyczwvY29kZT4sPGJyLz5cbiAgICogPGNvZGU+c2hvcC5ib29rLjAucGFnZS4xLjwvY29kZT5cbiAgICovXG4gIGdldCBjYW5vbmljYWxQYXRoTm90YXRpb24oKSB7IHJldHVybiB0aGlzLl9fY2Fub25pY2FsUGF0aE5vdGF0aW9uOyB9XG5cbiAgcHJpdmF0ZSBfcm9vdE5hbWU7XG4gIC8qKlxuICAgKiBQcm92aWRlcyB0aGUgSFRNTCBFbGVtZW50IEF0dHJpYnV0ZSBJRC9OQU1FIGNvbXBsaWFudCByZXByZXNlbnRhdGlvbiBcbiAgICogb2YgdGhlIHJvb3QgZWxlbWVudC48YnIvPlxuICAgKiBSZXByZXNlbnRzIHRoZSBIVE1MIEZPUk0gTkFNRS48YnIvPlxuICAgKiBPbmx5IHRoZSByb290IDxjb2RlPkZvcm1Qcm9wZXJ0eTwvY29kZT4gd2lsbCBwcm92aWRlIGEgdmFsdWUgaGVyZS5cbiAgICovXG4gIGdldCByb290TmFtZSgpIHsgcmV0dXJuIHRoaXMuX3Jvb3ROYW1lOyB9XG5cbiAgY29uc3RydWN0b3Ioc2NoZW1hVmFsaWRhdG9yRmFjdG9yeTogU2NoZW1hVmFsaWRhdG9yRmFjdG9yeSxcbiAgICAgICAgICAgICAgcHJpdmF0ZSB2YWxpZGF0b3JSZWdpc3RyeTogVmFsaWRhdG9yUmVnaXN0cnksXG4gICAgICAgICAgICAgIGV4cHJlc3Npb25Db21waWxlckZhY3Rvcnk6IEV4cHJlc3Npb25Db21waWxlckZhY3RvcnksXG4gICAgICAgICAgICAgIHB1YmxpYyBzY2hlbWE6IGFueSxcbiAgICAgICAgICAgICAgcGFyZW50OiBQcm9wZXJ0eUdyb3VwLFxuICAgICAgICAgICAgICBwYXRoOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNjaGVtYVZhbGlkYXRvciA9IHNjaGVtYVZhbGlkYXRvckZhY3RvcnkuY3JlYXRlVmFsaWRhdG9yRm4odGhpcy5zY2hlbWEpO1xuICAgIHRoaXMuZXhwcmVzc2lvbkNvbXBpbGVyVmlzaWJpbHR5SWYgPSBleHByZXNzaW9uQ29tcGlsZXJGYWN0b3J5LmNyZWF0ZUV4cHJlc3Npb25Db21waWxlclZpc2liaWxpdHlJZigpO1xuXG4gICAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICAgIGlmIChwYXJlbnQpIHtcbiAgICAgIHRoaXMuX3Jvb3QgPSBwYXJlbnQucm9vdDtcbiAgICB9IGVsc2UgaWYgKHRoaXMgaW5zdGFuY2VvZiBQcm9wZXJ0eUdyb3VwKSB7XG4gICAgICB0aGlzLl9yb290ID0gPFByb3BlcnR5R3JvdXA+PGFueT50aGlzO1xuICAgICAgdGhpcy5fcm9vdE5hbWUgPSB0aGlzLmNyZWF0ZVJvb3ROYW1lKCk7XG4gICAgfVxuICAgIHRoaXMuX3BhdGggPSBwYXRoO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgdGhlIEhUTUwgSUQgYW5kIE5BTUUgYXR0cmlidXRlIGNvbXBsaWFudCBzdHJpbmcuXG4gICAqL1xuICBwcml2YXRlIGNyZWF0ZVJvb3ROYW1lKCk6IHN0cmluZyB7XG4gICAgaWYgKHRoaXMuc2NoZW1hICYmIHRoaXMuc2NoZW1hWyduYW1lJ10pIHtcbiAgICAgIHJldHVybiB0aGlzLl9yb290TmFtZSA9IHRoaXMuc2NoZW1hWyduYW1lJ10ucmVwbGFjZShuZXcgUmVnRXhwKCdbXFxcXHNdKycsICdpZycpLCAnXycpXG4gICAgfVxuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgcHVibGljIGdldCB2YWx1ZUNoYW5nZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlQ2hhbmdlcztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZXJyb3JzQ2hhbmdlcygpIHtcbiAgICByZXR1cm4gdGhpcy5fZXJyb3JzQ2hhbmdlcztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgdHlwZSgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLnNjaGVtYS50eXBlO1xuICB9XG5cbiAgcHVibGljIGdldCBwYXJlbnQoKTogUHJvcGVydHlHcm91cCB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcmVudDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgcm9vdCgpOiBQcm9wZXJ0eUdyb3VwIHtcbiAgICByZXR1cm4gdGhpcy5fcm9vdCB8fCA8UHJvcGVydHlHcm91cD48YW55PnRoaXM7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHBhdGgoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5fcGF0aDtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgdmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgcHVibGljIGdldCB2aXNpYmxlKCkge1xuICAgIHJldHVybiB0aGlzLl92aXNpYmxlO1xuICB9XG5cbiAgcHVibGljIGdldCB2YWxpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fZXJyb3JzID09PSBudWxsO1xuICB9XG5cbiAgcHVibGljIGFic3RyYWN0IHNldFZhbHVlKHZhbHVlOiBhbnksIG9ubHlTZWxmOiBib29sZWFuKTtcblxuICBwdWJsaWMgYWJzdHJhY3QgcmVzZXQodmFsdWU6IGFueSwgb25seVNlbGY6IGJvb2xlYW4pO1xuXG4gIHB1YmxpYyB1cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KG9ubHlTZWxmID0gZmFsc2UsIGVtaXRFdmVudCA9IHRydWUpIHtcbiAgICB0aGlzLl91cGRhdGVWYWx1ZSgpO1xuXG4gICAgaWYgKGVtaXRFdmVudCkge1xuICAgICAgdGhpcy52YWx1ZUNoYW5nZXMubmV4dCh0aGlzLnZhbHVlKTtcbiAgICB9XG5cbiAgICB0aGlzLl9ydW5WYWxpZGF0aW9uKCk7XG5cbiAgICBpZiAodGhpcy5wYXJlbnQgJiYgIW9ubHlTZWxmKSB7XG4gICAgICB0aGlzLnBhcmVudC51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KG9ubHlTZWxmLCBlbWl0RXZlbnQpO1xuICAgIH1cblxuICB9XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHVibGljIGFic3RyYWN0IF9oYXNWYWx1ZSgpOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiAgQGludGVybmFsXG4gICAqL1xuICBwdWJsaWMgYWJzdHJhY3QgX3VwZGF0ZVZhbHVlKCk7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKi9cbiAgcHVibGljIF9ydW5WYWxpZGF0aW9uKCk6IGFueSB7XG4gICAgbGV0IGVycm9ycyA9IHRoaXMuc2NoZW1hVmFsaWRhdG9yKHRoaXMuX3ZhbHVlKSB8fCBbXTtcbiAgICBsZXQgY3VzdG9tVmFsaWRhdG9yID0gdGhpcy52YWxpZGF0b3JSZWdpc3RyeS5nZXQodGhpcy5wYXRoKTtcbiAgICBpZiAoY3VzdG9tVmFsaWRhdG9yKSB7XG4gICAgICBsZXQgY3VzdG9tRXJyb3JzID0gY3VzdG9tVmFsaWRhdG9yKHRoaXMudmFsdWUsIHRoaXMsIHRoaXMuZmluZFJvb3QoKSk7XG4gICAgICBlcnJvcnMgPSB0aGlzLm1lcmdlRXJyb3JzKGVycm9ycywgY3VzdG9tRXJyb3JzKTtcbiAgICB9XG4gICAgaWYgKGVycm9ycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGVycm9ycyA9IG51bGw7XG4gICAgfVxuXG4gICAgdGhpcy5fZXJyb3JzID0gZXJyb3JzO1xuICAgIHRoaXMuc2V0RXJyb3JzKHRoaXMuX2Vycm9ycyk7XG4gIH1cblxuICBwcml2YXRlIG1lcmdlRXJyb3JzKGVycm9ycywgbmV3RXJyb3JzKSB7XG4gICAgaWYgKG5ld0Vycm9ycykge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkobmV3RXJyb3JzKSkge1xuICAgICAgICBlcnJvcnMgPSBlcnJvcnMuY29uY2F0KC4uLm5ld0Vycm9ycyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlcnJvcnMucHVzaChuZXdFcnJvcnMpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXJyb3JzO1xuICB9XG5cbiAgcHJpdmF0ZSBzZXRFcnJvcnMoZXJyb3JzKSB7XG4gICAgdGhpcy5fZXJyb3JzID0gZXJyb3JzO1xuICAgIHRoaXMuX2Vycm9yc0NoYW5nZXMubmV4dChlcnJvcnMpO1xuICB9XG5cbiAgcHVibGljIGV4dGVuZEVycm9ycyhlcnJvcnMpIHtcbiAgICBlcnJvcnMgPSB0aGlzLm1lcmdlRXJyb3JzKHRoaXMuX2Vycm9ycyB8fCBbXSwgZXJyb3JzKTtcbiAgICB0aGlzLnNldEVycm9ycyhlcnJvcnMpO1xuICB9XG5cbiAgc2VhcmNoUHJvcGVydHkocGF0aDogc3RyaW5nKTogRm9ybVByb3BlcnR5IHtcbiAgICBsZXQgcHJvcDogRm9ybVByb3BlcnR5ID0gdGhpcztcbiAgICBsZXQgYmFzZTogUHJvcGVydHlHcm91cCA9IG51bGw7XG5cbiAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICBpZiAocGF0aFswXSA9PT0gJy8nKSB7XG4gICAgICBiYXNlID0gdGhpcy5maW5kUm9vdCgpO1xuICAgICAgcmVzdWx0ID0gYmFzZS5nZXRQcm9wZXJ0eShwYXRoLnN1YnN0cigxKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdoaWxlIChyZXN1bHQgPT09IG51bGwgJiYgcHJvcC5wYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgcHJvcCA9IGJhc2UgPSBwcm9wLnBhcmVudDtcbiAgICAgICAgcmVzdWx0ID0gYmFzZS5nZXRQcm9wZXJ0eShwYXRoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHB1YmxpYyBmaW5kUm9vdCgpOiBQcm9wZXJ0eUdyb3VwIHtcbiAgICBsZXQgcHJvcGVydHk6IEZvcm1Qcm9wZXJ0eSA9IHRoaXM7XG4gICAgd2hpbGUgKHByb3BlcnR5LnBhcmVudCAhPT0gbnVsbCkge1xuICAgICAgcHJvcGVydHkgPSBwcm9wZXJ0eS5wYXJlbnQ7XG4gICAgfVxuICAgIHJldHVybiA8UHJvcGVydHlHcm91cD5wcm9wZXJ0eTtcbiAgfVxuXG4gIHByaXZhdGUgc2V0VmlzaWJsZSh2aXNpYmxlOiBib29sZWFuKSB7XG4gICAgdGhpcy5fdmlzaWJsZSA9IHZpc2libGU7XG4gICAgdGhpcy5fdmlzaWJpbGl0eUNoYW5nZXMubmV4dCh2aXNpYmxlKTtcbiAgICB0aGlzLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcbiAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgIHRoaXMucGFyZW50LnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoZmFsc2UsIHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNYWtpbmcgdXNlIG9mIHRoZSBleHByZXNzaW9uIGNvbXBpbGVyIGZvciB0aGUgPGNvZGU+dmlzaWJsZUlmPC9jb2RlPiBjb25kaXRpb25cbiAgICovXG4gIHByaXZhdGUgX19ldmFsdWF0ZVZpc2liaWxpdHlJZihcbiAgICBzb3VyY2VQcm9wZXJ0eTogRm9ybVByb3BlcnR5LFxuICAgIHRhcmdldFByb3BlcnR5OiBGb3JtUHJvcGVydHksXG4gICAgZGVwZW5kZW5jeVBhdGg6IHN0cmluZyxcbiAgICB2YWx1ZTogYW55ID0gJycsXG4gICAgZXhwcmVzc2lvbjogc3RyaW5nfHN0cmluZ1tdID0gJycpOiBib29sZWFuIHtcbiAgICB0cnkge1xuICAgICAgbGV0IHZhbGlkID0gZmFsc2VcbiAgICAgIGlmIChleHByZXNzaW9uLmluZGV4T2YoJyRBTlkkJykgIT09IC0xKSB7XG4gICAgICAgIHZhbGlkID0gdmFsdWUgJiYgdmFsdWUubGVuZ3RoID4gMDtcbiAgICAgIH0gZWxzZSBpZiAoKGV4cHJlc3Npb258fFtdKS50b1N0cmluZygpLmluZGV4T2YoJyRFWFAkJykgPT09IDApIHtcbiAgICAgICAgLy8gc2luY2UgdmlzaWJsZUlmIGNvbmRpdGlvbiB2YWx1ZXMgYXJlIGFuIGFycmF5Li4uIHdlIG11c3QgZG8gdGhpc1xuICAgICAgICBjb25zdCBleHBBcnJheSA9IEFycmF5LmlzQXJyYXkoZXhwcmVzc2lvbikgPyBleHByZXNzaW9uIDogKGV4cHJlc3Npb24gPyBbZXhwcmVzc2lvbl0gOiBbXSlcbiAgICAgICAgZm9yIChjb25zdCBleHBTdHJpbmcgb2YgZXhwQXJyYXkpIHtcbiAgICAgICAgICBjb25zdCBfZXhwcmVzc3Npb24gPSBleHBTdHJpbmcuc3Vic3RyaW5nKCckRVhQJCcubGVuZ3RoKTtcbiAgICAgICAgICB2YWxpZCA9IHRydWUgPT09IHRoaXMuZXhwcmVzc2lvbkNvbXBpbGVyVmlzaWJpbHR5SWYuZXZhbHVhdGUoX2V4cHJlc3NzaW9uLCB7XG4gICAgICAgICAgICBzb3VyY2U6IHNvdXJjZVByb3BlcnR5LFxuICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXRQcm9wZXJ0eVxuICAgICAgICAgIH0pXG4gICAgICAgICAgaWYgKHZhbGlkKSB7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsaWQgPSBleHByZXNzaW9uLmluZGV4T2YodmFsdWUpICE9PSAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWxpZFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwcm9jZXNzaW5nIFwiVmlzaWJpbGVJZlwiIGV4cHJlc3Npb24gZm9yIHBhdGg6ICcsIGRlcGVuZGVuY3lQYXRoLFxuICAgICAgICBgc291cmNlIC0gJHtzb3VyY2VQcm9wZXJ0eS5fY2Fub25pY2FsUGF0aH06IGAsIHNvdXJjZVByb3BlcnR5LFxuICAgICAgICBgdGFyZ2V0IC0gJHt0YXJnZXRQcm9wZXJ0eS5fY2Fub25pY2FsUGF0aH06IGAsIHRhcmdldFByb3BlcnR5LFxuICAgICAgICAndmFsdWU6JywgdmFsdWUsXG4gICAgICAgICdleHByZXNzaW9uOiAnLCBleHByZXNzaW9uLFxuICAgICAgICAnZXJyb3I6ICcsIGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX19iaW5kVmlzaWJpbGl0eSgpOiBib29sZWFuIHtcbiAgICAvKipcbiAgICAgKiA8cHJlPlxuICAgICAqICAgICBcIm9uZU9mXCI6W3tcbiAgICAgKiAgICAgICAgIFwicGF0aFwiOltcInZhbHVlXCIsXCJ2YWx1ZVwiXVxuICAgICAqICAgICB9LHtcbiAgICAgKiAgICAgICAgIFwicGF0aFwiOltcInZhbHVlXCIsXCJ2YWx1ZVwiXVxuICAgICAqICAgICB9XVxuICAgICAqICAgICA8L3ByZT5cbiAgICAgKiA8cHJlPlxuICAgICAqICAgICBcImFsbE9mXCI6W3tcbiAgICAgKiAgICAgICAgIFwicGF0aFwiOltcInZhbHVlXCIsXCJ2YWx1ZVwiXVxuICAgICAqICAgICB9LHtcbiAgICAgKiAgICAgICAgIFwicGF0aFwiOltcInZhbHVlXCIsXCJ2YWx1ZVwiXVxuICAgICAqICAgICB9XVxuICAgICAqICAgICA8L3ByZT5cbiAgICAgKi9cbiAgICBjb25zdCB2aXNpYmxlSWZQcm9wZXJ0eSA9IHRoaXMuc2NoZW1hLnZpc2libGVJZjtcbiAgICBjb25zdCB2aXNpYmxlSWZPZiA9ICh2aXNpYmxlSWZQcm9wZXJ0eSB8fCB7fSkub25lT2YgfHwgKHZpc2libGVJZlByb3BlcnR5IHx8IHt9KS5hbGxPZjtcbiAgICBpZiAodmlzaWJsZUlmT2YpIHtcbiAgICAgIGZvciAoY29uc3QgdmlzaWJsZUlmIG9mIHZpc2libGVJZk9mKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdmlzaWJsZUlmID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyh2aXNpYmxlSWYpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIHRoaXMuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodmlzaWJsZUlmICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzQmluZGluZyA9IFtdO1xuICAgICAgICAgIGZvciAoY29uc3QgZGVwZW5kZW5jeVBhdGggaW4gdmlzaWJsZUlmKSB7XG4gICAgICAgICAgICBpZiAodmlzaWJsZUlmLmhhc093blByb3BlcnR5KGRlcGVuZGVuY3lQYXRoKSkge1xuICAgICAgICAgICAgICBjb25zdCBwcm9wZXJ0aWVzID0gdGhpcy5maW5kUHJvcGVydGllcyh0aGlzLCBkZXBlbmRlbmN5UGF0aCk7XG4gICAgICAgICAgICAgIGlmICgocHJvcGVydGllcyB8fCBbXSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBvZiBwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgICBpZiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHZhbHVlQ2hlY2s7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjaGVtYS52aXNpYmxlSWYub25lT2YpIHtcbiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZUNoZWNrID0gcHJvcGVydHkudmFsdWVDaGFuZ2VzLnBpcGUobWFwKFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPT4gdGhpcy5fX2V2YWx1YXRlVmlzaWJpbGl0eUlmKHRoaXMsIHByb3BlcnR5LCBkZXBlbmRlbmN5UGF0aCwgdmFsdWUsIHZpc2libGVJZltkZXBlbmRlbmN5UGF0aF0pXG4gICAgICAgICAgICAgICAgICAgICAgKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5zY2hlbWEudmlzaWJsZUlmLmFsbE9mKSB7XG4gICAgICAgICAgICAgICAgICAgICAgY29uc3QgX2NoayA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHRoaXMuc2NoZW1hLnZpc2libGVJZi5hbGxPZikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGRlcFBhdGggb2YgT2JqZWN0LmtleXMoaXRlbSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9wID0gdGhpcy5zZWFyY2hQcm9wZXJ0eShkZXBQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9wVmFsID0gcHJvcC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX19ldmFsdWF0ZVZpc2liaWxpdHlJZih0aGlzLCBwcm9wLCBkZXBlbmRlbmN5UGF0aCwgcHJvcFZhbCwgaXRlbVtkZXBQYXRoXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWVDaGVjayA9IHByb3BlcnR5LnZhbHVlQ2hhbmdlcy5waXBlKG1hcChfY2hrKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmlzaWJpbGl0eUNoZWNrID0gcHJvcGVydHkuX3Zpc2liaWxpdHlDaGFuZ2VzO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhbmQgPSBjb21iaW5lTGF0ZXN0KFt2YWx1ZUNoZWNrLCB2aXNpYmlsaXR5Q2hlY2tdLCAodjEsIHYyKSA9PiB2MSAmJiB2Mik7XG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXNCaW5kaW5nLnB1c2goYW5kKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdDYW5cXCd0IGZpbmQgcHJvcGVydHkgJyArIGRlcGVuZGVuY3lQYXRoICsgJyBmb3IgdmlzaWJpbGl0eSBjaGVjayBvZiAnICsgdGhpcy5wYXRoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlZ2lzdGVyTWlzc2luZ1Zpc2liaWxpdHlCaW5kaW5nKGRlcGVuZGVuY3lQYXRoLCB0aGlzKTtcbiAgICAgICAgICAgICAgICAvLyBub3QgdmlzaWJsZSBpZiBub3QgZXhpc3RlbnRcbiAgICAgICAgICAgICAgICB0aGlzLnNldFZpc2libGUoZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29tYmluZUxhdGVzdChwcm9wZXJ0aWVzQmluZGluZywgKC4uLnZhbHVlczogYm9vbGVhbltdKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzLmluZGV4T2YodHJ1ZSkgIT09IC0xO1xuICAgICAgICAgIH0pLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSkuc3Vic2NyaWJlKCh2aXNpYmxlKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldFZpc2libGUodmlzaWJsZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8vIEEgZmllbGQgaXMgdmlzaWJsZSBpZiBBVCBMRUFTVCBPTkUgb2YgdGhlIHByb3BlcnRpZXMgaXQgZGVwZW5kcyBvbiBpcyB2aXNpYmxlIEFORCBoYXMgYSB2YWx1ZSBpbiB0aGUgbGlzdFxuICBwdWJsaWMgX2JpbmRWaXNpYmlsaXR5KCkge1xuICAgIGlmICh0aGlzLl9fYmluZFZpc2liaWxpdHkoKSlcbiAgICAgIHJldHVybjtcbiAgICBsZXQgdmlzaWJsZUlmID0gdGhpcy5zY2hlbWEudmlzaWJsZUlmO1xuICAgIGlmICh0eXBlb2YgdmlzaWJsZUlmID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyh2aXNpYmxlSWYpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhpcy5zZXRWaXNpYmxlKGZhbHNlKTtcbiAgICB9IGVsc2UgaWYgKHZpc2libGVJZiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZXQgcHJvcGVydGllc0JpbmRpbmcgPSBbXTtcbiAgICAgIGZvciAobGV0IGRlcGVuZGVuY3lQYXRoIGluIHZpc2libGVJZikge1xuICAgICAgICBpZiAodmlzaWJsZUlmLmhhc093blByb3BlcnR5KGRlcGVuZGVuY3lQYXRoKSkge1xuICAgICAgICAgIGNvbnN0IHByb3BlcnRpZXMgPSB0aGlzLmZpbmRQcm9wZXJ0aWVzKHRoaXMsIGRlcGVuZGVuY3lQYXRoKTtcbiAgICAgICAgICBpZiAoKHByb3BlcnRpZXMgfHwgW10pLmxlbmd0aCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBvZiBwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgIGlmIChwcm9wZXJ0eSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlQ2hlY2sgPSBwcm9wZXJ0eS52YWx1ZUNoYW5nZXMucGlwZShtYXAoXG4gICAgICAgICAgICAgICAgICB2YWx1ZSA9PiB0aGlzLl9fZXZhbHVhdGVWaXNpYmlsaXR5SWYodGhpcywgcHJvcGVydHksIGRlcGVuZGVuY3lQYXRoLCB2YWx1ZSwgdmlzaWJsZUlmW2RlcGVuZGVuY3lQYXRoXSlcbiAgICAgICAgICAgICAgICApKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2aXNpYmlsaXR5Q2hlY2sgPSBwcm9wZXJ0eS5fdmlzaWJpbGl0eUNoYW5nZXM7XG4gICAgICAgICAgICAgICAgY29uc3QgYW5kID0gY29tYmluZUxhdGVzdChbdmFsdWVDaGVjaywgdmlzaWJpbGl0eUNoZWNrXSwgKHYxLCB2MikgPT4gdjEgJiYgdjIpO1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXNCaW5kaW5nLnB1c2goYW5kKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0NhblxcJ3QgZmluZCBwcm9wZXJ0eSAnICsgZGVwZW5kZW5jeVBhdGggKyAnIGZvciB2aXNpYmlsaXR5IGNoZWNrIG9mICcgKyB0aGlzLnBhdGgpO1xuICAgICAgICAgICAgdGhpcy5yZWdpc3Rlck1pc3NpbmdWaXNpYmlsaXR5QmluZGluZyhkZXBlbmRlbmN5UGF0aCwgdGhpcyk7XG4gICAgICAgICAgICAvLyBub3QgdmlzaWJsZSBpZiBub3QgZXhpc3RlbnRcbiAgICAgICAgICAgIHRoaXMuc2V0VmlzaWJsZShmYWxzZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbWJpbmVMYXRlc3QocHJvcGVydGllc0JpbmRpbmcsICguLi52YWx1ZXM6IGJvb2xlYW5bXSkgPT4ge1xuICAgICAgICByZXR1cm4gdmFsdWVzLmluZGV4T2YodHJ1ZSkgIT09IC0xO1xuICAgICAgfSkucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpKS5zdWJzY3JpYmUoKHZpc2libGUpID0+IHtcbiAgICAgICAgdGhpcy5zZXRWaXNpYmxlKHZpc2libGUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSByZWdpc3Rlck1pc3NpbmdWaXNpYmlsaXR5QmluZGluZyhkZXBlbmRlbmN5UGF0aDogc3RyaW5nLCBmb3JtUHJvcGVydHk6IEZvcm1Qcm9wZXJ0eSkge1xuICAgIGZvcm1Qcm9wZXJ0eS5fcHJvcGVydHlCaW5kaW5nUmVnaXN0cnkuZ2V0UHJvcGVydHlCaW5kaW5nc1Zpc2liaWxpdHkoKS5hZGQoZGVwZW5kZW5jeVBhdGgsIGZvcm1Qcm9wZXJ0eS5wYXRoKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEZpbmRzIGFsbCA8Y29kZT5mb3JtUHJvcGVydGllczwvY29kZT4gZnJvbSBhIHBhdGggd2l0aCB3aWxkY2FyZHMuPGJyLz5cbiAgICogZS5nOiA8Y29kZT4vZ2FyYWdlL2NhcnMvJiM0MjsvdGlyZXMvJiM0MjsvbmFtZTwvY29kZT48YnIvPlxuICAgKiBAcGFyYW0gdGFyZ2V0XG4gICAqIEBwYXJhbSBwcm9wZXJ0eVBhdGhcbiAgICovXG4gIGZpbmRQcm9wZXJ0aWVzKHRhcmdldDogRm9ybVByb3BlcnR5LCBwcm9wZXJ0eVBhdGg6IHN0cmluZyk6IEZvcm1Qcm9wZXJ0eVtdIHtcbiAgICBjb25zdCBwcm9wczogRm9ybVByb3BlcnR5W10gPSBbXTtcbiAgICBjb25zdCBwYXRocyA9IHRoaXMuZmluZFByb3BlcnR5UGF0aHModGFyZ2V0LCBwcm9wZXJ0eVBhdGgpO1xuICAgIGZvciAoY29uc3QgcGF0aCBvZiBwYXRocykge1xuICAgICAgY29uc3QgcDogRm9ybVByb3BlcnR5ID0gdGFyZ2V0LnNlYXJjaFByb3BlcnR5KHBhdGgpO1xuICAgICAgaWYgKHApIHtcbiAgICAgICAgcHJvcHMucHVzaChwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByb3BzO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgY2Fub25pY2FsIHBhdGhzIGZyb20gYSBwYXRoIHdpdGggd2lsZGNhcmRzLlxuICAgKiBlLmc6PGJyLz5cbiAgICogRnJvbTo8YnIvPlxuICAgKiA8Y29kZT4vZ2FyYWdlL2NhcnMvJiM0MjsvdGlyZXMvJiM0MjsvbmFtZTwvY29kZT48YnIvPlxuICAgKiBpdCBjcmVhdGVzOjxici8+XG4gICAqIDxjb2RlPi9nYXJhZ2UvY2Fycy8wL3RpcmVzLzAvbmFtZTwvY29kZT48YnIvPlxuICAgKiA8Y29kZT4vZ2FyYWdlL2NhcnMvMC90aXJlcy8xL25hbWU8L2NvZGU+PGJyLz5cbiAgICogPGNvZGU+L2dhcmFnZS9jYXJzLzAvdGlyZXMvMi9uYW1lPC9jb2RlPjxici8+XG4gICAqIDxjb2RlPi9nYXJhZ2UvY2Fycy8wL3RpcmVzLzMvbmFtZTwvY29kZT48YnIvPlxuICAgKiA8Y29kZT4vZ2FyYWdlL2NhcnMvMS90aXJlcy8wL25hbWU8L2NvZGU+PGJyLz5cbiAgICogPGNvZGU+L2dhcmFnZS9jYXJzLzIvdGlyZXMvMS9uYW1lPC9jb2RlPjxici8+XG4gICAqIDxjb2RlPi9nYXJhZ2UvY2Fycy8zL3RpcmVzLzIvbmFtZTwvY29kZT48YnIvPlxuICAgKiA8Y29kZT4vZ2FyYWdlL2NhcnMvMy90aXJlcy8zL25hbWU8L2NvZGU+PGJyLz5cbiAgICogPGNvZGU+L2dhcmFnZS9jYXJzLyYjNDI7L3RpcmVzLyYjNDI7L25hbWU8L2NvZGU+PGJyLz5cbiAgICogPGNvZGU+L2dhcmFnZS9jYXJzLyYjNDI7L3RpcmVzLzIvbmFtZTwvY29kZT48YnIvPlxuICAgKiA8Y29kZT4vZ2FyYWdlL2NhcnMvJiM0MjsvdGlyZXMvMy9uYW1lPC9jb2RlPjxici8+XG4gICAqIDxici8+ZXRjLi4uXG4gICAqIEBwYXJhbSB0YXJnZXRcbiAgICogQHBhcmFtIHBhdGhcbiAgICogQHBhcmFtIHBhcmVudFBhdGhcbiAgICovXG4gIGZpbmRQcm9wZXJ0eVBhdGhzKHRhcmdldDogRm9ybVByb3BlcnR5LCBwYXRoOiBzdHJpbmcsIHBhcmVudFBhdGg/OiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgaXggPSBwYXRoLmluZGV4T2YoJyonKTtcbiAgICBpZiAoLTEgIT09IGl4KSB7XG4gICAgICBjb25zdCBwcmVQYXRoID0gaXggPiAtMSA/IHBhdGguc3Vic3RyaW5nKDAsIGl4IC0gMSkgOiBwYXRoO1xuICAgICAgY29uc3Qgc3ViUGF0aCA9IGl4ID4gLTEgPyBwYXRoLnN1YnN0cmluZyhpeCArIDEpIDogcGF0aDtcbiAgICAgIGNvbnN0IHByb3A6IEZvcm1Qcm9wZXJ0eSA9IHRhcmdldC5zZWFyY2hQcm9wZXJ0eShwcmVQYXRoKTtcbiAgICAgIGxldCBwYXRoRm91bmQgPSBbXTtcbiAgICAgIGlmIChwcm9wIGluc3RhbmNlb2YgUHJvcGVydHlHcm91cCkge1xuICAgICAgICBjb25zdCBhcnJQcm9wID0gcHJvcC5wcm9wZXJ0aWVzIGFzIEZvcm1Qcm9wZXJ0eVtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyclByb3AubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjb25zdCBjdXJyZUl0ZW1QYXRoID0gKHBhcmVudFBhdGggfHwgJycpICsgcHJlUGF0aCArIChwcmVQYXRoLmVuZHNXaXRoKCcvJykgPyAnJyA6ICcvJykgKyBpICsgc3ViUGF0aDtcbiAgICAgICAgICBjb25zdCBjdXJyZUl0ZW1QcmVQYXRoID0gKHBhcmVudFBhdGggfHwgJycpICsgcHJlUGF0aCArIGk7XG4gICAgICAgICAgaWYgKC0xID09PSBjdXJyZUl0ZW1QYXRoLmluZGV4T2YoJyonKSkge1xuICAgICAgICAgICAgcGF0aEZvdW5kLnB1c2goY3VycmVJdGVtUGF0aCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IGNoaWxkcmVuUGF0aEZvdW5kID0gdGhpcy5maW5kUHJvcGVydHlQYXRocyhhcnJQcm9wW2ldLCBzdWJQYXRoLCBjdXJyZUl0ZW1QcmVQYXRoKTtcbiAgICAgICAgICBwYXRoRm91bmQgPSBwYXRoRm91bmQuY29uY2F0KGNoaWxkcmVuUGF0aEZvdW5kKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHBhdGhGb3VuZDtcbiAgICB9XG4gICAgcmV0dXJuIFtwYXRoXTtcbiAgfVxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUHJvcGVydHlHcm91cCBleHRlbmRzIEZvcm1Qcm9wZXJ0eSB7XG5cbiAgX3Byb3BlcnRpZXM6IEZvcm1Qcm9wZXJ0eVtdIHwgeyBba2V5OiBzdHJpbmddOiBGb3JtUHJvcGVydHkgfSA9IG51bGw7XG5cbiAgZ2V0IHByb3BlcnRpZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb3BlcnRpZXM7XG4gIH1cblxuICBzZXQgcHJvcGVydGllcyhwcm9wZXJ0aWVzOiBGb3JtUHJvcGVydHlbXSB8IHsgW2tleTogc3RyaW5nXTogRm9ybVByb3BlcnR5IH0pIHtcbiAgICAvKipcbiAgICAgKiBPdmVycmlkZSB0aGUgc2V0dGVyIHRvIGFkZCBhbiBvYnNlcnZlciB0aGF0IG5vdGljZXMgd2hlbiBhbiBpdGVtIGlzIGFkZGVkIG9yIHJlbW92ZWQuPGJyLz5cbiAgICAgKi9cbiAgICB0aGlzLl9wcm9wZXJ0aWVzID0gbmV3IFByb3h5KHByb3BlcnRpZXMsIHRoaXMuX3Byb3BlcnR5UHJveHlIYW5kbGVyKTtcbiAgfVxuXG4gIHByaXZhdGUgX3Byb3BlcnR5UHJveHlIYW5kbGVyOiBQcm94eUhhbmRsZXI8Rm9ybVByb3BlcnR5W10gfCB7IFtrZXk6IHN0cmluZ106IEZvcm1Qcm9wZXJ0eSB9PiA9IHtcbiAgICAvKipcbiAgICAgKiBXaGVuIGEgbmV3IGl0ZW0gaXMgYWRkZWQgaXQgd2lsbCBiZSBjaGVja2VkIGZvciB2aXNpYmlsaXR5IHVwZGF0ZXMgdG8gcHJvY2VlZCA8YnIvPlxuICAgICAqIGlmIGFueSBvdGhlciBmaWVsZCBoYXMgYSBiaW5kaW5nIHJlZmVyZW5jZSB0byBpdC48YnIvPlxuICAgICAqL1xuICAgIHNldCh0YXJnZXQ6IEZvcm1Qcm9wZXJ0eVtdIHwgeyBbcDogc3RyaW5nXTogRm9ybVByb3BlcnR5IH0sIHA6IFByb3BlcnR5S2V5LCB2YWx1ZTogYW55LCByZWNlaXZlcjogYW55KTogYm9vbGVhbiB7XG5cbiAgICAgIC8qKlxuICAgICAgICogMSkgTWFrZSBzdXJlIGEgY2Fub25pY2FsIHBhdGggaXMgc2V0XG4gICAgICAgKi9cbiAgICAgIGNvbnN0IGFzc2VydENhbm9uaWNhbFBhdGggPSAocHJvcGVydHlWYWx1ZTogYW55KSA9PiB7XG4gICAgICAgIGNvbnN0IGZvcm1Qcm9wZXJ0eSA9IHByb3BlcnR5VmFsdWUgYXMgRm9ybVByb3BlcnR5O1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIHByb3BlcnR5VmFsdWUgaW5zdGFuY2VvZiBGb3JtUHJvcGVydHkpIHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBDcmVhdGUgYSBjYW5vbmljYWwgcGF0aCByZXBsYWNpbmcgdGhlIGxhc3QgJyonIHdpdGggdGhlIGVsZW1lbnRzIHBvc2l0aW9uIGluIGFycmF5XG4gICAgICAgICAgICogQHBhcmFtIHByb3BlcnR5UGF0aFxuICAgICAgICAgICAqIEBwYXJhbSBpbmRleE9mQ2hpbGRcbiAgICAgICAgICAgKi9cbiAgICAgICAgICBjb25zdCBnZXRDYW5vbmljYWxQYXRoID0gKHByb3BlcnR5UGF0aDogc3RyaW5nLCBpbmRleE9mQ2hpbGQ6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgbGV0IHBvcztcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eVBhdGggJiYgLTEgIT09IChwb3MgPSBwcm9wZXJ0eVBhdGgubGFzdEluZGV4T2YoJyonKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHByb3BlcnR5UGF0aC5zdWJzdHJpbmcoMCwgcG9zKSArIGluZGV4T2ZDaGlsZC50b1N0cmluZygpICsgcHJvcGVydHlQYXRoLnN1YnN0cmluZyhwb3MgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChmb3JtUHJvcGVydHkpIHtcbiAgICAgICAgICAgIGZvcm1Qcm9wZXJ0eS5fY2Fub25pY2FsUGF0aCA9IGdldENhbm9uaWNhbFBhdGgoZm9ybVByb3BlcnR5Ll9jYW5vbmljYWxQYXRoLCBwIGFzIG51bWJlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcHJvcGVydHlHcm91cCA9IGZvcm1Qcm9wZXJ0eSBhcyBQcm9wZXJ0eUdyb3VwO1xuICAgICAgICBjb25zdCBwcm9wZXJ0eUdyb3VwQ2hpbGRyZW4gPSAoQXJyYXkuaXNBcnJheShwcm9wZXJ0eUdyb3VwLnByb3BlcnRpZXMpID9cbiAgICAgICAgICBwcm9wZXJ0eUdyb3VwLnByb3BlcnRpZXMgOlxuICAgICAgICAgIE9iamVjdC52YWx1ZXMocHJvcGVydHlHcm91cC5wcm9wZXJ0aWVzIHx8IHt9KSkgYXMgRm9ybVByb3BlcnR5W107XG4gICAgICAgIGlmICgoZm9ybVByb3BlcnR5LnBhdGggfHwgJycpLmVuZHNXaXRoKCcvKicpKSB7XG4gICAgICAgICAgLyoqXG4gICAgICAgICAgICogSWYgaXQgaXMgYW4gYXJyYXksIHRoZW4gYWxsIGNoaWxkcmVuIGNhbm9uaWNhbCBwYXRocyBtdXN0IGJlIGNvbXB1dGVkIG5vdy5cbiAgICAgICAgICAgKiBUaGUgY2hpbGRyZW4gZG9uJ3QgaGF2ZSB0aGUgcGFyZW50J3MgcGF0aCBzZWdtZW50IHNldCB5ZXQsXG4gICAgICAgICAgICogYmVjYXVzZSB0aGV5IGFyZSBjcmVhdGVkIGJlZm9yZSB0aGUgcGFyZW50IGdldHMgYXR0YWNoZWQgdG8gaXRzIHBhcmVudC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHByb3BlcnR5R3JvdXBDaGlsZHJlbikge1xuICAgICAgICAgICAgY2hpbGQuX2Nhbm9uaWNhbFBhdGggPSBmb3JtUHJvcGVydHkuX2Nhbm9uaWNhbFBhdGggKyBjaGlsZC5fY2Fub25pY2FsUGF0aC5zdWJzdHJpbmcoZm9ybVByb3BlcnR5LnBhdGgubGVuZ3RoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtwcm9wZXJ0eTogZm9ybVByb3BlcnR5LCBjaGlsZHJlbjogcHJvcGVydHlHcm91cENoaWxkcmVufTtcbiAgICAgIH07XG4gICAgICBjb25zdCB7cHJvcGVydHksIGNoaWxkcmVufSA9IGFzc2VydENhbm9uaWNhbFBhdGgodmFsdWUpO1xuXG4gICAgICAvKipcbiAgICAgICAqIDIpIEFkZCB0aGUgbmV3IHByb3BlcnR5IGJlZm9yZSByZWJpbmRpbmcsIHNvIGl0IGNhbiBiZSBmb3VuZCBieSA8Y29kZT5fYmluZFZpc2liaWxpdHk8L2NvZGU+XG4gICAgICAgKi9cbiAgICAgIGNvbnN0IHJlc3VsdCA9IHRhcmdldFtwIGFzIHN0cmluZ10gPSB2YWx1ZTtcblxuICAgICAgLyoqXG4gICAgICAgKiAzKSBSZS1iaW5kIHRoZSB2aXNpYmlsaXR5IGJpbmRpbmdzIHJlZmVyZW5jaW5nIHRvIHRoaXMgY2Fub25pY2FsIHBhdGhzXG4gICAgICAgKi9cbiAgICAgIGNvbnN0IHJlYmluZFZpc2liaWxpdHkgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlYmluZEFsbCA9IFtwcm9wZXJ0eV0uY29uY2F0KGNoaWxkcmVuKTtcbiAgICAgICAgY29uc3QgZmluZFByb3BlcnRpZXNUb1JlYmluZCA9IChmb3JtUHJvcGVydHk6IEZvcm1Qcm9wZXJ0eSkgPT4ge1xuICAgICAgICAgIGNvbnN0IHByb3BlcnR5QmluZGluZ3MgPSBmb3JtUHJvcGVydHkuX3Byb3BlcnR5QmluZGluZ1JlZ2lzdHJ5LmdldFByb3BlcnR5QmluZGluZ3NWaXNpYmlsaXR5KCk7XG4gICAgICAgICAgbGV0IHJlYmluZDogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgICBpZiAoZm9ybVByb3BlcnR5Ll9jYW5vbmljYWxQYXRoKSB7XG4gICAgICAgICAgICByZWJpbmQgPSByZWJpbmQuY29uY2F0KHJlYmluZC5jb25jYXQocHJvcGVydHlCaW5kaW5ncy5maW5kQnlEZXBlbmRlbmN5UGF0aChmb3JtUHJvcGVydHkuX2Nhbm9uaWNhbFBhdGgpIHx8IFtdKSk7XG4gICAgICAgICAgICBpZiAoZm9ybVByb3BlcnR5Ll9jYW5vbmljYWxQYXRoLnN0YXJ0c1dpdGgoJy8nKSkge1xuICAgICAgICAgICAgICByZWJpbmQgPSByZWJpbmQuY29uY2F0KHJlYmluZC5jb25jYXQocHJvcGVydHlCaW5kaW5ncy5maW5kQnlEZXBlbmRlbmN5UGF0aChmb3JtUHJvcGVydHkuX2Nhbm9uaWNhbFBhdGguc3Vic3RyaW5nKDEpKSB8fCBbXSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZWJpbmQgPSByZWJpbmQuY29uY2F0KHByb3BlcnR5QmluZGluZ3MuZmluZEJ5RGVwZW5kZW5jeVBhdGgoZm9ybVByb3BlcnR5LnBhdGgpIHx8IFtdKTtcbiAgICAgICAgICBpZiAoZm9ybVByb3BlcnR5LnBhdGguc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgICAgICAgICByZWJpbmQgPSByZWJpbmQuY29uY2F0KHJlYmluZC5jb25jYXQocHJvcGVydHlCaW5kaW5ncy5maW5kQnlEZXBlbmRlbmN5UGF0aChmb3JtUHJvcGVydHkucGF0aC5zdWJzdHJpbmcoMSkpIHx8IFtdKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnN0IHVuaXF1ZVZhbHVlcyA9IHt9O1xuICAgICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiByZWJpbmQpIHtcbiAgICAgICAgICAgIHVuaXF1ZVZhbHVlc1tpdGVtXSA9IGl0ZW07XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh1bmlxdWVWYWx1ZXMpO1xuICAgICAgICB9O1xuICAgICAgICBmb3IgKGNvbnN0IF9wcm9wZXJ0eSBvZiByZWJpbmRBbGwpIHtcbiAgICAgICAgICBpZiAoX3Byb3BlcnR5IGluc3RhbmNlb2YgRm9ybVByb3BlcnR5KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBjb25zdCByZWJpbmRQYXRocyA9IGZpbmRQcm9wZXJ0aWVzVG9SZWJpbmQoX3Byb3BlcnR5KTtcbiAgICAgICAgICAgICAgZm9yIChjb25zdCByZWJpbmRQcm9wUGF0aCBvZiByZWJpbmRQYXRocykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlYmluZFByb3AgPSBfcHJvcGVydHkuc2VhcmNoUHJvcGVydHkocmViaW5kUHJvcFBhdGgpO1xuICAgICAgICAgICAgICAgIHJlYmluZFByb3AuX2JpbmRWaXNpYmlsaXR5KCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignUmViaW5kaW5nIHZpc2liaWxpdHkgZXJyb3IgYXQgcGF0aDonLCBfcHJvcGVydHkucGF0aCwgJ3Byb3BlcnR5OicsIF9wcm9wZXJ0eSwgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgcmViaW5kVmlzaWJpbGl0eSgpO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0sXG4gICAgZ2V0KHRhcmdldDogRm9ybVByb3BlcnR5W10gfCB7IFtwOiBzdHJpbmddOiBGb3JtUHJvcGVydHkgfSwgcDogUHJvcGVydHlLZXksIHJlY2VpdmVyOiBhbnkpOiBhbnkge1xuICAgICAgcmV0dXJuIHRhcmdldFtwIGFzIHN0cmluZ107XG4gICAgfSxcbiAgICBkZWxldGVQcm9wZXJ0eSh0YXJnZXQ6IEZvcm1Qcm9wZXJ0eVtdIHwgeyBbcDogc3RyaW5nXTogRm9ybVByb3BlcnR5IH0sIHA6IFByb3BlcnR5S2V5KTogYm9vbGVhbiB7XG4gICAgICByZXR1cm4gZGVsZXRlIHRhcmdldFtwIGFzIHN0cmluZ107XG4gICAgfVxuICB9O1xuXG4gIGdldFByb3BlcnR5KHBhdGg6IHN0cmluZykge1xuICAgIGxldCBzdWJQYXRoSWR4ID0gcGF0aC5pbmRleE9mKCcvJyk7XG4gICAgbGV0IHByb3BlcnR5SWQgPSBzdWJQYXRoSWR4ICE9PSAtMSA/IHBhdGguc3Vic3RyKDAsIHN1YlBhdGhJZHgpIDogcGF0aDtcblxuICAgIGxldCBwcm9wZXJ0eSA9IHRoaXMucHJvcGVydGllc1twcm9wZXJ0eUlkXTtcbiAgICBpZiAocHJvcGVydHkgIT09IG51bGwgJiYgc3ViUGF0aElkeCAhPT0gLTEgJiYgcHJvcGVydHkgaW5zdGFuY2VvZiBQcm9wZXJ0eUdyb3VwKSB7XG4gICAgICBsZXQgc3ViUGF0aCA9IHBhdGguc3Vic3RyKHN1YlBhdGhJZHggKyAxKTtcbiAgICAgIHByb3BlcnR5ID0gKDxQcm9wZXJ0eUdyb3VwPnByb3BlcnR5KS5nZXRQcm9wZXJ0eShzdWJQYXRoKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb3BlcnR5O1xuICB9XG5cbiAgcHVibGljIGZvckVhY2hDaGlsZChmbjogKGZvcm1Qcm9wZXJ0eTogRm9ybVByb3BlcnR5LCBzdHI6IFN0cmluZykgPT4gdm9pZCkge1xuICAgIGZvciAobGV0IHByb3BlcnR5SWQgaW4gdGhpcy5wcm9wZXJ0aWVzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wZXJ0aWVzLmhhc093blByb3BlcnR5KHByb3BlcnR5SWQpKSB7XG4gICAgICAgIGxldCBwcm9wZXJ0eSA9IHRoaXMucHJvcGVydGllc1twcm9wZXJ0eUlkXTtcbiAgICAgICAgZm4ocHJvcGVydHksIHByb3BlcnR5SWQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBmb3JFYWNoQ2hpbGRSZWN1cnNpdmUoZm46IChmb3JtUHJvcGVydHk6IEZvcm1Qcm9wZXJ0eSkgPT4gdm9pZCkge1xuICAgIHRoaXMuZm9yRWFjaENoaWxkKChjaGlsZCkgPT4ge1xuICAgICAgZm4oY2hpbGQpO1xuICAgICAgaWYgKGNoaWxkIGluc3RhbmNlb2YgUHJvcGVydHlHcm91cCkge1xuICAgICAgICAoPFByb3BlcnR5R3JvdXA+Y2hpbGQpLmZvckVhY2hDaGlsZFJlY3Vyc2l2ZShmbik7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgX2JpbmRWaXNpYmlsaXR5KCkge1xuICAgIHN1cGVyLl9iaW5kVmlzaWJpbGl0eSgpO1xuICAgIHRoaXMuX2JpbmRWaXNpYmlsaXR5UmVjdXJzaXZlKCk7XG4gIH1cblxuICBwcml2YXRlIF9iaW5kVmlzaWJpbGl0eVJlY3Vyc2l2ZSgpIHtcbiAgICB0aGlzLmZvckVhY2hDaGlsZFJlY3Vyc2l2ZSgocHJvcGVydHkpID0+IHtcbiAgICAgIHByb3BlcnR5Ll9iaW5kVmlzaWJpbGl0eSgpO1xuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGlzUm9vdCgpIHtcbiAgICByZXR1cm4gdGhpcyA9PT0gdGhpcy5yb290O1xuICB9XG59XG5cblxuIl19