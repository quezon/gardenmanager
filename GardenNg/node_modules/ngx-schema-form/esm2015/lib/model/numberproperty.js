/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AtomicProperty } from './atomicproperty';
import { PROPERTY_TYPE_MAPPING } from './typemapping';
export class NumberProperty extends AtomicProperty {
    /**
     * @return {?}
     */
    fallbackValue() {
        return null;
    }
    /**
     * @param {?} value
     * @param {?=} onlySelf
     * @return {?}
     */
    setValue(value, onlySelf = false) {
        if (typeof value === 'string') {
            if (value.length) {
                value = value.indexOf('.') > -1 ? parseFloat(value) : parseInt(value, 10);
            }
            else {
                value = null;
            }
        }
        this._value = value;
        this.updateValueAndValidity(onlySelf, true);
    }
}
PROPERTY_TYPE_MAPPING.integer = (/**
 * @param {?} schemaValidatorFactory
 * @param {?} validatorRegistry
 * @param {?} expressionCompilerFactory
 * @param {?} schema
 * @param {?} parent
 * @param {?} path
 * @return {?}
 */
(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path) => {
    return new NumberProperty(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);
});
PROPERTY_TYPE_MAPPING.number = (/**
 * @param {?} schemaValidatorFactory
 * @param {?} validatorRegistry
 * @param {?} expressionCompilerFactory
 * @param {?} schema
 * @param {?} parent
 * @param {?} path
 * @return {?}
 */
(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path) => {
    return new NumberProperty(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVycHJvcGVydHkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2NoZW1hLWZvcm0vIiwic291cmNlcyI6WyJsaWIvbW9kZWwvbnVtYmVycHJvcGVydHkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUloRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEQsTUFBTSxPQUFPLGNBQWUsU0FBUSxjQUFjOzs7O0lBRWhELGFBQWE7UUFDWCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7Ozs7OztJQUVELFFBQVEsQ0FBQyxLQUFLLEVBQUUsUUFBUSxHQUFHLEtBQUs7UUFDOUIsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDN0IsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO2dCQUNoQixLQUFLLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQzNFO2lCQUFNO2dCQUNMLEtBQUssR0FBRyxJQUFJLENBQUM7YUFDZDtTQUNGO1FBQ0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7UUFDcEIsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUM5QyxDQUFDO0NBQ0Y7QUFFRCxxQkFBcUIsQ0FBQyxPQUFPOzs7Ozs7Ozs7QUFBRyxDQUM1QixzQkFBOEMsRUFDOUMsaUJBQW9DLEVBQ3BDLHlCQUFvRCxFQUNwRCxNQUFXLEVBQ1gsTUFBcUIsRUFDckIsSUFBWSxFQUNkLEVBQUU7SUFDQSxPQUFPLElBQUksY0FBYyxDQUFDLHNCQUFzQixFQUFFLGlCQUFpQixFQUFFLHlCQUF5QixFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDMUgsQ0FBQyxDQUFBLENBQUM7QUFFRCxxQkFBcUIsQ0FBQyxNQUFNOzs7Ozs7Ozs7QUFBRyxDQUM1QixzQkFBOEMsRUFDOUMsaUJBQW9DLEVBQ3BDLHlCQUFvRCxFQUNwRCxNQUFXLEVBQ1gsTUFBcUIsRUFDckIsSUFBWSxFQUNkLEVBQUU7SUFDQSxPQUFPLElBQUksY0FBYyxDQUFDLHNCQUFzQixFQUFFLGlCQUFpQixFQUFFLHlCQUF5QixFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDMUgsQ0FBQyxDQUFBLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0F0b21pY1Byb3BlcnR5fSBmcm9tICcuL2F0b21pY3Byb3BlcnR5JztcbmltcG9ydCB7IFZhbGlkYXRvclJlZ2lzdHJ5LCBQcm9wZXJ0eUdyb3VwIH0gZnJvbSAnLic7XG5pbXBvcnQgeyBFeHByZXNzaW9uQ29tcGlsZXJGYWN0b3J5IH0gZnJvbSAnLi4vZXhwcmVzc2lvbi1jb21waWxlci1mYWN0b3J5JztcbmltcG9ydCB7IFNjaGVtYVZhbGlkYXRvckZhY3RvcnkgfSBmcm9tICcuLi9zY2hlbWF2YWxpZGF0b3JmYWN0b3J5JztcbmltcG9ydCB7IFBST1BFUlRZX1RZUEVfTUFQUElORyB9IGZyb20gJy4vdHlwZW1hcHBpbmcnO1xuXG5leHBvcnQgY2xhc3MgTnVtYmVyUHJvcGVydHkgZXh0ZW5kcyBBdG9taWNQcm9wZXJ0eSB7XG5cbiAgZmFsbGJhY2tWYWx1ZSgpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHNldFZhbHVlKHZhbHVlLCBvbmx5U2VsZiA9IGZhbHNlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGlmICh2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5pbmRleE9mKCcuJykgPiAtMSA/IHBhcnNlRmxvYXQodmFsdWUpIDogcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkob25seVNlbGYsIHRydWUpO1xuICB9XG59XG5cblBST1BFUlRZX1RZUEVfTUFQUElORy5pbnRlZ2VyID0gKFxuICAgIHNjaGVtYVZhbGlkYXRvckZhY3Rvcnk6IFNjaGVtYVZhbGlkYXRvckZhY3RvcnksXG4gICAgdmFsaWRhdG9yUmVnaXN0cnk6IFZhbGlkYXRvclJlZ2lzdHJ5LFxuICAgIGV4cHJlc3Npb25Db21waWxlckZhY3Rvcnk6IEV4cHJlc3Npb25Db21waWxlckZhY3RvcnksXG4gICAgc2NoZW1hOiBhbnksXG4gICAgcGFyZW50OiBQcm9wZXJ0eUdyb3VwLFxuICAgIHBhdGg6IHN0cmluZ1xuKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBOdW1iZXJQcm9wZXJ0eShzY2hlbWFWYWxpZGF0b3JGYWN0b3J5LCB2YWxpZGF0b3JSZWdpc3RyeSwgZXhwcmVzc2lvbkNvbXBpbGVyRmFjdG9yeSwgc2NoZW1hLCBwYXJlbnQsIHBhdGgpO1xufTtcblxuIFBST1BFUlRZX1RZUEVfTUFQUElORy5udW1iZXIgPSAoXG4gICAgc2NoZW1hVmFsaWRhdG9yRmFjdG9yeTogU2NoZW1hVmFsaWRhdG9yRmFjdG9yeSxcbiAgICB2YWxpZGF0b3JSZWdpc3RyeTogVmFsaWRhdG9yUmVnaXN0cnksXG4gICAgZXhwcmVzc2lvbkNvbXBpbGVyRmFjdG9yeTogRXhwcmVzc2lvbkNvbXBpbGVyRmFjdG9yeSxcbiAgICBzY2hlbWE6IGFueSxcbiAgICBwYXJlbnQ6IFByb3BlcnR5R3JvdXAsXG4gICAgcGF0aDogc3RyaW5nXG4pID0+IHtcbiAgICByZXR1cm4gbmV3IE51bWJlclByb3BlcnR5KHNjaGVtYVZhbGlkYXRvckZhY3RvcnksIHZhbGlkYXRvclJlZ2lzdHJ5LCBleHByZXNzaW9uQ29tcGlsZXJGYWN0b3J5LCBzY2hlbWEsIHBhcmVudCwgcGF0aCk7XG59O1xuIl19