/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
export class ExpressionCompilerFactory {
}
if (false) {
    /**
     * @abstract
     * @return {?}
     */
    ExpressionCompilerFactory.prototype.createExpressionCompiler = function () { };
    /**
     * @abstract
     * @return {?}
     */
    ExpressionCompilerFactory.prototype.createExpressionCompilerVisibilityIf = function () { };
}
/**
 * @record
 */
export function ExpressionCompiler() { }
if (false) {
    /**
     * @param {?} expression
     * @param {?} context
     * @return {?}
     */
    ExpressionCompiler.prototype.evaluate = function (expression, context) { };
}
/**
 * @record
 */
export function ExpressionCompilerVisibilityIf() { }
if (false) {
    /**
     * @param {?} expression
     * @param {?} context
     * @return {?}
     */
    ExpressionCompilerVisibilityIf.prototype.evaluate = function (expression, context) { };
}
/**
 * UseCase:<br/>
 * When evaluating the expression of a <code>visibilityIf</code> condition
 * an instance of this definition will be passed as context.<br/>
 * This will give access to the source and target <code>FormProperty</code>.
 * @record
 */
export function ExpressionContextVisibilitIf() { }
if (false) {
    /**
     * The source property which has the <code>visibilityIf</code> defined
     * @type {?}
     */
    ExpressionContextVisibilitIf.prototype.source;
    /**
     * The target property given with the <code>visibilityIf</code>
     * <em>path</em> property
     * @type {?}
     */
    ExpressionContextVisibilitIf.prototype.target;
}
import * as JEXL from 'jexl';
export class JEXLExpressionCompilerFactory extends ExpressionCompilerFactory {
    /**
     * @return {?}
     */
    createExpressionCompiler() {
        return new JEXLExpressionCompiler();
    }
    /**
     * @return {?}
     */
    createExpressionCompilerVisibilityIf() {
        return new JEXLExpressionCompilerVisibiltyIf();
    }
}
export class JEXLExpressionCompiler {
    /**
     * @param {?} expression
     * @param {?=} context
     * @return {?}
     */
    evaluate(expression, context = {}) {
        return new JEXL.Jexl().evalSync(expression, context);
    }
}
export class JEXLExpressionCompilerVisibiltyIf {
    /**
     * @param {?} expression
     * @param {?=} context
     * @return {?}
     */
    evaluate(expression, context = { source: (/** @type {?} */ ({})), target: (/** @type {?} */ ({})) }) {
        return new JEXL.Jexl().evalSync(expression, context);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi1jb21waWxlci1mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXNjaGVtYS1mb3JtLyIsInNvdXJjZXMiOlsibGliL2V4cHJlc3Npb24tY29tcGlsZXItZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsTUFBTSxPQUFnQix5QkFBeUI7Q0FHOUM7Ozs7OztJQUZHLCtFQUErRDs7Ozs7SUFDL0QsMkZBQXVGOzs7OztBQUczRix3Q0FFQzs7Ozs7OztJQURHLDJFQUFtRDs7Ozs7QUFHdkQsb0RBRUM7Ozs7Ozs7SUFERyx1RkFBeUU7Ozs7Ozs7OztBQVE3RSxrREFVQzs7Ozs7O0lBTkcsOENBQW9COzs7Ozs7SUFLcEIsOENBQW9COztBQUl4QixPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUc3QixNQUFNLE9BQU8sNkJBQThCLFNBQVEseUJBQXlCOzs7O0lBQ2pFLHdCQUF3QjtRQUMzQixPQUFPLElBQUksc0JBQXNCLEVBQUUsQ0FBQztJQUN4QyxDQUFDOzs7O0lBRU0sb0NBQW9DO1FBQ3ZDLE9BQU8sSUFBSSxpQ0FBaUMsRUFBRSxDQUFDO0lBQ25ELENBQUM7Q0FDSjtBQUVELE1BQU0sT0FBTyxzQkFBc0I7Ozs7OztJQUMvQixRQUFRLENBQUMsVUFBa0IsRUFBRSxVQUFrQixFQUFFO1FBQzdDLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUN4RCxDQUFDO0NBQ0o7QUFFRCxNQUFNLE9BQU8saUNBQWlDOzs7Ozs7SUFDMUMsUUFBUSxDQUFDLFVBQWtCLEVBQUUsVUFBd0MsRUFBRSxNQUFNLEVBQUUsbUJBQUEsRUFBRSxFQUFnQixFQUFFLE1BQU0sRUFBRSxtQkFBQSxFQUFFLEVBQWdCLEVBQUU7UUFDM0gsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ3hELENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBhYnN0cmFjdCBjbGFzcyBFeHByZXNzaW9uQ29tcGlsZXJGYWN0b3J5IHtcbiAgICBwdWJsaWMgYWJzdHJhY3QgY3JlYXRlRXhwcmVzc2lvbkNvbXBpbGVyKCk6IEV4cHJlc3Npb25Db21waWxlcjtcbiAgICBwdWJsaWMgYWJzdHJhY3QgY3JlYXRlRXhwcmVzc2lvbkNvbXBpbGVyVmlzaWJpbGl0eUlmKCk6IEV4cHJlc3Npb25Db21waWxlclZpc2liaWxpdHlJZjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBFeHByZXNzaW9uQ29tcGlsZXIge1xuICAgIGV2YWx1YXRlKGV4cHJlc3Npb246IHN0cmluZywgY29udGV4dDogb2JqZWN0KTogYW55O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV4cHJlc3Npb25Db21waWxlclZpc2liaWxpdHlJZiB7XG4gICAgZXZhbHVhdGUoZXhwcmVzc2lvbjogc3RyaW5nLCBjb250ZXh0OiBFeHByZXNzaW9uQ29udGV4dFZpc2liaWxpdElmKTogYW55O1xufVxuLyoqXG4gKiBVc2VDYXNlOjxici8+XG4gKiBXaGVuIGV2YWx1YXRpbmcgdGhlIGV4cHJlc3Npb24gb2YgYSA8Y29kZT52aXNpYmlsaXR5SWY8L2NvZGU+IGNvbmRpdGlvblxuICogYW4gaW5zdGFuY2Ugb2YgdGhpcyBkZWZpbml0aW9uIHdpbGwgYmUgcGFzc2VkIGFzIGNvbnRleHQuPGJyLz5cbiAqIFRoaXMgd2lsbCBnaXZlIGFjY2VzcyB0byB0aGUgc291cmNlIGFuZCB0YXJnZXQgPGNvZGU+Rm9ybVByb3BlcnR5PC9jb2RlPi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBFeHByZXNzaW9uQ29udGV4dFZpc2liaWxpdElmIHtcbiAgICAvKipcbiAgICAgKiBUaGUgc291cmNlIHByb3BlcnR5IHdoaWNoIGhhcyB0aGUgPGNvZGU+dmlzaWJpbGl0eUlmPC9jb2RlPiBkZWZpbmVkXG4gICAgICovXG4gICAgc291cmNlOiBGb3JtUHJvcGVydHlcbiAgICAvKipcbiAgICAgKiBUaGUgdGFyZ2V0IHByb3BlcnR5IGdpdmVuIHdpdGggdGhlIDxjb2RlPnZpc2liaWxpdHlJZjwvY29kZT5cbiAgICAgKiA8ZW0+cGF0aDwvZW0+IHByb3BlcnR5XG4gICAgICovXG4gICAgdGFyZ2V0OiBGb3JtUHJvcGVydHlcbn1cblxuXG5pbXBvcnQgKiBhcyBKRVhMIGZyb20gJ2pleGwnO1xuaW1wb3J0IHsgRm9ybVByb3BlcnR5IH0gZnJvbSAnLi9tb2RlbCc7XG5cbmV4cG9ydCBjbGFzcyBKRVhMRXhwcmVzc2lvbkNvbXBpbGVyRmFjdG9yeSBleHRlbmRzIEV4cHJlc3Npb25Db21waWxlckZhY3Rvcnkge1xuICAgIHB1YmxpYyBjcmVhdGVFeHByZXNzaW9uQ29tcGlsZXIoKTogRXhwcmVzc2lvbkNvbXBpbGVyIHtcbiAgICAgICAgcmV0dXJuIG5ldyBKRVhMRXhwcmVzc2lvbkNvbXBpbGVyKCk7XG4gICAgfVxuXG4gICAgcHVibGljIGNyZWF0ZUV4cHJlc3Npb25Db21waWxlclZpc2liaWxpdHlJZigpOiBFeHByZXNzaW9uQ29tcGlsZXJWaXNpYmlsaXR5SWYge1xuICAgICAgICByZXR1cm4gbmV3IEpFWExFeHByZXNzaW9uQ29tcGlsZXJWaXNpYmlsdHlJZigpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEpFWExFeHByZXNzaW9uQ29tcGlsZXIgaW1wbGVtZW50cyBFeHByZXNzaW9uQ29tcGlsZXIge1xuICAgIGV2YWx1YXRlKGV4cHJlc3Npb246IHN0cmluZywgY29udGV4dDogb2JqZWN0ID0ge30pOiBhbnkge1xuICAgICAgICByZXR1cm4gbmV3IEpFWEwuSmV4bCgpLmV2YWxTeW5jKGV4cHJlc3Npb24sIGNvbnRleHQpXG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgSkVYTEV4cHJlc3Npb25Db21waWxlclZpc2liaWx0eUlmIGltcGxlbWVudHMgRXhwcmVzc2lvbkNvbXBpbGVyVmlzaWJpbGl0eUlmIHtcbiAgICBldmFsdWF0ZShleHByZXNzaW9uOiBzdHJpbmcsIGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0VmlzaWJpbGl0SWYgPSB7IHNvdXJjZToge30gYXMgRm9ybVByb3BlcnR5LCB0YXJnZXQ6IHt9IGFzIEZvcm1Qcm9wZXJ0eSB9KTogYW55IHtcbiAgICAgICAgcmV0dXJuIG5ldyBKRVhMLkpleGwoKS5ldmFsU3luYyhleHByZXNzaW9uLCBjb250ZXh0KVxuICAgIH1cbn1cbiJdfQ==