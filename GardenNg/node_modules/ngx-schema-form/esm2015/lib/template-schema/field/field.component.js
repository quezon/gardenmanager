/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ContentChildren, QueryList, ElementRef } from '@angular/core';
import { merge } from 'rxjs';
import { ActionRegistry } from '../../model/actionregistry';
import { TemplateSchemaService } from '../template-schema.service';
import { ButtonComponent } from '../button/button.component';
import { FieldParent } from './field-parent';
import { FieldType } from './field';
import { ItemComponent } from './item/item.component';
export class FieldComponent extends FieldParent {
    /**
     * @param {?} elementRef
     * @param {?} templateSchemaService
     * @param {?} actionRegistry
     */
    constructor(elementRef, templateSchemaService, actionRegistry) {
        super();
        this.elementRef = elementRef;
        this.templateSchemaService = templateSchemaService;
        this.actionRegistry = actionRegistry;
        this.type = FieldType.String;
        this.schema = {};
    }
    /**
     * @return {?}
     */
    getSchema() {
        const { properties, items, required } = this.getFieldsSchema(this.childFields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field !== this)));
        /** @type {?} */
        const oneOf = this.getOneOf();
        /** @type {?} */
        const schema = (/** @type {?} */ ({
            type: this.type
        }));
        if (this.title !== undefined) {
            schema.title = this.title;
        }
        if (properties !== undefined) {
            schema.properties = properties;
        }
        if (items !== undefined) {
            schema.items = items;
        }
        // requried child fields
        if (required !== undefined) {
            schema.required = required;
        }
        if (oneOf !== undefined) {
            schema.oneOf = oneOf;
        }
        if (this.description !== undefined) {
            schema.description = this.description;
        }
        if (this.placeholder !== undefined) {
            schema.placeholder = this.placeholder;
        }
        if (this.format !== undefined) {
            schema.format = this.format;
        }
        if (this.widget !== undefined) {
            schema.widget = this.widget;
        }
        if (this.readOnly !== undefined) {
            schema.readOnly = this.readOnly;
        }
        /** @type {?} */
        const buttons = this.getButtons();
        if (buttons.length > 0) {
            schema.buttons = buttons;
        }
        // @Input schema takes precedence
        return Object.assign(schema, this.schema);
    }
    /**
     * @return {?}
     */
    getValidators() {
        // registering validator here is not possible since prop full path is needed
        /** @type {?} */
        const childValidators = this.getFieldsValidators(this.childFields.filter((/**
         * @param {?} field
         * @return {?}
         */
        field => field !== this)));
        /** @type {?} */
        const validators = childValidators.map((/**
         * @param {?} __0
         * @return {?}
         */
        ({ path, validator }) => {
            return {
                path: this.path + path,
                validator
            };
        }));
        if (!this.validator) {
            return validators;
        }
        validators.push({ path: this.path, validator: this.validator });
        return validators;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const keys = Object.keys(changes);
        if (keys.length > 0) {
            for (const key of keys) {
                if (!changes[key].isFirstChange()) {
                    // on any input change, force schema change generation
                    this.templateSchemaService.changed();
                    break;
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getOneOf() {
        if (this.childItems.length === 0) {
            return;
        }
        /** @type {?} */
        const items = this.childItems.map((/**
         * @param {?} __0
         * @return {?}
         */
        ({ value, description }) => {
            if (!Array.isArray(value)) {
                return { enum: [value], description };
            }
            return { enum: value, description };
        }));
        if (items.length === 0) {
            return;
        }
        return items;
    }
    /**
     * @private
     * @return {?}
     */
    setTitleFromContent() {
        /** @type {?} */
        const textContent = this.getTextContent(this.elementRef);
        //  title as @Input takes priority over content text
        if (textContent && !this.title) {
            this.title = textContent;
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        // cache it
        this.setTitleFromContent();
        merge(this.childFields.changes, this.childItems.changes, this.childButtons.changes)
            .subscribe((/**
         * @return {?}
         */
        () => this.templateSchemaService.changed()));
    }
}
FieldComponent.decorators = [
    { type: Component, args: [{
                selector: 'sf-field',
                template: "<ng-content ></ng-content>\n"
            }] }
];
/** @nocollapse */
FieldComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: TemplateSchemaService },
    { type: ActionRegistry }
];
FieldComponent.propDecorators = {
    childFields: [{ type: ContentChildren, args: [FieldComponent,] }],
    childItems: [{ type: ContentChildren, args: [ItemComponent,] }],
    childButtons: [{ type: ContentChildren, args: [ButtonComponent,] }],
    name: [{ type: Input }],
    type: [{ type: Input }],
    format: [{ type: Input }],
    required: [{ type: Input }],
    readOnly: [{ type: Input }],
    title: [{ type: Input }],
    description: [{ type: Input }],
    placeholder: [{ type: Input }],
    widget: [{ type: Input }],
    validator: [{ type: Input }],
    schema: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FieldComponent.prototype.childFields;
    /** @type {?} */
    FieldComponent.prototype.childItems;
    /** @type {?} */
    FieldComponent.prototype.childButtons;
    /** @type {?} */
    FieldComponent.prototype.name;
    /** @type {?} */
    FieldComponent.prototype.type;
    /** @type {?} */
    FieldComponent.prototype.format;
    /** @type {?} */
    FieldComponent.prototype.required;
    /** @type {?} */
    FieldComponent.prototype.readOnly;
    /** @type {?} */
    FieldComponent.prototype.title;
    /** @type {?} */
    FieldComponent.prototype.description;
    /** @type {?} */
    FieldComponent.prototype.placeholder;
    /** @type {?} */
    FieldComponent.prototype.widget;
    /** @type {?} */
    FieldComponent.prototype.validator;
    /** @type {?} */
    FieldComponent.prototype.schema;
    /**
     * @type {?}
     * @private
     */
    FieldComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    FieldComponent.prototype.templateSchemaService;
    /**
     * @type {?}
     * @protected
     */
    FieldComponent.prototype.actionRegistry;
}
//# sourceMappingURL=data:application/json;base64,