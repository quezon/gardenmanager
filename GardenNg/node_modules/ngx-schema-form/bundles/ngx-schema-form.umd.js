(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/operators'), require('z-schema'), require('jexl'), require('@angular/forms'), require('@angular/common'), require('@angular/core'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('ngx-schema-form', ['exports', 'rxjs/operators', 'z-schema', 'jexl', '@angular/forms', '@angular/common', '@angular/core', 'rxjs'], factory) :
    (factory((global['ngx-schema-form'] = {}),global.rxjs.operators,global.ZSchema,global.JEXL,global.ng.forms,global.ng.common,global.ng.core,global.rxjs));
}(this, (function (exports,operators,ZSchema,JEXL,forms,common,core,rxjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ActionRegistry = /** @class */ (function () {
        function ActionRegistry() {
            this.actions = {};
        }
        /**
         * @return {?}
         */
        ActionRegistry.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.actions = {};
            };
        /**
         * @param {?} actionId
         * @param {?} action
         * @return {?}
         */
        ActionRegistry.prototype.register = /**
         * @param {?} actionId
         * @param {?} action
         * @return {?}
         */
            function (actionId, action) {
                this.actions[actionId] = action;
            };
        /**
         * @param {?} actionId
         * @return {?}
         */
        ActionRegistry.prototype.get = /**
         * @param {?} actionId
         * @return {?}
         */
            function (actionId) {
                return this.actions[actionId];
            };
        return ActionRegistry;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ FormProperty = /** @class */ (function () {
        function FormProperty(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path) {
            this.validatorRegistry = validatorRegistry;
            this.schema = schema;
            this._value = null;
            this._errors = null;
            this._valueChanges = new rxjs.BehaviorSubject(null);
            this._errorsChanges = new rxjs.BehaviorSubject(null);
            this._visible = true;
            this._visibilityChanges = new rxjs.BehaviorSubject(true);
            this.schemaValidator = schemaValidatorFactory.createValidatorFn(this.schema);
            this.expressionCompilerVisibiltyIf = expressionCompilerFactory.createExpressionCompilerVisibilityIf();
            this._parent = parent;
            if (parent) {
                this._root = parent.root;
            }
            else if (this instanceof PropertyGroup) {
                this._root = ( /** @type {?} */(( /** @type {?} */(this))));
                this._rootName = this.createRootName();
            }
            this._path = path;
        }
        Object.defineProperty(FormProperty.prototype, "_canonicalPath", {
            /**
             * Provides the unique path of this form element.<br/>
             * E.g.:
             * <code>/garage/cars</code>,<br/>
             * <code>/shop/book/0/page/1/</code>
             */
            get: /**
             * Provides the unique path of this form element.<br/>
             * E.g.:
             * <code>/garage/cars</code>,<br/>
             * <code>/shop/book/0/page/1/</code>
             * @return {?}
             */ function () { return this.__canonicalPath; },
            set: /**
             * @param {?} canonicalPath
             * @return {?}
             */ function (canonicalPath) {
                this.__canonicalPath = canonicalPath;
                this.__canonicalPathNotation = (this.__canonicalPath || '')
                    .replace(new RegExp('^/', 'ig'), '')
                    .replace(new RegExp('/$', 'ig'), '')
                    .replace(new RegExp('/', 'ig'), '.');
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormProperty.prototype, "canonicalPathNotation", {
            /**
             * Uses the unique path provided by the property <code>_canonicalPath</code><br/>
             * but converts it to a HTML Element Attribute ID compliant format.<br/>
             * E.g.:
             * <code>garage.cars</code>,<br/>
             * <code>shop.book.0.page.1.</code>
             */
            get: /**
             * Uses the unique path provided by the property <code>_canonicalPath</code><br/>
             * but converts it to a HTML Element Attribute ID compliant format.<br/>
             * E.g.:
             * <code>garage.cars</code>,<br/>
             * <code>shop.book.0.page.1.</code>
             * @return {?}
             */ function () { return this.__canonicalPathNotation; },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormProperty.prototype, "rootName", {
            /**
             * Provides the HTML Element Attribute ID/NAME compliant representation
             * of the root element.<br/>
             * Represents the HTML FORM NAME.<br/>
             * Only the root <code>FormProperty</code> will provide a value here.
             */
            get: /**
             * Provides the HTML Element Attribute ID/NAME compliant representation
             * of the root element.<br/>
             * Represents the HTML FORM NAME.<br/>
             * Only the root <code>FormProperty</code> will provide a value here.
             * @return {?}
             */ function () { return this._rootName; },
            enumerable: true,
            configurable: true
        });
        /**
         * Creates the HTML ID and NAME attribute compliant string.
         */
        /**
         * Creates the HTML ID and NAME attribute compliant string.
         * @private
         * @return {?}
         */
        FormProperty.prototype.createRootName = /**
         * Creates the HTML ID and NAME attribute compliant string.
         * @private
         * @return {?}
         */
            function () {
                if (this.schema && this.schema['name']) {
                    return this._rootName = this.schema['name'].replace(new RegExp('[\\s]+', 'ig'), '_');
                }
                return '';
            };
        Object.defineProperty(FormProperty.prototype, "valueChanges", {
            get: /**
             * @return {?}
             */ function () {
                return this._valueChanges;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormProperty.prototype, "errorsChanges", {
            get: /**
             * @return {?}
             */ function () {
                return this._errorsChanges;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormProperty.prototype, "type", {
            get: /**
             * @return {?}
             */ function () {
                return this.schema.type;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormProperty.prototype, "parent", {
            get: /**
             * @return {?}
             */ function () {
                return this._parent;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormProperty.prototype, "root", {
            get: /**
             * @return {?}
             */ function () {
                return this._root || ( /** @type {?} */(( /** @type {?} */(this))));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormProperty.prototype, "path", {
            get: /**
             * @return {?}
             */ function () {
                return this._path;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormProperty.prototype, "value", {
            get: /**
             * @return {?}
             */ function () {
                return this._value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormProperty.prototype, "visible", {
            get: /**
             * @return {?}
             */ function () {
                return this._visible;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FormProperty.prototype, "valid", {
            get: /**
             * @return {?}
             */ function () {
                return this._errors === null;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?=} onlySelf
         * @param {?=} emitEvent
         * @return {?}
         */
        FormProperty.prototype.updateValueAndValidity = /**
         * @param {?=} onlySelf
         * @param {?=} emitEvent
         * @return {?}
         */
            function (onlySelf, emitEvent) {
                if (onlySelf === void 0) {
                    onlySelf = false;
                }
                if (emitEvent === void 0) {
                    emitEvent = true;
                }
                this._updateValue();
                if (emitEvent) {
                    this.valueChanges.next(this.value);
                }
                this._runValidation();
                if (this.parent && !onlySelf) {
                    this.parent.updateValueAndValidity(onlySelf, emitEvent);
                }
            };
        /**
         * @internal
         */
        /**
         * \@internal
         * @return {?}
         */
        FormProperty.prototype._runValidation = /**
         * \@internal
         * @return {?}
         */
            function () {
                /** @type {?} */
                var errors = this.schemaValidator(this._value) || [];
                /** @type {?} */
                var customValidator = this.validatorRegistry.get(this.path);
                if (customValidator) {
                    /** @type {?} */
                    var customErrors = customValidator(this.value, this, this.findRoot());
                    errors = this.mergeErrors(errors, customErrors);
                }
                if (errors.length === 0) {
                    errors = null;
                }
                this._errors = errors;
                this.setErrors(this._errors);
            };
        /**
         * @private
         * @param {?} errors
         * @param {?} newErrors
         * @return {?}
         */
        FormProperty.prototype.mergeErrors = /**
         * @private
         * @param {?} errors
         * @param {?} newErrors
         * @return {?}
         */
            function (errors, newErrors) {
                if (newErrors) {
                    if (Array.isArray(newErrors)) {
                        errors = errors.concat.apply(errors, __spread(newErrors));
                    }
                    else {
                        errors.push(newErrors);
                    }
                }
                return errors;
            };
        /**
         * @private
         * @param {?} errors
         * @return {?}
         */
        FormProperty.prototype.setErrors = /**
         * @private
         * @param {?} errors
         * @return {?}
         */
            function (errors) {
                this._errors = errors;
                this._errorsChanges.next(errors);
            };
        /**
         * @param {?} errors
         * @return {?}
         */
        FormProperty.prototype.extendErrors = /**
         * @param {?} errors
         * @return {?}
         */
            function (errors) {
                errors = this.mergeErrors(this._errors || [], errors);
                this.setErrors(errors);
            };
        /**
         * @param {?} path
         * @return {?}
         */
        FormProperty.prototype.searchProperty = /**
         * @param {?} path
         * @return {?}
         */
            function (path) {
                /** @type {?} */
                var prop = this;
                /** @type {?} */
                var base = null;
                /** @type {?} */
                var result = null;
                if (path[0] === '/') {
                    base = this.findRoot();
                    result = base.getProperty(path.substr(1));
                }
                else {
                    while (result === null && prop.parent !== null) {
                        prop = base = prop.parent;
                        result = base.getProperty(path);
                    }
                }
                return result;
            };
        /**
         * @return {?}
         */
        FormProperty.prototype.findRoot = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var property = this;
                while (property.parent !== null) {
                    property = property.parent;
                }
                return ( /** @type {?} */(property));
            };
        /**
         * @private
         * @param {?} visible
         * @return {?}
         */
        FormProperty.prototype.setVisible = /**
         * @private
         * @param {?} visible
         * @return {?}
         */
            function (visible) {
                this._visible = visible;
                this._visibilityChanges.next(visible);
                this.updateValueAndValidity();
                if (this.parent) {
                    this.parent.updateValueAndValidity(false, true);
                }
            };
        /**
         * Making use of the expression compiler for the <code>visibleIf</code> condition
         */
        /**
         * Making use of the expression compiler for the <code>visibleIf</code> condition
         * @private
         * @param {?} sourceProperty
         * @param {?} targetProperty
         * @param {?} dependencyPath
         * @param {?=} value
         * @param {?=} expression
         * @return {?}
         */
        FormProperty.prototype.__evaluateVisibilityIf = /**
         * Making use of the expression compiler for the <code>visibleIf</code> condition
         * @private
         * @param {?} sourceProperty
         * @param {?} targetProperty
         * @param {?} dependencyPath
         * @param {?=} value
         * @param {?=} expression
         * @return {?}
         */
            function (sourceProperty, targetProperty, dependencyPath, value, expression) {
                var e_1, _a;
                if (value === void 0) {
                    value = '';
                }
                if (expression === void 0) {
                    expression = '';
                }
                try {
                    /** @type {?} */
                    var valid = false;
                    if (expression.indexOf('$ANY$') !== -1) {
                        valid = value && value.length > 0;
                    }
                    else if ((expression || []).toString().indexOf('$EXP$') === 0) {
                        // since visibleIf condition values are an array... we must do this
                        /** @type {?} */
                        var expArray = Array.isArray(expression) ? expression : (expression ? [expression] : []);
                        try {
                            for (var expArray_1 = __values(expArray), expArray_1_1 = expArray_1.next(); !expArray_1_1.done; expArray_1_1 = expArray_1.next()) {
                                var expString = expArray_1_1.value;
                                /** @type {?} */
                                var _expresssion = expString.substring('$EXP$'.length);
                                valid = true === this.expressionCompilerVisibiltyIf.evaluate(_expresssion, {
                                    source: sourceProperty,
                                    target: targetProperty
                                });
                                if (valid) {
                                    break;
                                }
                            }
                        }
                        catch (e_1_1) {
                            e_1 = { error: e_1_1 };
                        }
                        finally {
                            try {
                                if (expArray_1_1 && !expArray_1_1.done && (_a = expArray_1.return))
                                    _a.call(expArray_1);
                            }
                            finally {
                                if (e_1)
                                    throw e_1.error;
                            }
                        }
                    }
                    else {
                        valid = expression.indexOf(value) !== -1;
                    }
                    return valid;
                }
                catch (error) {
                    console.error('Error processing "VisibileIf" expression for path: ', dependencyPath, "source - " + sourceProperty._canonicalPath + ": ", sourceProperty, "target - " + targetProperty._canonicalPath + ": ", targetProperty, 'value:', value, 'expression: ', expression, 'error: ', error);
                }
            };
        /**
         * @private
         * @return {?}
         */
        FormProperty.prototype.__bindVisibility = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                var e_2, _a;
                /**
                 * <pre>
                 *     "oneOf":[{
                 *         "path":["value","value"]
                 *     },{
                 *         "path":["value","value"]
                 *     }]
                 *     </pre>
                 * <pre>
                 *     "allOf":[{
                 *         "path":["value","value"]
                 *     },{
                 *         "path":["value","value"]
                 *     }]
                 *     </pre>
                 * @type {?}
                 */
                var visibleIfProperty = this.schema.visibleIf;
                /** @type {?} */
                var visibleIfOf = (visibleIfProperty || {}).oneOf || (visibleIfProperty || {}).allOf;
                if (visibleIfOf) {
                    var _loop_1 = function (visibleIf) {
                        if (typeof visibleIf === 'object' && Object.keys(visibleIf).length === 0) {
                            this_1.setVisible(false);
                        }
                        else if (visibleIf !== undefined) {
                            /** @type {?} */
                            var propertiesBinding = [];
                            var _loop_2 = function (dependencyPath) {
                                var e_3, _a;
                                if (visibleIf.hasOwnProperty(dependencyPath)) {
                                    /** @type {?} */
                                    var properties = this_1.findProperties(this_1, dependencyPath);
                                    if ((properties || []).length) {
                                        var _loop_3 = function (property) {
                                            if (property) {
                                                /** @type {?} */
                                                var valueCheck = void 0;
                                                if (this_1.schema.visibleIf.oneOf) {
                                                    valueCheck = property.valueChanges.pipe(operators.map(( /**
                                                     * @param {?} value
                                                     * @return {?}
                                                     */function (value) { return _this.__evaluateVisibilityIf(_this, property, dependencyPath, value, visibleIf[dependencyPath]); })));
                                                }
                                                else if (this_1.schema.visibleIf.allOf) {
                                                    /** @type {?} */
                                                    var _chk = ( /**
                                                     * @param {?} value
                                                     * @return {?}
                                                     */function (value) {
                                                        var e_4, _a, e_5, _b;
                                                        try {
                                                            for (var _c = __values(_this.schema.visibleIf.allOf), _d = _c.next(); !_d.done; _d = _c.next()) {
                                                                var item = _d.value;
                                                                try {
                                                                    for (var _e = __values(Object.keys(item)), _f = _e.next(); !_f.done; _f = _e.next()) {
                                                                        var depPath = _f.value;
                                                                        /** @type {?} */
                                                                        var prop = _this.searchProperty(depPath);
                                                                        /** @type {?} */
                                                                        var propVal = prop.value;
                                                                        if (!_this.__evaluateVisibilityIf(_this, prop, dependencyPath, propVal, item[depPath])) {
                                                                            return false;
                                                                        }
                                                                    }
                                                                }
                                                                catch (e_5_1) {
                                                                    e_5 = { error: e_5_1 };
                                                                }
                                                                finally {
                                                                    try {
                                                                        if (_f && !_f.done && (_b = _e.return))
                                                                            _b.call(_e);
                                                                    }
                                                                    finally {
                                                                        if (e_5)
                                                                            throw e_5.error;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        catch (e_4_1) {
                                                            e_4 = { error: e_4_1 };
                                                        }
                                                        finally {
                                                            try {
                                                                if (_d && !_d.done && (_a = _c.return))
                                                                    _a.call(_c);
                                                            }
                                                            finally {
                                                                if (e_4)
                                                                    throw e_4.error;
                                                            }
                                                        }
                                                        return true;
                                                    });
                                                    valueCheck = property.valueChanges.pipe(operators.map(_chk));
                                                }
                                                /** @type {?} */
                                                var visibilityCheck = property._visibilityChanges;
                                                /** @type {?} */
                                                var and = rxjs.combineLatest([valueCheck, visibilityCheck], ( /**
                                                 * @param {?} v1
                                                 * @param {?} v2
                                                 * @return {?}
                                                 */function (v1, v2) { return v1 && v2; }));
                                                propertiesBinding.push(and);
                                            }
                                        };
                                        try {
                                            for (var properties_1 = __values(properties), properties_1_1 = properties_1.next(); !properties_1_1.done; properties_1_1 = properties_1.next()) {
                                                var property = properties_1_1.value;
                                                _loop_3(property);
                                            }
                                        }
                                        catch (e_3_1) {
                                            e_3 = { error: e_3_1 };
                                        }
                                        finally {
                                            try {
                                                if (properties_1_1 && !properties_1_1.done && (_a = properties_1.return))
                                                    _a.call(properties_1);
                                            }
                                            finally {
                                                if (e_3)
                                                    throw e_3.error;
                                            }
                                        }
                                    }
                                    else {
                                        console.warn('Can\'t find property ' + dependencyPath + ' for visibility check of ' + this_1.path);
                                        this_1.registerMissingVisibilityBinding(dependencyPath, this_1);
                                        // not visible if not existent
                                        this_1.setVisible(false);
                                    }
                                }
                            };
                            for (var dependencyPath in visibleIf) {
                                _loop_2(dependencyPath);
                            }
                            rxjs.combineLatest(propertiesBinding, ( /**
                             * @param {...?} values
                             * @return {?}
                             */function () {
                                var values = [];
                                for (var _i = 0; _i < arguments.length; _i++) {
                                    values[_i] = arguments[_i];
                                }
                                return values.indexOf(true) !== -1;
                            })).pipe(operators.distinctUntilChanged()).subscribe(( /**
                             * @param {?} visible
                             * @return {?}
                             */function (visible) {
                                _this.setVisible(visible);
                            }));
                        }
                    };
                    var this_1 = this;
                    try {
                        for (var visibleIfOf_1 = __values(visibleIfOf), visibleIfOf_1_1 = visibleIfOf_1.next(); !visibleIfOf_1_1.done; visibleIfOf_1_1 = visibleIfOf_1.next()) {
                            var visibleIf = visibleIfOf_1_1.value;
                            _loop_1(visibleIf);
                        }
                    }
                    catch (e_2_1) {
                        e_2 = { error: e_2_1 };
                    }
                    finally {
                        try {
                            if (visibleIfOf_1_1 && !visibleIfOf_1_1.done && (_a = visibleIfOf_1.return))
                                _a.call(visibleIfOf_1);
                        }
                        finally {
                            if (e_2)
                                throw e_2.error;
                        }
                    }
                    return true;
                }
            };
        // A field is visible if AT LEAST ONE of the properties it depends on is visible AND has a value in the list
        // A field is visible if AT LEAST ONE of the properties it depends on is visible AND has a value in the list
        /**
         * @return {?}
         */
        FormProperty.prototype._bindVisibility =
            // A field is visible if AT LEAST ONE of the properties it depends on is visible AND has a value in the list
            /**
             * @return {?}
             */
            function () {
                var _this = this;
                if (this.__bindVisibility())
                    return;
                /** @type {?} */
                var visibleIf = this.schema.visibleIf;
                if (typeof visibleIf === 'object' && Object.keys(visibleIf).length === 0) {
                    this.setVisible(false);
                }
                else if (visibleIf !== undefined) {
                    /** @type {?} */
                    var propertiesBinding = [];
                    var _loop_4 = function (dependencyPath) {
                        var e_6, _a;
                        if (visibleIf.hasOwnProperty(dependencyPath)) {
                            /** @type {?} */
                            var properties = this_2.findProperties(this_2, dependencyPath);
                            if ((properties || []).length) {
                                var _loop_5 = function (property) {
                                    if (property) {
                                        /** @type {?} */
                                        var valueCheck = property.valueChanges.pipe(operators.map(( /**
                                         * @param {?} value
                                         * @return {?}
                                         */function (value) { return _this.__evaluateVisibilityIf(_this, property, dependencyPath, value, visibleIf[dependencyPath]); })));
                                        /** @type {?} */
                                        var visibilityCheck = property._visibilityChanges;
                                        /** @type {?} */
                                        var and = rxjs.combineLatest([valueCheck, visibilityCheck], ( /**
                                         * @param {?} v1
                                         * @param {?} v2
                                         * @return {?}
                                         */function (v1, v2) { return v1 && v2; }));
                                        propertiesBinding.push(and);
                                    }
                                };
                                try {
                                    for (var properties_2 = __values(properties), properties_2_1 = properties_2.next(); !properties_2_1.done; properties_2_1 = properties_2.next()) {
                                        var property = properties_2_1.value;
                                        _loop_5(property);
                                    }
                                }
                                catch (e_6_1) {
                                    e_6 = { error: e_6_1 };
                                }
                                finally {
                                    try {
                                        if (properties_2_1 && !properties_2_1.done && (_a = properties_2.return))
                                            _a.call(properties_2);
                                    }
                                    finally {
                                        if (e_6)
                                            throw e_6.error;
                                    }
                                }
                            }
                            else {
                                console.warn('Can\'t find property ' + dependencyPath + ' for visibility check of ' + this_2.path);
                                this_2.registerMissingVisibilityBinding(dependencyPath, this_2);
                                // not visible if not existent
                                this_2.setVisible(false);
                            }
                        }
                    };
                    var this_2 = this;
                    for (var dependencyPath in visibleIf) {
                        _loop_4(dependencyPath);
                    }
                    rxjs.combineLatest(propertiesBinding, ( /**
                     * @param {...?} values
                     * @return {?}
                     */function () {
                        var values = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            values[_i] = arguments[_i];
                        }
                        return values.indexOf(true) !== -1;
                    })).pipe(operators.distinctUntilChanged()).subscribe(( /**
                     * @param {?} visible
                     * @return {?}
                     */function (visible) {
                        _this.setVisible(visible);
                    }));
                }
            };
        /**
         * @private
         * @param {?} dependencyPath
         * @param {?} formProperty
         * @return {?}
         */
        FormProperty.prototype.registerMissingVisibilityBinding = /**
         * @private
         * @param {?} dependencyPath
         * @param {?} formProperty
         * @return {?}
         */
            function (dependencyPath, formProperty) {
                formProperty._propertyBindingRegistry.getPropertyBindingsVisibility().add(dependencyPath, formProperty.path);
            };
        /**
         * Finds all <code>formProperties</code> from a path with wildcards.<br/>
         * e.g: <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>
         * @param target
         * @param propertyPath
         */
        /**
         * Finds all <code>formProperties</code> from a path with wildcards.<br/>
         * e.g: <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>
         * @param {?} target
         * @param {?} propertyPath
         * @return {?}
         */
        FormProperty.prototype.findProperties = /**
         * Finds all <code>formProperties</code> from a path with wildcards.<br/>
         * e.g: <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>
         * @param {?} target
         * @param {?} propertyPath
         * @return {?}
         */
            function (target, propertyPath) {
                var e_7, _a;
                /** @type {?} */
                var props = [];
                /** @type {?} */
                var paths = this.findPropertyPaths(target, propertyPath);
                try {
                    for (var paths_1 = __values(paths), paths_1_1 = paths_1.next(); !paths_1_1.done; paths_1_1 = paths_1.next()) {
                        var path = paths_1_1.value;
                        /** @type {?} */
                        var p = target.searchProperty(path);
                        if (p) {
                            props.push(p);
                        }
                    }
                }
                catch (e_7_1) {
                    e_7 = { error: e_7_1 };
                }
                finally {
                    try {
                        if (paths_1_1 && !paths_1_1.done && (_a = paths_1.return))
                            _a.call(paths_1);
                    }
                    finally {
                        if (e_7)
                            throw e_7.error;
                    }
                }
                return props;
            };
        /**
         * Creates canonical paths from a path with wildcards.
         * e.g:<br/>
         * From:<br/>
         * <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>
         * it creates:<br/>
         * <code>/garage/cars/0/tires/0/name</code><br/>
         * <code>/garage/cars/0/tires/1/name</code><br/>
         * <code>/garage/cars/0/tires/2/name</code><br/>
         * <code>/garage/cars/0/tires/3/name</code><br/>
         * <code>/garage/cars/1/tires/0/name</code><br/>
         * <code>/garage/cars/2/tires/1/name</code><br/>
         * <code>/garage/cars/3/tires/2/name</code><br/>
         * <code>/garage/cars/3/tires/3/name</code><br/>
         * <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>
         * <code>/garage/cars/&#42;/tires/2/name</code><br/>
         * <code>/garage/cars/&#42;/tires/3/name</code><br/>
         * <br/>etc...
         * @param target
         * @param path
         * @param parentPath
         */
        /**
         * Creates canonical paths from a path with wildcards.
         * e.g:<br/>
         * From:<br/>
         * <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>
         * it creates:<br/>
         * <code>/garage/cars/0/tires/0/name</code><br/>
         * <code>/garage/cars/0/tires/1/name</code><br/>
         * <code>/garage/cars/0/tires/2/name</code><br/>
         * <code>/garage/cars/0/tires/3/name</code><br/>
         * <code>/garage/cars/1/tires/0/name</code><br/>
         * <code>/garage/cars/2/tires/1/name</code><br/>
         * <code>/garage/cars/3/tires/2/name</code><br/>
         * <code>/garage/cars/3/tires/3/name</code><br/>
         * <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>
         * <code>/garage/cars/&#42;/tires/2/name</code><br/>
         * <code>/garage/cars/&#42;/tires/3/name</code><br/>
         * <br/>etc...
         * @param {?} target
         * @param {?} path
         * @param {?=} parentPath
         * @return {?}
         */
        FormProperty.prototype.findPropertyPaths = /**
         * Creates canonical paths from a path with wildcards.
         * e.g:<br/>
         * From:<br/>
         * <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>
         * it creates:<br/>
         * <code>/garage/cars/0/tires/0/name</code><br/>
         * <code>/garage/cars/0/tires/1/name</code><br/>
         * <code>/garage/cars/0/tires/2/name</code><br/>
         * <code>/garage/cars/0/tires/3/name</code><br/>
         * <code>/garage/cars/1/tires/0/name</code><br/>
         * <code>/garage/cars/2/tires/1/name</code><br/>
         * <code>/garage/cars/3/tires/2/name</code><br/>
         * <code>/garage/cars/3/tires/3/name</code><br/>
         * <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>
         * <code>/garage/cars/&#42;/tires/2/name</code><br/>
         * <code>/garage/cars/&#42;/tires/3/name</code><br/>
         * <br/>etc...
         * @param {?} target
         * @param {?} path
         * @param {?=} parentPath
         * @return {?}
         */
            function (target, path, parentPath) {
                /** @type {?} */
                var ix = path.indexOf('*');
                if (-1 !== ix) {
                    /** @type {?} */
                    var prePath = ix > -1 ? path.substring(0, ix - 1) : path;
                    /** @type {?} */
                    var subPath = ix > -1 ? path.substring(ix + 1) : path;
                    /** @type {?} */
                    var prop = target.searchProperty(prePath);
                    /** @type {?} */
                    var pathFound = [];
                    if (prop instanceof PropertyGroup) {
                        /** @type {?} */
                        var arrProp = ( /** @type {?} */(prop.properties));
                        for (var i = 0; i < arrProp.length; i++) {
                            /** @type {?} */
                            var curreItemPath = (parentPath || '') + prePath + (prePath.endsWith('/') ? '' : '/') + i + subPath;
                            /** @type {?} */
                            var curreItemPrePath = (parentPath || '') + prePath + i;
                            if (-1 === curreItemPath.indexOf('*')) {
                                pathFound.push(curreItemPath);
                            }
                            /** @type {?} */
                            var childrenPathFound = this.findPropertyPaths(arrProp[i], subPath, curreItemPrePath);
                            pathFound = pathFound.concat(childrenPathFound);
                        }
                    }
                    return pathFound;
                }
                return [path];
            };
        return FormProperty;
    }());
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ PropertyGroup = /** @class */ (function (_super) {
        __extends(PropertyGroup, _super);
        function PropertyGroup() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._properties = null;
            _this._propertyProxyHandler = {
                /**
                 * When a new item is added it will be checked for visibility updates to proceed <br/>
                 * if any other field has a binding reference to it.<br/>
                 */
                set: /**
                 * When a new item is added it will be checked for visibility updates to proceed <br/>
                 * if any other field has a binding reference to it.<br/>
                 * @param {?} target
                 * @param {?} p
                 * @param {?} value
                 * @param {?} receiver
                 * @return {?}
                 */ function (target, p, value, receiver) {
                    /**
                     * 1) Make sure a canonical path is set
                     * @type {?}
                     */
                    var assertCanonicalPath = ( /**
                     * @param {?} propertyValue
                     * @return {?}
                     */function (propertyValue) {
                        var e_8, _a;
                        /** @type {?} */
                        var formProperty = ( /** @type {?} */(propertyValue));
                        if (Array.isArray(target) && propertyValue instanceof FormProperty) {
                            /**
                             * Create a canonical path replacing the last '*' with the elements position in array
                             * \@param propertyPath
                             * \@param indexOfChild
                             * @type {?}
                             */
                            var getCanonicalPath = ( /**
                             * @param {?} propertyPath
                             * @param {?} indexOfChild
                             * @return {?}
                             */function (propertyPath, indexOfChild) {
                                /** @type {?} */
                                var pos;
                                if (propertyPath && -1 !== (pos = propertyPath.lastIndexOf('*'))) {
                                    return propertyPath.substring(0, pos) + indexOfChild.toString() + propertyPath.substring(pos + 1);
                                }
                            });
                            if (formProperty) {
                                formProperty._canonicalPath = getCanonicalPath(formProperty._canonicalPath, ( /** @type {?} */(p)));
                            }
                        }
                        /** @type {?} */
                        var propertyGroup = ( /** @type {?} */(formProperty));
                        /** @type {?} */
                        var propertyGroupChildren = ( /** @type {?} */((Array.isArray(propertyGroup.properties) ?
                            propertyGroup.properties :
                            Object.values(propertyGroup.properties || {}))));
                        if ((formProperty.path || '').endsWith('/*')) {
                            try {
                                /**
                                 * If it is an array, then all children canonical paths must be computed now.
                                 * The children don't have the parent's path segment set yet,
                                 * because they are created before the parent gets attached to its parent.
                                 */
                                for (var propertyGroupChildren_1 = __values(propertyGroupChildren), propertyGroupChildren_1_1 = propertyGroupChildren_1.next(); !propertyGroupChildren_1_1.done; propertyGroupChildren_1_1 = propertyGroupChildren_1.next()) {
                                    var child = propertyGroupChildren_1_1.value;
                                    child._canonicalPath = formProperty._canonicalPath + child._canonicalPath.substring(formProperty.path.length);
                                }
                            }
                            catch (e_8_1) {
                                e_8 = { error: e_8_1 };
                            }
                            finally {
                                try {
                                    if (propertyGroupChildren_1_1 && !propertyGroupChildren_1_1.done && (_a = propertyGroupChildren_1.return))
                                        _a.call(propertyGroupChildren_1);
                                }
                                finally {
                                    if (e_8)
                                        throw e_8.error;
                                }
                            }
                        }
                        return { property: formProperty, children: propertyGroupChildren };
                    });
                    var _a = assertCanonicalPath(value), property = _a.property, children = _a.children;
                    /**
                     * 2) Add the new property before rebinding, so it can be found by <code>_bindVisibility</code>
                     * @type {?}
                     */
                    var result = target[( /** @type {?} */(p))] = value;
                    /**
                     * 3) Re-bind the visibility bindings referencing to this canonical paths
                     * @type {?}
                     */
                    var rebindVisibility = ( /**
                     * @return {?}
                     */function () {
                        var e_9, _a, e_10, _b;
                        /** @type {?} */
                        var rebindAll = [property].concat(children);
                        /** @type {?} */
                        var findPropertiesToRebind = ( /**
                         * @param {?} formProperty
                         * @return {?}
                         */function (formProperty) {
                            var e_11, _a;
                            /** @type {?} */
                            var propertyBindings = formProperty._propertyBindingRegistry.getPropertyBindingsVisibility();
                            /** @type {?} */
                            var rebind = [];
                            if (formProperty._canonicalPath) {
                                rebind = rebind.concat(rebind.concat(propertyBindings.findByDependencyPath(formProperty._canonicalPath) || []));
                                if (formProperty._canonicalPath.startsWith('/')) {
                                    rebind = rebind.concat(rebind.concat(propertyBindings.findByDependencyPath(formProperty._canonicalPath.substring(1)) || []));
                                }
                            }
                            rebind = rebind.concat(propertyBindings.findByDependencyPath(formProperty.path) || []);
                            if (formProperty.path.startsWith('/')) {
                                rebind = rebind.concat(rebind.concat(propertyBindings.findByDependencyPath(formProperty.path.substring(1)) || []));
                            }
                            /** @type {?} */
                            var uniqueValues = {};
                            try {
                                for (var rebind_1 = __values(rebind), rebind_1_1 = rebind_1.next(); !rebind_1_1.done; rebind_1_1 = rebind_1.next()) {
                                    var item = rebind_1_1.value;
                                    uniqueValues[item] = item;
                                }
                            }
                            catch (e_11_1) {
                                e_11 = { error: e_11_1 };
                            }
                            finally {
                                try {
                                    if (rebind_1_1 && !rebind_1_1.done && (_a = rebind_1.return))
                                        _a.call(rebind_1);
                                }
                                finally {
                                    if (e_11)
                                        throw e_11.error;
                                }
                            }
                            return Object.keys(uniqueValues);
                        });
                        try {
                            for (var rebindAll_1 = __values(rebindAll), rebindAll_1_1 = rebindAll_1.next(); !rebindAll_1_1.done; rebindAll_1_1 = rebindAll_1.next()) {
                                var _property = rebindAll_1_1.value;
                                if (_property instanceof FormProperty) {
                                    try {
                                        /** @type {?} */
                                        var rebindPaths = findPropertiesToRebind(_property);
                                        try {
                                            for (var rebindPaths_1 = __values(rebindPaths), rebindPaths_1_1 = rebindPaths_1.next(); !rebindPaths_1_1.done; rebindPaths_1_1 = rebindPaths_1.next()) {
                                                var rebindPropPath = rebindPaths_1_1.value;
                                                /** @type {?} */
                                                var rebindProp = _property.searchProperty(rebindPropPath);
                                                rebindProp._bindVisibility();
                                            }
                                        }
                                        catch (e_10_1) {
                                            e_10 = { error: e_10_1 };
                                        }
                                        finally {
                                            try {
                                                if (rebindPaths_1_1 && !rebindPaths_1_1.done && (_b = rebindPaths_1.return))
                                                    _b.call(rebindPaths_1);
                                            }
                                            finally {
                                                if (e_10)
                                                    throw e_10.error;
                                            }
                                        }
                                    }
                                    catch (e) {
                                        console.error('Rebinding visibility error at path:', _property.path, 'property:', _property, e);
                                    }
                                }
                            }
                        }
                        catch (e_9_1) {
                            e_9 = { error: e_9_1 };
                        }
                        finally {
                            try {
                                if (rebindAll_1_1 && !rebindAll_1_1.done && (_a = rebindAll_1.return))
                                    _a.call(rebindAll_1);
                            }
                            finally {
                                if (e_9)
                                    throw e_9.error;
                            }
                        }
                    });
                    rebindVisibility();
                    return result;
                },
                get: /**
                 * @param {?} target
                 * @param {?} p
                 * @param {?} receiver
                 * @return {?}
                 */ function (target, p, receiver) {
                    return target[( /** @type {?} */(p))];
                },
                deleteProperty: /**
                 * @param {?} target
                 * @param {?} p
                 * @return {?}
                 */ function (target, p) {
                    return delete target[( /** @type {?} */(p))];
                }
            };
            return _this;
        }
        Object.defineProperty(PropertyGroup.prototype, "properties", {
            get: /**
             * @return {?}
             */ function () {
                return this._properties;
            },
            set: /**
             * @param {?} properties
             * @return {?}
             */ function (properties) {
                /**
                 * Override the setter to add an observer that notices when an item is added or removed.<br/>
                 */
                this._properties = new Proxy(properties, this._propertyProxyHandler);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} path
         * @return {?}
         */
        PropertyGroup.prototype.getProperty = /**
         * @param {?} path
         * @return {?}
         */
            function (path) {
                /** @type {?} */
                var subPathIdx = path.indexOf('/');
                /** @type {?} */
                var propertyId = subPathIdx !== -1 ? path.substr(0, subPathIdx) : path;
                /** @type {?} */
                var property = this.properties[propertyId];
                if (property !== null && subPathIdx !== -1 && property instanceof PropertyGroup) {
                    /** @type {?} */
                    var subPath = path.substr(subPathIdx + 1);
                    property = (( /** @type {?} */(property))).getProperty(subPath);
                }
                return property;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        PropertyGroup.prototype.forEachChild = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                for (var propertyId in this.properties) {
                    if (this.properties.hasOwnProperty(propertyId)) {
                        /** @type {?} */
                        var property = this.properties[propertyId];
                        fn(property, propertyId);
                    }
                }
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        PropertyGroup.prototype.forEachChildRecursive = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.forEachChild(( /**
                 * @param {?} child
                 * @return {?}
                 */function (child) {
                    fn(child);
                    if (child instanceof PropertyGroup) {
                        (( /** @type {?} */(child))).forEachChildRecursive(fn);
                    }
                }));
            };
        /**
         * @return {?}
         */
        PropertyGroup.prototype._bindVisibility = /**
         * @return {?}
         */
            function () {
                _super.prototype._bindVisibility.call(this);
                this._bindVisibilityRecursive();
            };
        /**
         * @private
         * @return {?}
         */
        PropertyGroup.prototype._bindVisibilityRecursive = /**
         * @private
         * @return {?}
         */
            function () {
                this.forEachChildRecursive(( /**
                 * @param {?} property
                 * @return {?}
                 */function (property) {
                    property._bindVisibility();
                }));
            };
        /**
         * @return {?}
         */
        PropertyGroup.prototype.isRoot = /**
         * @return {?}
         */
            function () {
                return this === this.root;
            };
        return PropertyGroup;
    }(FormProperty));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PROPERTY_TYPE_MAPPING = {};

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormPropertyFactory = /** @class */ (function () {
        function FormPropertyFactory(schemaValidatorFactory, validatorRegistry, propertyBindingRegistry, expressionCompilerFactory) {
            this.schemaValidatorFactory = schemaValidatorFactory;
            this.validatorRegistry = validatorRegistry;
            this.propertyBindingRegistry = propertyBindingRegistry;
            this.expressionCompilerFactory = expressionCompilerFactory;
        }
        /**
         * @param {?} schema
         * @param {?=} parent
         * @param {?=} propertyId
         * @return {?}
         */
        FormPropertyFactory.prototype.createProperty = /**
         * @param {?} schema
         * @param {?=} parent
         * @param {?=} propertyId
         * @return {?}
         */
            function (schema, parent, propertyId) {
                if (parent === void 0) {
                    parent = null;
                }
                /** @type {?} */
                var newProperty = null;
                /** @type {?} */
                var path = '';
                /** @type {?} */
                var _canonicalPath = '';
                if (parent) {
                    path += parent.path;
                    if (parent.parent !== null) {
                        path += '/';
                        _canonicalPath += '/';
                    }
                    if (parent.type === 'object') {
                        path += propertyId;
                        _canonicalPath += propertyId;
                    }
                    else if (parent.type === 'array') {
                        path += '*';
                        _canonicalPath += '*';
                    }
                    else {
                        throw 'Instanciation of a FormProperty with an unknown parent type: ' + parent.type;
                    }
                    _canonicalPath = (parent._canonicalPath || parent.path) + _canonicalPath;
                }
                else {
                    path = '/';
                    _canonicalPath = '/';
                }
                if (schema.$ref) {
                    /** @type {?} */
                    var refSchema = this.schemaValidatorFactory.getSchema(parent.root.schema, schema.$ref);
                    newProperty = this.createProperty(refSchema, parent, path);
                }
                else {
                    if (PROPERTY_TYPE_MAPPING[schema.type]) {
                        if (schema.type === 'object' || schema.type === 'array') {
                            newProperty = PROPERTY_TYPE_MAPPING[schema.type](this.schemaValidatorFactory, this.validatorRegistry, this.expressionCompilerFactory, schema, parent, path, this);
                        }
                        else {
                            newProperty = PROPERTY_TYPE_MAPPING[schema.type](this.schemaValidatorFactory, this.validatorRegistry, this.expressionCompilerFactory, schema, parent, path);
                        }
                    }
                    else {
                        throw new TypeError("Undefined type " + schema.type + " (existing: " + Object.keys(PROPERTY_TYPE_MAPPING) + ")");
                    }
                }
                newProperty._propertyBindingRegistry = this.propertyBindingRegistry;
                newProperty._canonicalPath = _canonicalPath;
                if (newProperty instanceof PropertyGroup) {
                    this.initializeRoot(newProperty);
                }
                return newProperty;
            };
        /**
         * @private
         * @param {?} rootProperty
         * @return {?}
         */
        FormPropertyFactory.prototype.initializeRoot = /**
         * @private
         * @param {?} rootProperty
         * @return {?}
         */
            function (rootProperty) {
                rootProperty.reset(null, true);
                rootProperty._bindVisibility();
            };
        return FormPropertyFactory;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} o
     * @return {?}
     */
    function isBlank(o) {
        return o === null || o === undefined;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} message
     * @param {?} path
     * @return {?}
     */
    function formatMessage(message, path) {
        return "Parsing error on " + path + ": " + message;
    }
    /**
     * @param {?} message
     * @param {?} path
     * @return {?}
     */
    function schemaError(message, path) {
        /** @type {?} */
        var mesg = formatMessage(message, path);
        throw new Error(mesg);
    }
    /**
     * @param {?} message
     * @param {?} path
     * @return {?}
     */
    function schemaWarning(message, path) {
        /** @type {?} */
        var mesg = formatMessage(message, path);
        throw new Error(mesg);
    }
    var SchemaPreprocessor = /** @class */ (function () {
        function SchemaPreprocessor() {
        }
        /**
         * @param {?} jsonSchema
         * @param {?=} path
         * @return {?}
         */
        SchemaPreprocessor.preprocess = /**
         * @param {?} jsonSchema
         * @param {?=} path
         * @return {?}
         */
            function (jsonSchema, path) {
                if (path === void 0) {
                    path = '/';
                }
                jsonSchema = jsonSchema || {};
                SchemaPreprocessor.normalizeExtensions(jsonSchema);
                if (jsonSchema.type === 'object') {
                    SchemaPreprocessor.checkProperties(jsonSchema, path);
                    SchemaPreprocessor.checkAndCreateFieldsets(jsonSchema, path);
                }
                else if (jsonSchema.type === 'array') {
                    SchemaPreprocessor.checkItems(jsonSchema, path);
                }
                SchemaPreprocessor.normalizeWidget(jsonSchema);
                SchemaPreprocessor.recursiveCheck(jsonSchema, path);
            };
        /**
         * @private
         * @param {?} jsonSchema
         * @param {?} path
         * @return {?}
         */
        SchemaPreprocessor.checkProperties = /**
         * @private
         * @param {?} jsonSchema
         * @param {?} path
         * @return {?}
         */
            function (jsonSchema, path) {
                if (isBlank(jsonSchema.properties)) {
                    jsonSchema.properties = {};
                    schemaWarning('Provided json schema does not contain a \'properties\' entry. Output schema will be empty', path);
                }
            };
        /**
         * @private
         * @param {?} jsonSchema
         * @param {?} path
         * @return {?}
         */
        SchemaPreprocessor.checkAndCreateFieldsets = /**
         * @private
         * @param {?} jsonSchema
         * @param {?} path
         * @return {?}
         */
            function (jsonSchema, path) {
                if (jsonSchema.fieldsets === undefined) {
                    if (jsonSchema.order !== undefined) {
                        SchemaPreprocessor.replaceOrderByFieldsets(jsonSchema);
                    }
                    else {
                        SchemaPreprocessor.createFieldsets(jsonSchema);
                    }
                }
                SchemaPreprocessor.checkFieldsUsage(jsonSchema, path);
            };
        /**
         * @private
         * @param {?} jsonSchema
         * @param {?} path
         * @return {?}
         */
        SchemaPreprocessor.checkFieldsUsage = /**
         * @private
         * @param {?} jsonSchema
         * @param {?} path
         * @return {?}
         */
            function (jsonSchema, path) {
                var e_1, _a, e_2, _b, e_3, _c;
                /** @type {?} */
                var fieldsId = Object.keys(jsonSchema.properties);
                /** @type {?} */
                var usedFields = {};
                try {
                    for (var _d = __values(jsonSchema.fieldsets), _e = _d.next(); !_e.done; _e = _d.next()) {
                        var fieldset = _e.value;
                        try {
                            for (var _f = __values(fieldset.fields), _g = _f.next(); !_g.done; _g = _f.next()) {
                                var fieldId = _g.value;
                                if (usedFields[fieldId] === undefined) {
                                    usedFields[fieldId] = [];
                                }
                                usedFields[fieldId].push(fieldset.id);
                            }
                        }
                        catch (e_2_1) {
                            e_2 = { error: e_2_1 };
                        }
                        finally {
                            try {
                                if (_g && !_g.done && (_b = _f.return))
                                    _b.call(_f);
                            }
                            finally {
                                if (e_2)
                                    throw e_2.error;
                            }
                        }
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_e && !_e.done && (_a = _d.return))
                            _a.call(_d);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                try {
                    for (var fieldsId_1 = __values(fieldsId), fieldsId_1_1 = fieldsId_1.next(); !fieldsId_1_1.done; fieldsId_1_1 = fieldsId_1.next()) {
                        var fieldId = fieldsId_1_1.value;
                        /** @type {?} */
                        var isRequired = jsonSchema.required && jsonSchema.required.indexOf(fieldId) > -1;
                        if (isRequired && jsonSchema.properties[fieldId]) {
                            jsonSchema.properties[fieldId].isRequired = true;
                        }
                        if (usedFields.hasOwnProperty(fieldId)) {
                            if (usedFields[fieldId].length > 1) {
                                schemaError(fieldId + " is referenced by more than one fieldset: " + usedFields[fieldId], path);
                            }
                            delete usedFields[fieldId];
                        }
                        else if (isRequired) {
                            schemaError(fieldId + " is a required field but it is not referenced as part of a 'order' or a 'fieldset' property", path);
                        }
                        else {
                            delete jsonSchema[fieldId];
                            schemaWarning("Removing unreferenced field " + fieldId, path);
                        }
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (fieldsId_1_1 && !fieldsId_1_1.done && (_c = fieldsId_1.return))
                            _c.call(fieldsId_1);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                for (var remainingfieldsId in usedFields) {
                    if (usedFields.hasOwnProperty(remainingfieldsId)) {
                        schemaWarning("Referencing non-existent field " + remainingfieldsId + " in one or more fieldsets", path);
                    }
                }
            };
        /**
         * @private
         * @param {?} jsonSchema
         * @return {?}
         */
        SchemaPreprocessor.createFieldsets = /**
         * @private
         * @param {?} jsonSchema
         * @return {?}
         */
            function (jsonSchema) {
                jsonSchema.order = Object.keys(jsonSchema.properties);
                SchemaPreprocessor.replaceOrderByFieldsets(jsonSchema);
            };
        /**
         * @private
         * @param {?} jsonSchema
         * @return {?}
         */
        SchemaPreprocessor.replaceOrderByFieldsets = /**
         * @private
         * @param {?} jsonSchema
         * @return {?}
         */
            function (jsonSchema) {
                jsonSchema.fieldsets = [{
                        id: 'fieldset-default',
                        title: jsonSchema.title || '',
                        description: jsonSchema.description || '',
                        name: jsonSchema.name || '',
                        fields: jsonSchema.order
                    }];
                delete jsonSchema.order;
            };
        /**
         * @private
         * @param {?} fieldSchema
         * @return {?}
         */
        SchemaPreprocessor.normalizeWidget = /**
         * @private
         * @param {?} fieldSchema
         * @return {?}
         */
            function (fieldSchema) {
                /** @type {?} */
                var widget = fieldSchema.widget;
                if (widget === undefined) {
                    widget = { 'id': fieldSchema.type };
                }
                else if (typeof widget === 'string') {
                    widget = { 'id': widget };
                }
                fieldSchema.widget = widget;
            };
        /**
         * @private
         * @param {?} jsonSchema
         * @param {?} path
         * @return {?}
         */
        SchemaPreprocessor.checkItems = /**
         * @private
         * @param {?} jsonSchema
         * @param {?} path
         * @return {?}
         */
            function (jsonSchema, path) {
                if (jsonSchema.items === undefined) {
                    schemaError('No \'items\' property in array', path);
                }
            };
        /**
         * @private
         * @param {?} jsonSchema
         * @param {?} path
         * @return {?}
         */
        SchemaPreprocessor.recursiveCheck = /**
         * @private
         * @param {?} jsonSchema
         * @param {?} path
         * @return {?}
         */
            function (jsonSchema, path) {
                if (jsonSchema.type === 'object') {
                    for (var fieldId in jsonSchema.properties) {
                        if (jsonSchema.properties.hasOwnProperty(fieldId)) {
                            /** @type {?} */
                            var fieldSchema = jsonSchema.properties[fieldId];
                            SchemaPreprocessor.preprocess(fieldSchema, path + fieldId + '/');
                        }
                    }
                    if (jsonSchema.hasOwnProperty('definitions')) {
                        for (var fieldId in jsonSchema.definitions) {
                            if (jsonSchema.definitions.hasOwnProperty(fieldId)) {
                                /** @type {?} */
                                var fieldSchema = jsonSchema.definitions[fieldId];
                                SchemaPreprocessor.removeRecursiveRefProperties(fieldSchema, "#/definitions/" + fieldId);
                                SchemaPreprocessor.preprocess(fieldSchema, path + fieldId + '/');
                            }
                        }
                    }
                }
                else if (jsonSchema.type === 'array') {
                    SchemaPreprocessor.preprocess(jsonSchema.items, path + '*/');
                }
            };
        /**
         * @private
         * @param {?} jsonSchema
         * @param {?} definitionPath
         * @return {?}
         */
        SchemaPreprocessor.removeRecursiveRefProperties = /**
         * @private
         * @param {?} jsonSchema
         * @param {?} definitionPath
         * @return {?}
         */
            function (jsonSchema, definitionPath) {
                // to avoid infinite loop
                if (jsonSchema.type === 'object') {
                    for (var fieldId in jsonSchema.properties) {
                        if (jsonSchema.properties.hasOwnProperty(fieldId)) {
                            if (jsonSchema.properties[fieldId].$ref
                                && jsonSchema.properties[fieldId].$ref === definitionPath) {
                                delete jsonSchema.properties[fieldId];
                            }
                            else if (jsonSchema.properties[fieldId].type === 'object') {
                                SchemaPreprocessor.removeRecursiveRefProperties(jsonSchema.properties[fieldId], definitionPath);
                            }
                        }
                    }
                }
            };
        /**
         * Enables alias names for JSON schema extensions.
         *
         * Copies the value of each alias JSON schema property
         * to the JSON schema property of ngx-schema-form.
         *
         * @param schema JSON schema to enable alias names.
         */
        /**
         * Enables alias names for JSON schema extensions.
         *
         * Copies the value of each alias JSON schema property
         * to the JSON schema property of ngx-schema-form.
         *
         * @private
         * @param {?} schema JSON schema to enable alias names.
         * @return {?}
         */
        SchemaPreprocessor.normalizeExtensions = /**
         * Enables alias names for JSON schema extensions.
         *
         * Copies the value of each alias JSON schema property
         * to the JSON schema property of ngx-schema-form.
         *
         * @private
         * @param {?} schema JSON schema to enable alias names.
         * @return {?}
         */
            function (schema) {
                /** @type {?} */
                var extensions = [
                    { name: "fieldsets", regex: /^x-?field-?sets$/i },
                    { name: "widget", regex: /^x-?widget$/i },
                    { name: "visibleIf", regex: /^x-?visible-?if$/i }
                ];
                /** @type {?} */
                var keys = Object.keys(schema);
                var _loop_1 = function (i) {
                    /** @type {?} */
                    var k = keys[i];
                    /** @type {?} */
                    var e = extensions.find(( /**
                     * @param {?} e
                     * @return {?}
                     */function (e) { return !!k.match(e.regex); }));
                    if (e) {
                        /** @type {?} */
                        var v = schema[k];
                        /** @type {?} */
                        var copy = JSON.parse(JSON.stringify(v));
                        schema[e.name] = copy;
                    }
                };
                for (var i = 0; i < keys.length; ++i) {
                    _loop_1(i);
                }
            };
        return SchemaPreprocessor;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ValidatorRegistry = /** @class */ (function () {
        function ValidatorRegistry() {
            this.validators = [];
        }
        /**
         * @param {?} path
         * @param {?} validator
         * @return {?}
         */
        ValidatorRegistry.prototype.register = /**
         * @param {?} path
         * @param {?} validator
         * @return {?}
         */
            function (path, validator) {
                this.validators[path] = validator;
            };
        /**
         * @param {?} path
         * @return {?}
         */
        ValidatorRegistry.prototype.get = /**
         * @param {?} path
         * @return {?}
         */
            function (path) {
                return this.validators[path];
            };
        /**
         * @return {?}
         */
        ValidatorRegistry.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.validators = [];
            };
        return ValidatorRegistry;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BindingRegistry = /** @class */ (function () {
        function BindingRegistry() {
            this.bindings = [];
        }
        /**
         * @return {?}
         */
        BindingRegistry.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.bindings = [];
            };
        /**
         * @param {?} path
         * @param {?} binding
         * @return {?}
         */
        BindingRegistry.prototype.register = /**
         * @param {?} path
         * @param {?} binding
         * @return {?}
         */
            function (path, binding) {
                this.bindings[path] = [].concat(binding);
            };
        /**
         * @param {?} path
         * @return {?}
         */
        BindingRegistry.prototype.get = /**
         * @param {?} path
         * @return {?}
         */
            function (path) {
                return this.bindings[path];
            };
        return BindingRegistry;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ SchemaValidatorFactory = /** @class */ (function () {
        function SchemaValidatorFactory() {
        }
        /**
         * Override this method to reset the schema validator instance.<br/>
         * This may be required since some schema validators keep a deep copy<br/>
         * of your schemas and changes at runtime are not recognized by the schema validator.<br/>
         * In this method you should either re-instantiate the schema validator or
         * clear its cache.<br/>
         * Example of re-instantiating schema validator
         * <code>
         *     reset(){
         *         this.zschema = new ZSchema({})
         *     }
         * </code>
         * <br/>
         * Since this method it self does nothing there is <br/>
         * no need to call the <code>super.reset()</code>
         */
        /**
         * Override this method to reset the schema validator instance.<br/>
         * This may be required since some schema validators keep a deep copy<br/>
         * of your schemas and changes at runtime are not recognized by the schema validator.<br/>
         * In this method you should either re-instantiate the schema validator or
         * clear its cache.<br/>
         * Example of re-instantiating schema validator
         * <code>
         *     reset(){
         *         this.zschema = new ZSchema({})
         *     }
         * </code>
         * <br/>
         * Since this method it self does nothing there is <br/>
         * no need to call the <code>super.reset()</code>
         * @return {?}
         */
        SchemaValidatorFactory.prototype.reset = /**
         * Override this method to reset the schema validator instance.<br/>
         * This may be required since some schema validators keep a deep copy<br/>
         * of your schemas and changes at runtime are not recognized by the schema validator.<br/>
         * In this method you should either re-instantiate the schema validator or
         * clear its cache.<br/>
         * Example of re-instantiating schema validator
         * <code>
         *     reset(){
         *         this.zschema = new ZSchema({})
         *     }
         * </code>
         * <br/>
         * Since this method it self does nothing there is <br/>
         * no need to call the <code>super.reset()</code>
         * @return {?}
         */
            function () {
            };
        return SchemaValidatorFactory;
    }());
    var ZSchemaValidatorFactory = /** @class */ (function (_super) {
        __extends(ZSchemaValidatorFactory, _super);
        function ZSchemaValidatorFactory() {
            var _this = _super.call(this) || this;
            _this.createSchemaValidator();
            return _this;
        }
        /**
         * @private
         * @return {?}
         */
        ZSchemaValidatorFactory.prototype.createSchemaValidator = /**
         * @private
         * @return {?}
         */
            function () {
                this.zschema = new ZSchema({
                    breakOnFirstError: false
                });
            };
        /**
         * @return {?}
         */
        ZSchemaValidatorFactory.prototype.reset = /**
         * @return {?}
         */
            function () {
                this.createSchemaValidator();
            };
        /**
         * @param {?} schema
         * @return {?}
         */
        ZSchemaValidatorFactory.prototype.createValidatorFn = /**
         * @param {?} schema
         * @return {?}
         */
            function (schema) {
                var _this = this;
                return ( /**
                 * @param {?} value
                 * @return {?}
                 */function (value) {
                    if (schema.type === 'number' || schema.type === 'integer') {
                        value = +value;
                    }
                    _this.zschema.validate(value, schema);
                    /** @type {?} */
                    var err = _this.zschema.getLastErrors();
                    _this.denormalizeRequiredPropertyPaths(err);
                    return err || null;
                });
            };
        /**
         * @param {?} schema
         * @param {?} ref
         * @return {?}
         */
        ZSchemaValidatorFactory.prototype.getSchema = /**
         * @param {?} schema
         * @param {?} ref
         * @return {?}
         */
            function (schema, ref) {
                // check definitions are valid
                /** @type {?} */
                var isValid = this.zschema.compileSchema(schema);
                if (isValid) {
                    return this.getDefinition(schema, ref);
                }
                else {
                    throw this.zschema.getLastError();
                }
            };
        /**
         * @private
         * @param {?} err
         * @return {?}
         */
        ZSchemaValidatorFactory.prototype.denormalizeRequiredPropertyPaths = /**
         * @private
         * @param {?} err
         * @return {?}
         */
            function (err) {
                if (err && err.length) {
                    err = err.map(( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        if (error.path === '#/' && error.code === 'OBJECT_MISSING_REQUIRED_PROPERTY') {
                            error.path = "" + error.path + error.params[0];
                        }
                        return error;
                    }));
                }
            };
        /**
         * @private
         * @param {?} schema
         * @param {?} ref
         * @return {?}
         */
        ZSchemaValidatorFactory.prototype.getDefinition = /**
         * @private
         * @param {?} schema
         * @param {?} ref
         * @return {?}
         */
            function (schema, ref) {
                /** @type {?} */
                var foundSchema = schema;
                ref.split('/').slice(1).forEach(( /**
                 * @param {?} ptr
                 * @return {?}
                 */function (ptr) {
                    if (ptr) {
                        foundSchema = foundSchema[ptr];
                    }
                }));
                return foundSchema;
            };
        return ZSchemaValidatorFactory;
    }(SchemaValidatorFactory));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WidgetRegistry = /** @class */ (function () {
        function WidgetRegistry() {
            this.widgets = {};
        }
        /**
         * @param {?} widget
         * @return {?}
         */
        WidgetRegistry.prototype.setDefaultWidget = /**
         * @param {?} widget
         * @return {?}
         */
            function (widget) {
                this.defaultWidget = widget;
            };
        /**
         * @return {?}
         */
        WidgetRegistry.prototype.getDefaultWidget = /**
         * @return {?}
         */
            function () {
                return this.defaultWidget;
            };
        /**
         * @param {?} type
         * @return {?}
         */
        WidgetRegistry.prototype.hasWidget = /**
         * @param {?} type
         * @return {?}
         */
            function (type) {
                return this.widgets.hasOwnProperty(type);
            };
        /**
         * @param {?} type
         * @param {?} widget
         * @return {?}
         */
        WidgetRegistry.prototype.register = /**
         * @param {?} type
         * @param {?} widget
         * @return {?}
         */
            function (type, widget) {
                this.widgets[type] = widget;
            };
        /**
         * @param {?} type
         * @return {?}
         */
        WidgetRegistry.prototype.getWidgetType = /**
         * @param {?} type
         * @return {?}
         */
            function (type) {
                if (this.hasWidget(type)) {
                    return this.widgets[type];
                }
                return this.defaultWidget;
            };
        return WidgetRegistry;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WidgetFactory = /** @class */ (function () {
        function WidgetFactory(registry, resolver) {
            this.registry = registry;
            this.resolver = resolver;
        }
        /**
         * @param {?} container
         * @param {?} type
         * @return {?}
         */
        WidgetFactory.prototype.createWidget = /**
         * @param {?} container
         * @param {?} type
         * @return {?}
         */
            function (container, type) {
                /** @type {?} */
                var componentClass = this.registry.getWidgetType(type);
                /** @type {?} */
                var componentFactory = this.resolver.resolveComponentFactory(componentClass);
                return container.createComponent(componentFactory);
            };
        WidgetFactory.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        WidgetFactory.ctorParameters = function () {
            return [
                { type: WidgetRegistry },
                { type: core.ComponentFactoryResolver }
            ];
        };
        return WidgetFactory;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TerminatorService = /** @class */ (function () {
        function TerminatorService() {
            this.onDestroy = new rxjs.Subject();
        }
        /**
         * @return {?}
         */
        TerminatorService.prototype.destroy = /**
         * @return {?}
         */
            function () {
                this.onDestroy.next(true);
            };
        TerminatorService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        TerminatorService.ctorParameters = function () { return []; };
        return TerminatorService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * General purpose propery binding registry
     */
    var /**
     * General purpose propery binding registry
     */ PropertyBindingRegistry = /** @class */ (function () {
        function PropertyBindingRegistry() {
            this.bindings = {};
        }
        /**
         * @param {?} type
         * @return {?}
         */
        PropertyBindingRegistry.prototype.getPropertyBindings = /**
         * @param {?} type
         * @return {?}
         */
            function (type) {
                this.bindings[type] = this.bindings[type] || new PropertyBindings();
                return this.bindings[type];
            };
        /**
         * @return {?}
         */
        PropertyBindingRegistry.prototype.getPropertyBindingsVisibility = /**
         * @return {?}
         */
            function () {
                return this.getPropertyBindings(PropertyBindingTypes.visibility);
            };
        return PropertyBindingRegistry;
    }());
    /** @enum {number} */
    var PropertyBindingTypes = {
        visibility: 0,
    };
    PropertyBindingTypes[PropertyBindingTypes.visibility] = 'visibility';
    /**
     * Storage that holds all bindings that are property paths related.<br/>
     */
    var /**
     * Storage that holds all bindings that are property paths related.<br/>
     */ PropertyBindings = /** @class */ (function () {
        function PropertyBindings() {
            this.sourcesIndex = new SimplePropertyIndexer();
            this.dependenciesIndex = new SimplePropertyIndexer();
        }
        /**
         * @param {?} dependencyPath
         * @param {?} sourcePropertyPath
         * @return {?}
         */
        PropertyBindings.prototype.add = /**
         * @param {?} dependencyPath
         * @param {?} sourcePropertyPath
         * @return {?}
         */
            function (dependencyPath, sourcePropertyPath) {
                this.sourcesIndex.store(sourcePropertyPath, dependencyPath);
                this.dependenciesIndex.store(dependencyPath, sourcePropertyPath);
            };
        /**
         * @param {?} dependencyPath
         * @return {?}
         */
        PropertyBindings.prototype.findByDependencyPath = /**
         * @param {?} dependencyPath
         * @return {?}
         */
            function (dependencyPath) {
                var e_1, _a;
                /** @type {?} */
                var result = this.dependenciesIndex.find(dependencyPath);
                result.results = result.results || [];
                /** @type {?} */
                var values = [];
                try {
                    for (var _b = __values(result.results), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var res = _c.value;
                        values = values.concat(Object.keys(res.value));
                    }
                }
                catch (e_1_1) {
                    e_1 = { error: e_1_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_1)
                            throw e_1.error;
                    }
                }
                return result.found ? values : [];
            };
        /**
         * @param {?} sourcePropertyPath
         * @return {?}
         */
        PropertyBindings.prototype.getBySourcePropertyPath = /**
         * @param {?} sourcePropertyPath
         * @return {?}
         */
            function (sourcePropertyPath) {
                var e_2, _a;
                /** @type {?} */
                var result = this.sourcesIndex.find(sourcePropertyPath);
                result.results = result.results || [];
                /** @type {?} */
                var values = [];
                try {
                    for (var _b = __values(result.results), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var res = _c.value;
                        values = values.concat(Object.keys(res.value));
                    }
                }
                catch (e_2_1) {
                    e_2 = { error: e_2_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_2)
                            throw e_2.error;
                    }
                }
                return result.found ? values : [];
            };
        /**
         * @param {?} path
         * @return {?}
         */
        PropertyBindings.prototype.createPathIndex = /**
         * @param {?} path
         * @return {?}
         */
            function (path) {
                return path.split('/');
            };
        return PropertyBindings;
    }());
    /**
     * Simple indexer to store property paths
     */
    var SimplePropertyIndexer = /** @class */ (function () {
        function SimplePropertyIndexer() {
            this.index = {};
            this.findOnlyWithValue = true;
        }
        /**
         * @private
         * @param {?} path
         * @return {?}
         */
        SimplePropertyIndexer.prototype._createPathIndex = /**
         * @private
         * @param {?} path
         * @return {?}
         */
            function (path) {
                return path
                    .replace(new RegExp('//', 'g'), '/')
                    .replace(new RegExp('^/', 'g'), '')
                    .split('/').filter(( /**
             * @param {?} item
             * @return {?}
             */function (item) { return item; }));
            };
        /**
         * @param {?} propertyPath
         * @param {?=} value
         * @return {?}
         */
        SimplePropertyIndexer.prototype.store = /**
         * @param {?} propertyPath
         * @param {?=} value
         * @return {?}
         */
            function (propertyPath, value) {
                this._storeIndex(this._createPathIndex(propertyPath), value);
            };
        /**
         * @private
         * @param {?} pathIndex
         * @param {?=} value
         * @return {?}
         */
        SimplePropertyIndexer.prototype._storeIndex = /**
         * @private
         * @param {?} pathIndex
         * @param {?=} value
         * @return {?}
         */
            function (pathIndex, value) {
                var e_3, _a;
                /** @type {?} */
                var indexPos = this.index;
                try {
                    for (var pathIndex_1 = __values(pathIndex), pathIndex_1_1 = pathIndex_1.next(); !pathIndex_1_1.done; pathIndex_1_1 = pathIndex_1.next()) {
                        var key = pathIndex_1_1.value;
                        indexPos[key] = indexPos[key] || {};
                        indexPos = indexPos[key];
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (pathIndex_1_1 && !pathIndex_1_1.done && (_a = pathIndex_1.return))
                            _a.call(pathIndex_1);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
                if (indexPos && value) {
                    indexPos[SimplePropertyIndexer.MARKER] = indexPos[SimplePropertyIndexer.MARKER] || {};
                    indexPos[SimplePropertyIndexer.MARKER][value] = value;
                }
            };
        /**
         * Find path in index.<br/>
         * Will find path like:<br/>
         * <ul>
         *     <li>/property/0/prop</li>
         *     <li>/property/0/prop/2/test</li>
         *     <li>/property/0/prop/&#42;/test</li>
         *     <li>/property/&#42;/prop/1/test</li>
         *     <li>/property/&#42;/prop/&#42;/test</li>
         *     <li>/property/1/prop/&#42;/test</li>
         *  </ul>
         * @param path
         */
        /**
         * Find path in index.<br/>
         * Will find path like:<br/>
         * <ul>
         *     <li>/property/0/prop</li>
         *     <li>/property/0/prop/2/test</li>
         *     <li>/property/0/prop/&#42;/test</li>
         *     <li>/property/&#42;/prop/1/test</li>
         *     <li>/property/&#42;/prop/&#42;/test</li>
         *     <li>/property/1/prop/&#42;/test</li>
         *  </ul>
         * @param {?} path
         * @return {?}
         */
        SimplePropertyIndexer.prototype.find = /**
         * Find path in index.<br/>
         * Will find path like:<br/>
         * <ul>
         *     <li>/property/0/prop</li>
         *     <li>/property/0/prop/2/test</li>
         *     <li>/property/0/prop/&#42;/test</li>
         *     <li>/property/&#42;/prop/1/test</li>
         *     <li>/property/&#42;/prop/&#42;/test</li>
         *     <li>/property/1/prop/&#42;/test</li>
         *  </ul>
         * @param {?} path
         * @return {?}
         */
            function (path) {
                return this._findInIndex(this._createPathIndex(path));
            };
        /**
         * @param {?} path
         * @return {?}
         */
        SimplePropertyIndexer.prototype._findInIndex = /**
         * @param {?} path
         * @return {?}
         */
            function (path) {
                /** @type {?} */
                var ixRes = { target: path, found: false, results: [] };
                this.__findIndex(ixRes, path, this.index, []);
                return ixRes;
            };
        /**
         * @param {?} indexerResults
         * @param {?} path
         * @param {?} index
         * @param {?=} parent
         * @return {?}
         */
        SimplePropertyIndexer.prototype.__findIndex = /**
         * @param {?} indexerResults
         * @param {?} path
         * @param {?} index
         * @param {?=} parent
         * @return {?}
         */
            function (indexerResults, path, index, parent) {
                var e_4, _a;
                /** @type {?} */
                var p = parent || [];
                /** @type {?} */
                var segment = path[0];
                /** @type {?} */
                var wild = ('*' === segment) ? Object.keys(index) : [];
                /** @type {?} */
                var _keys = (( /** @type {?} */((Array.isArray(segment) ? segment : [segment])))).concat(wild);
                /** @type {?} */
                var keys = _keys.filter(( /**
                 * @param {?} item
                 * @param {?} pos
                 * @return {?}
                 */function (item, pos) { return '*' !== item && _keys.indexOf(item) === pos; }));
                if (index['*']) {
                    keys.push('*');
                }
                /** @type {?} */
                var paths = [];
                try {
                    for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                        var key = keys_1_1.value;
                        /** @type {?} */
                        var restPath = path.slice(1);
                        /** @type {?} */
                        var restIndex = index[key];
                        /** @type {?} */
                        var restParent = p.concat(key);
                        if (path.length === 1) { // collect only the full paths
                            if (!this.findOnlyWithValue || (restIndex && restIndex[SimplePropertyIndexer.MARKER])) {
                                indexerResults.results = indexerResults.results || [];
                                indexerResults.results.push({
                                    path: restParent,
                                    value: restIndex[SimplePropertyIndexer.MARKER]
                                });
                                paths.push(restParent);
                                indexerResults.found = indexerResults.results.length > 0;
                            }
                        }
                        if (!restPath || !restPath.length || !restIndex) {
                            break;
                        }
                        /** @type {?} */
                        var restPaths = this.__findIndex(indexerResults, restPath, restIndex, restParent);
                        paths = paths.concat(restPaths);
                    }
                }
                catch (e_4_1) {
                    e_4 = { error: e_4_1 };
                }
                finally {
                    try {
                        if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return))
                            _a.call(keys_1);
                    }
                    finally {
                        if (e_4)
                            throw e_4.error;
                    }
                }
                return paths;
            };
        SimplePropertyIndexer.MARKER = '$____value';
        return SimplePropertyIndexer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ ExpressionCompilerFactory = /** @class */ (function () {
        function ExpressionCompilerFactory() {
        }
        return ExpressionCompilerFactory;
    }());
    var JEXLExpressionCompilerFactory = /** @class */ (function (_super) {
        __extends(JEXLExpressionCompilerFactory, _super);
        function JEXLExpressionCompilerFactory() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        JEXLExpressionCompilerFactory.prototype.createExpressionCompiler = /**
         * @return {?}
         */
            function () {
                return new JEXLExpressionCompiler();
            };
        /**
         * @return {?}
         */
        JEXLExpressionCompilerFactory.prototype.createExpressionCompilerVisibilityIf = /**
         * @return {?}
         */
            function () {
                return new JEXLExpressionCompilerVisibiltyIf();
            };
        return JEXLExpressionCompilerFactory;
    }(ExpressionCompilerFactory));
    var JEXLExpressionCompiler = /** @class */ (function () {
        function JEXLExpressionCompiler() {
        }
        /**
         * @param {?} expression
         * @param {?=} context
         * @return {?}
         */
        JEXLExpressionCompiler.prototype.evaluate = /**
         * @param {?} expression
         * @param {?=} context
         * @return {?}
         */
            function (expression, context) {
                if (context === void 0) {
                    context = {};
                }
                return new JEXL.Jexl().evalSync(expression, context);
            };
        return JEXLExpressionCompiler;
    }());
    var JEXLExpressionCompilerVisibiltyIf = /** @class */ (function () {
        function JEXLExpressionCompilerVisibiltyIf() {
        }
        /**
         * @param {?} expression
         * @param {?=} context
         * @return {?}
         */
        JEXLExpressionCompilerVisibiltyIf.prototype.evaluate = /**
         * @param {?} expression
         * @param {?=} context
         * @return {?}
         */
            function (expression, context) {
                if (context === void 0) {
                    context = { source: ( /** @type {?} */({})), target: ( /** @type {?} */({})) };
                }
                return new JEXL.Jexl().evalSync(expression, context);
            };
        return JEXLExpressionCompilerVisibiltyIf;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} schemaValidatorFactory
     * @param {?} validatorRegistry
     * @param {?} propertyBindingRegistry
     * @param {?} expressionCompilerFactory
     * @return {?}
     */
    function useFactory(schemaValidatorFactory, validatorRegistry, propertyBindingRegistry, expressionCompilerFactory) {
        return new FormPropertyFactory(schemaValidatorFactory, validatorRegistry, propertyBindingRegistry, expressionCompilerFactory);
    }
    var FormComponent = /** @class */ (function () {
        function FormComponent(formPropertyFactory, actionRegistry, validatorRegistry, bindingRegistry, cdr, terminator) {
            this.formPropertyFactory = formPropertyFactory;
            this.actionRegistry = actionRegistry;
            this.validatorRegistry = validatorRegistry;
            this.bindingRegistry = bindingRegistry;
            this.cdr = cdr;
            this.terminator = terminator;
            this.schema = null;
            this.actions = {};
            this.validators = {};
            this.bindings = {};
            this.onChange = new core.EventEmitter();
            this.modelChange = new core.EventEmitter();
            this.isValid = new core.EventEmitter();
            this.onErrorChange = new core.EventEmitter();
            this.onErrorsChange = new core.EventEmitter();
            this.rootProperty = null;
        }
        /**
         * @param {?} obj
         * @return {?}
         */
        FormComponent.prototype.writeValue = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                if (this.rootProperty) {
                    this.rootProperty.reset(obj, false);
                }
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        FormComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChangeCallback = fn;
                if (this.rootProperty) {
                    this.rootProperty.valueChanges.subscribe(this.onValueChanges.bind(this));
                }
            };
        // TODO implement
        // TODO implement
        /**
         * @param {?} fn
         * @return {?}
         */
        FormComponent.prototype.registerOnTouched =
            // TODO implement
            /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
            };
        // TODO implement
        // setDisabledState(isDisabled: boolean)?: void
        // TODO implement
        // setDisabledState(isDisabled: boolean)?: void
        /**
         * @param {?} changes
         * @return {?}
         */
        FormComponent.prototype.ngOnChanges =
            // TODO implement
            // setDisabledState(isDisabled: boolean)?: void
            /**
             * @param {?} changes
             * @return {?}
             */
            function (changes) {
                var _this = this;
                if (changes.validators) {
                    this.setValidators();
                }
                if (changes.actions) {
                    this.setActions();
                }
                if (changes.bindings) {
                    this.setBindings();
                }
                if (this.schema && !this.schema.type) {
                    this.schema.type = 'object';
                }
                if (this.schema && changes.schema) {
                    if (!changes.schema.firstChange) {
                        this.terminator.destroy();
                    }
                    SchemaPreprocessor.preprocess(this.schema);
                    this.rootProperty = this.formPropertyFactory.createProperty(this.schema);
                    if (this.model) ;
                    this.rootProperty.valueChanges.subscribe(this.onValueChanges.bind(this));
                    this.rootProperty.errorsChanges.subscribe(( /**
                     * @param {?} value
                     * @return {?}
                     */function (value) {
                        _this.onErrorChange.emit({ value: value });
                        _this.isValid.emit(!(value && value.length));
                    }));
                }
                if (this.schema && (changes.model || changes.schema)) {
                    this.rootProperty.reset(this.model, false);
                    this.cdr.detectChanges();
                }
            };
        /**
         * @private
         * @return {?}
         */
        FormComponent.prototype.setValidators = /**
         * @private
         * @return {?}
         */
            function () {
                this.validatorRegistry.clear();
                if (this.validators) {
                    for (var validatorId in this.validators) {
                        if (this.validators.hasOwnProperty(validatorId)) {
                            this.validatorRegistry.register(validatorId, this.validators[validatorId]);
                        }
                    }
                }
            };
        /**
         * @private
         * @return {?}
         */
        FormComponent.prototype.setActions = /**
         * @private
         * @return {?}
         */
            function () {
                this.actionRegistry.clear();
                if (this.actions) {
                    for (var actionId in this.actions) {
                        if (this.actions.hasOwnProperty(actionId)) {
                            this.actionRegistry.register(actionId, this.actions[actionId]);
                        }
                    }
                }
            };
        /**
         * @private
         * @return {?}
         */
        FormComponent.prototype.setBindings = /**
         * @private
         * @return {?}
         */
            function () {
                this.bindingRegistry.clear();
                if (this.bindings) {
                    for (var bindingPath in this.bindings) {
                        if (this.bindings.hasOwnProperty(bindingPath)) {
                            this.bindingRegistry.register(bindingPath, this.bindings[bindingPath]);
                        }
                    }
                }
            };
        /**
         * @return {?}
         */
        FormComponent.prototype.reset = /**
         * @return {?}
         */
            function () {
                this.rootProperty.reset(null, true);
            };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        FormComponent.prototype.setModel = /**
         * @private
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.model) {
                    Object.assign(this.model, value);
                }
                else {
                    this.model = value;
                }
            };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        FormComponent.prototype.onValueChanges = /**
         * @private
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.onChangeCallback) {
                    this.setModel(value);
                    this.onChangeCallback(value);
                }
                // two way binding is used
                if (this.modelChange.observers.length > 0) {
                    if (!this.onChangeCallback) {
                        this.setModel(value);
                    }
                }
                this.onChange.emit({ value: value });
            };
        FormComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sf-form',
                        template: "\n    <form *ngIf=\"rootProperty\" [attr.name]=\"rootProperty.rootName\" [attr.id]=\"rootProperty.rootName\">\n      <sf-form-element [formProperty]=\"rootProperty\"></sf-form-element>\n    </form>",
                        providers: [
                            ActionRegistry,
                            ValidatorRegistry,
                            PropertyBindingRegistry,
                            BindingRegistry,
                            SchemaPreprocessor,
                            WidgetFactory,
                            {
                                provide: FormPropertyFactory,
                                useFactory: useFactory,
                                deps: [SchemaValidatorFactory, ValidatorRegistry, PropertyBindingRegistry, ExpressionCompilerFactory]
                            },
                            TerminatorService,
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: FormComponent,
                                multi: true
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        FormComponent.ctorParameters = function () {
            return [
                { type: FormPropertyFactory },
                { type: ActionRegistry },
                { type: ValidatorRegistry },
                { type: BindingRegistry },
                { type: core.ChangeDetectorRef },
                { type: TerminatorService }
            ];
        };
        FormComponent.propDecorators = {
            schema: [{ type: core.Input }],
            model: [{ type: core.Input }],
            actions: [{ type: core.Input }],
            validators: [{ type: core.Input }],
            bindings: [{ type: core.Input }],
            onChange: [{ type: core.Output }],
            modelChange: [{ type: core.Output }],
            isValid: [{ type: core.Output }],
            onErrorChange: [{ type: core.Output }],
            onErrorsChange: [{ type: core.Output }]
        };
        return FormComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormElementComponent = /** @class */ (function () {
        function FormElementComponent(actionRegistry, bindingRegistry, renderer, elementRef) {
            this.actionRegistry = actionRegistry;
            this.bindingRegistry = bindingRegistry;
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.control = new forms.FormControl('', ( /**
             * @return {?}
             */function () { return null; }));
            this.widget = null;
            this.buttons = [];
            this.unlisten = [];
        }
        /**
         * @return {?}
         */
        FormElementComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.parseButtons();
                this.setupBindings();
            };
        /**
         * @private
         * @return {?}
         */
        FormElementComponent.prototype.setupBindings = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var bindings = this.bindingRegistry.get(this.formProperty.path);
                if ((bindings || []).length) {
                    bindings.forEach(( /**
                     * @param {?} binding
                     * @return {?}
                     */function (binding) {
                        for (var eventId in binding) {
                            _this.createBinding(eventId, binding[eventId]);
                        }
                    }));
                }
            };
        /**
         * @private
         * @param {?} eventId
         * @param {?} listener
         * @return {?}
         */
        FormElementComponent.prototype.createBinding = /**
         * @private
         * @param {?} eventId
         * @param {?} listener
         * @return {?}
         */
            function (eventId, listener) {
                var _this = this;
                this.unlisten.push(this.renderer.listen(this.elementRef.nativeElement, eventId, ( /**
                 * @param {?} event
                 * @return {?}
                 */function (event) {
                    if (listener instanceof Function) {
                        listener(event, _this.formProperty);
                    }
                    else {
                        console.warn('Calling non function handler for eventId ' + eventId + ' for path ' + _this.formProperty.path);
                    }
                })));
            };
        /**
         * @private
         * @return {?}
         */
        FormElementComponent.prototype.parseButtons = /**
         * @private
         * @return {?}
         */
            function () {
                var e_1, _a;
                if (this.formProperty.schema.buttons !== undefined) {
                    this.buttons = this.formProperty.schema.buttons;
                    try {
                        for (var _b = __values(this.buttons), _c = _b.next(); !_c.done; _c = _b.next()) {
                            var button = _c.value;
                            this.createButtonCallback(button);
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (_c && !_c.done && (_a = _b.return))
                                _a.call(_b);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
            };
        /**
         * @private
         * @param {?} button
         * @return {?}
         */
        FormElementComponent.prototype.createButtonCallback = /**
         * @private
         * @param {?} button
         * @return {?}
         */
            function (button) {
                var _this = this;
                button.action = ( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    /** @type {?} */
                    var action;
                    if (button.id && (action = _this.actionRegistry.get(button.id))) {
                        if (action) {
                            action(_this.formProperty, button.parameters);
                        }
                    }
                    e.preventDefault();
                });
            };
        /**
         * @param {?} widget
         * @return {?}
         */
        FormElementComponent.prototype.onWidgetInstanciated = /**
         * @param {?} widget
         * @return {?}
         */
            function (widget) {
                this.widget = widget;
                /** @type {?} */
                var id = this.formProperty.canonicalPathNotation || 'field' + (FormElementComponent.counter++);
                if (this.formProperty.root.rootName) {
                    id = this.formProperty.root.rootName + ":" + id;
                }
                this.widget.formProperty = this.formProperty;
                this.widget.schema = this.formProperty.schema;
                this.widget.name = id;
                this.widget.id = id;
                this.widget.control = this.control;
            };
        /**
         * @return {?}
         */
        FormElementComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.unlisten) {
                    this.unlisten.forEach(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) {
                        item();
                    }));
                }
            };
        FormElementComponent.counter = 0;
        FormElementComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sf-form-element',
                        template: "\n    <div *ngIf=\"formProperty.visible\"\n         [class.has-error]=\"!control.valid\"\n         [class.has-success]=\"control.valid\">\n      <sf-widget-chooser\n        (widgetInstanciated)=\"onWidgetInstanciated($event)\"\n        [widgetInfo]=\"formProperty.schema.widget\">\n      </sf-widget-chooser>\n      <sf-form-element-action *ngFor=\"let button of buttons\" [button]=\"button\" [formProperty]=\"formProperty\"></sf-form-element-action>\n    </div>"
                    }] }
        ];
        /** @nocollapse */
        FormElementComponent.ctorParameters = function () {
            return [
                { type: ActionRegistry },
                { type: BindingRegistry },
                { type: core.Renderer2 },
                { type: core.ElementRef }
            ];
        };
        FormElementComponent.propDecorators = {
            formProperty: [{ type: core.Input }]
        };
        return FormElementComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormElementComponentAction = /** @class */ (function () {
        function FormElementComponentAction(widgetFactory, terminator) {
            if (widgetFactory === void 0) {
                widgetFactory = null;
            }
            this.widgetFactory = widgetFactory;
            this.terminator = terminator;
        }
        /**
         * @return {?}
         */
        FormElementComponentAction.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.subs = this.terminator.onDestroy.subscribe(( /**
                 * @param {?} destroy
                 * @return {?}
                 */function (destroy) {
                    if (destroy) {
                        _this.ref.destroy();
                    }
                }));
            };
        /**
         * @return {?}
         */
        FormElementComponentAction.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.ref = this.widgetFactory.createWidget(this.container, this.button.widget || 'button');
                this.ref.instance.button = this.button;
                this.ref.instance.formProperty = this.formProperty;
            };
        /**
         * @return {?}
         */
        FormElementComponentAction.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.subs.unsubscribe();
            };
        FormElementComponentAction.decorators = [
            { type: core.Component, args: [{
                        selector: 'sf-form-element-action',
                        template: '<ng-template #target></ng-template>'
                    }] }
        ];
        /** @nocollapse */
        FormElementComponentAction.ctorParameters = function () {
            return [
                { type: WidgetFactory },
                { type: TerminatorService }
            ];
        };
        FormElementComponentAction.propDecorators = {
            button: [{ type: core.Input }],
            formProperty: [{ type: core.Input }],
            container: [{ type: core.ViewChild, args: ['target', { read: core.ViewContainerRef, static: true },] }]
        };
        return FormElementComponentAction;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WidgetChooserComponent = /** @class */ (function () {
        function WidgetChooserComponent(widgetFactory, cdr, terminator) {
            if (widgetFactory === void 0) {
                widgetFactory = null;
            }
            this.widgetFactory = widgetFactory;
            this.cdr = cdr;
            this.terminator = terminator;
            this.widgetInstanciated = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        WidgetChooserComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.subs = this.terminator.onDestroy.subscribe(( /**
                 * @param {?} destroy
                 * @return {?}
                 */function (destroy) {
                    if (destroy) {
                        _this.ref.destroy();
                    }
                }));
            };
        /**
         * @return {?}
         */
        WidgetChooserComponent.prototype.ngOnChanges = /**
         * @return {?}
         */
            function () {
                this.ref = this.widgetFactory.createWidget(this.container, this.widgetInfo.id);
                this.widgetInstanciated.emit(this.ref.instance);
                this.widgetInstance = this.ref.instance;
                this.cdr.detectChanges();
            };
        /**
         * @return {?}
         */
        WidgetChooserComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.subs.unsubscribe();
            };
        WidgetChooserComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sf-widget-chooser',
                        template: "<div #target></div>"
                    }] }
        ];
        /** @nocollapse */
        WidgetChooserComponent.ctorParameters = function () {
            return [
                { type: WidgetFactory },
                { type: core.ChangeDetectorRef },
                { type: TerminatorService }
            ];
        };
        WidgetChooserComponent.propDecorators = {
            widgetInfo: [{ type: core.Input }],
            widgetInstanciated: [{ type: core.Output }],
            container: [{ type: core.ViewChild, args: ['target', { read: core.ViewContainerRef, static: true },] }]
        };
        return WidgetChooserComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ AtomicProperty = /** @class */ (function (_super) {
        __extends(AtomicProperty, _super);
        function AtomicProperty() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @param {?} value
         * @param {?=} onlySelf
         * @return {?}
         */
        AtomicProperty.prototype.setValue = /**
         * @param {?} value
         * @param {?=} onlySelf
         * @return {?}
         */
            function (value, onlySelf) {
                if (onlySelf === void 0) {
                    onlySelf = false;
                }
                this._value = value;
                this.updateValueAndValidity(onlySelf, true);
            };
        /**
         * @param {?=} value
         * @param {?=} onlySelf
         * @return {?}
         */
        AtomicProperty.prototype.reset = /**
         * @param {?=} value
         * @param {?=} onlySelf
         * @return {?}
         */
            function (value, onlySelf) {
                if (value === void 0) {
                    value = null;
                }
                if (onlySelf === void 0) {
                    onlySelf = true;
                }
                this.resetValue(value);
                this.updateValueAndValidity(onlySelf, true);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        AtomicProperty.prototype.resetValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (value === null) {
                    if (this.schema.default !== undefined) {
                        value = this.schema.default;
                    }
                    else {
                        value = this.fallbackValue();
                    }
                }
                this._value = value;
            };
        /**
         * @return {?}
         */
        AtomicProperty.prototype._hasValue = /**
         * @return {?}
         */
            function () {
                return this.fallbackValue() !== this.value;
            };
        /**
         * @return {?}
         */
        AtomicProperty.prototype._updateValue = /**
         * @return {?}
         */
            function () {
            };
        return AtomicProperty;
    }(FormProperty));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ObjectProperty = /** @class */ (function (_super) {
        __extends(ObjectProperty, _super);
        function ObjectProperty(formPropertyFactory, schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path) {
            var _this = _super.call(this, schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path) || this;
            _this.formPropertyFactory = formPropertyFactory;
            _this.propertiesId = [];
            _this.createProperties();
            return _this;
        }
        /**
         * @param {?} value
         * @param {?} onlySelf
         * @return {?}
         */
        ObjectProperty.prototype.setValue = /**
         * @param {?} value
         * @param {?} onlySelf
         * @return {?}
         */
            function (value, onlySelf) {
                for (var propertyId in value) {
                    if (value.hasOwnProperty(propertyId)) {
                        this.properties[propertyId].setValue(value[propertyId], true);
                    }
                }
                this.updateValueAndValidity(onlySelf, true);
            };
        /**
         * @param {?} value
         * @param {?=} onlySelf
         * @return {?}
         */
        ObjectProperty.prototype.reset = /**
         * @param {?} value
         * @param {?=} onlySelf
         * @return {?}
         */
            function (value, onlySelf) {
                if (onlySelf === void 0) {
                    onlySelf = true;
                }
                value = value || this.schema.default || {};
                this.resetProperties(value);
                this.updateValueAndValidity(onlySelf, true);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        ObjectProperty.prototype.resetProperties = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                for (var propertyId in this.schema.properties) {
                    if (this.schema.properties.hasOwnProperty(propertyId)) {
                        this.properties[propertyId].reset(value[propertyId], true);
                    }
                }
            };
        /**
         * @return {?}
         */
        ObjectProperty.prototype.createProperties = /**
         * @return {?}
         */
            function () {
                this.properties = {};
                this.propertiesId = [];
                for (var propertyId in this.schema.properties) {
                    if (this.schema.properties.hasOwnProperty(propertyId)) {
                        /** @type {?} */
                        var propertySchema = this.schema.properties[propertyId];
                        this.properties[propertyId] = this.formPropertyFactory.createProperty(propertySchema, this, propertyId);
                        this.propertiesId.push(propertyId);
                    }
                }
            };
        /**
         * @return {?}
         */
        ObjectProperty.prototype._hasValue = /**
         * @return {?}
         */
            function () {
                return !!Object.keys(this.value).length;
            };
        /**
         * @return {?}
         */
        ObjectProperty.prototype._updateValue = /**
         * @return {?}
         */
            function () {
                this.reduceValue();
            };
        /**
         * @return {?}
         */
        ObjectProperty.prototype._runValidation = /**
         * @return {?}
         */
            function () {
                var _this = this;
                _super.prototype._runValidation.call(this);
                if (this._errors) {
                    this._errors.forEach(( /**
                     * @param {?} error
                     * @return {?}
                     */function (error) {
                        /** @type {?} */
                        var prop = _this.searchProperty(error.path.slice(1));
                        if (prop) {
                            prop.extendErrors(error);
                        }
                    }));
                }
            };
        /**
         * @private
         * @return {?}
         */
        ObjectProperty.prototype.reduceValue = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var value = {};
                this.forEachChild(( /**
                 * @param {?} property
                 * @param {?} propertyId
                 * @return {?}
                 */function (property, propertyId) {
                    if (property.visible && property._hasValue()) {
                        value[propertyId] = property.value;
                    }
                }));
                this._value = value;
            };
        return ObjectProperty;
    }(PropertyGroup));
    PROPERTY_TYPE_MAPPING.object = ( /**
     * @param {?} schemaValidatorFactory
     * @param {?} validatorRegistry
     * @param {?} expressionCompilerFactory
     * @param {?} schema
     * @param {?} parent
     * @param {?} path
     * @param {?} formPropertyFactory
     * @return {?}
     */function (schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path, formPropertyFactory) {
        return new ObjectProperty(formPropertyFactory, schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ArrayProperty = /** @class */ (function (_super) {
        __extends(ArrayProperty, _super);
        function ArrayProperty(formPropertyFactory, schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path) {
            var _this = _super.call(this, schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path) || this;
            _this.formPropertyFactory = formPropertyFactory;
            return _this;
        }
        /**
         * @param {?=} value
         * @return {?}
         */
        ArrayProperty.prototype.addItem = /**
         * @param {?=} value
         * @return {?}
         */
            function (value) {
                if (value === void 0) {
                    value = null;
                }
                /** @type {?} */
                var newProperty = this.addProperty();
                newProperty.reset(value, false);
                return newProperty;
            };
        /**
         * @private
         * @return {?}
         */
        ArrayProperty.prototype.addProperty = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var newProperty = this.formPropertyFactory.createProperty(this.schema.items, this);
                (( /** @type {?} */(this.properties))).push(newProperty);
                return newProperty;
            };
        /**
         * @param {?} item
         * @return {?}
         */
        ArrayProperty.prototype.removeItem = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                this.properties = (( /** @type {?} */(this.properties))).filter(( /**
                 * @param {?} i
                 * @return {?}
                 */function (i) { return i !== item; }));
                this.updateValueAndValidity(false, true);
            };
        /**
         * @param {?} value
         * @param {?} onlySelf
         * @return {?}
         */
        ArrayProperty.prototype.setValue = /**
         * @param {?} value
         * @param {?} onlySelf
         * @return {?}
         */
            function (value, onlySelf) {
                this.createProperties();
                this.resetProperties(value);
                this.updateValueAndValidity(onlySelf, true);
            };
        /**
         * @return {?}
         */
        ArrayProperty.prototype._hasValue = /**
         * @return {?}
         */
            function () {
                return true;
            };
        /**
         * @return {?}
         */
        ArrayProperty.prototype._updateValue = /**
         * @return {?}
         */
            function () {
                this.reduceValue();
            };
        /**
         * @private
         * @return {?}
         */
        ArrayProperty.prototype.reduceValue = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var value = [];
                this.forEachChild(( /**
                 * @param {?} property
                 * @param {?} _
                 * @return {?}
                 */function (property, _) {
                    if (property.visible && property._hasValue()) {
                        value.push(property.value);
                    }
                }));
                this._value = value;
            };
        /**
         * @param {?} value
         * @param {?=} onlySelf
         * @return {?}
         */
        ArrayProperty.prototype.reset = /**
         * @param {?} value
         * @param {?=} onlySelf
         * @return {?}
         */
            function (value, onlySelf) {
                if (onlySelf === void 0) {
                    onlySelf = true;
                }
                value = value || this.schema.default || [];
                this.properties = [];
                this.resetProperties(value);
                this.updateValueAndValidity(onlySelf, true);
            };
        /**
         * @private
         * @return {?}
         */
        ArrayProperty.prototype.createProperties = /**
         * @private
         * @return {?}
         */
            function () {
                this.properties = [];
            };
        /**
         * @private
         * @param {?} value
         * @return {?}
         */
        ArrayProperty.prototype.resetProperties = /**
         * @private
         * @param {?} value
         * @return {?}
         */
            function (value) {
                for (var idx in value) {
                    if (value.hasOwnProperty(idx)) {
                        /** @type {?} */
                        var property = this.addProperty();
                        property.reset(value[idx], true);
                    }
                }
            };
        return ArrayProperty;
    }(PropertyGroup));
    PROPERTY_TYPE_MAPPING.array = ( /**
     * @param {?} schemaValidatorFactory
     * @param {?} validatorRegistry
     * @param {?} expressionCompilerFactory
     * @param {?} schema
     * @param {?} parent
     * @param {?} path
     * @param {?} formPropertyFactory
     * @return {?}
     */function (schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path, formPropertyFactory) {
        return new ArrayProperty(formPropertyFactory, schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StringProperty = /** @class */ (function (_super) {
        __extends(StringProperty, _super);
        function StringProperty() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        StringProperty.prototype.fallbackValue = /**
         * @return {?}
         */
            function () {
                return '';
            };
        return StringProperty;
    }(AtomicProperty));
    PROPERTY_TYPE_MAPPING.string = ( /**
     * @param {?} schemaValidatorFactory
     * @param {?} validatorRegistry
     * @param {?} expressionCompilerFactory
     * @param {?} schema
     * @param {?} parent
     * @param {?} path
     * @return {?}
     */function (schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path) {
        return new StringProperty(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BooleanProperty = /** @class */ (function (_super) {
        __extends(BooleanProperty, _super);
        function BooleanProperty() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        BooleanProperty.prototype.fallbackValue = /**
         * @return {?}
         */
            function () {
                return null;
            };
        return BooleanProperty;
    }(AtomicProperty));
    PROPERTY_TYPE_MAPPING.boolean = ( /**
     * @param {?} schemaValidatorFactory
     * @param {?} validatorRegistry
     * @param {?} expressionCompilerFactory
     * @param {?} schema
     * @param {?} parent
     * @param {?} path
     * @return {?}
     */function (schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path) {
        return new BooleanProperty(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NumberProperty = /** @class */ (function (_super) {
        __extends(NumberProperty, _super);
        function NumberProperty() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        NumberProperty.prototype.fallbackValue = /**
         * @return {?}
         */
            function () {
                return null;
            };
        /**
         * @param {?} value
         * @param {?=} onlySelf
         * @return {?}
         */
        NumberProperty.prototype.setValue = /**
         * @param {?} value
         * @param {?=} onlySelf
         * @return {?}
         */
            function (value, onlySelf) {
                if (onlySelf === void 0) {
                    onlySelf = false;
                }
                if (typeof value === 'string') {
                    if (value.length) {
                        value = value.indexOf('.') > -1 ? parseFloat(value) : parseInt(value, 10);
                    }
                    else {
                        value = null;
                    }
                }
                this._value = value;
                this.updateValueAndValidity(onlySelf, true);
            };
        return NumberProperty;
    }(AtomicProperty));
    PROPERTY_TYPE_MAPPING.integer = ( /**
     * @param {?} schemaValidatorFactory
     * @param {?} validatorRegistry
     * @param {?} expressionCompilerFactory
     * @param {?} schema
     * @param {?} parent
     * @param {?} path
     * @return {?}
     */function (schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path) {
        return new NumberProperty(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);
    });
    PROPERTY_TYPE_MAPPING.number = ( /**
     * @param {?} schemaValidatorFactory
     * @param {?} validatorRegistry
     * @param {?} expressionCompilerFactory
     * @param {?} schema
     * @param {?} parent
     * @param {?} path
     * @return {?}
     */function (schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path) {
        return new NumberProperty(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     * @template T
     */
    var /**
     * @abstract
     * @template T
     */ Widget = /** @class */ (function () {
        function Widget() {
            this.id = '';
            this.name = '';
            this.schema = {};
        }
        return Widget;
    }());
    var ControlWidget = /** @class */ (function (_super) {
        __extends(ControlWidget, _super);
        function ControlWidget() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        ControlWidget.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var control = this.control;
                this.formProperty.valueChanges.subscribe(( /**
                 * @param {?} newValue
                 * @return {?}
                 */function (newValue) {
                    if (control.value !== newValue) {
                        control.setValue(newValue, { emitEvent: false });
                    }
                }));
                this.formProperty.errorsChanges.subscribe(( /**
                 * @param {?} errors
                 * @return {?}
                 */function (errors) {
                    control.setErrors(errors, { emitEvent: true });
                    /** @type {?} */
                    var messages = (errors || [])
                        .filter(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                        return e.path && e.path.slice(1) === _this.formProperty.path;
                    }))
                        .map(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) { return e.message; }));
                    _this.errorMessages = messages.filter(( /**
                     * @param {?} m
                     * @param {?} i
                     * @return {?}
                     */function (m, i) { return messages.indexOf(m) === i; }));
                }));
                control.valueChanges.subscribe(( /**
                 * @param {?} newValue
                 * @return {?}
                 */function (newValue) {
                    _this.formProperty.setValue(newValue, false);
                }));
            };
        return ControlWidget;
    }(Widget));
    var ArrayLayoutWidget = /** @class */ (function (_super) {
        __extends(ArrayLayoutWidget, _super);
        function ArrayLayoutWidget() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        ArrayLayoutWidget.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var control = this.control;
                this.formProperty.errorsChanges.subscribe(( /**
                 * @param {?} errors
                 * @return {?}
                 */function (errors) {
                    control.setErrors(errors, { emitEvent: true });
                }));
            };
        return ArrayLayoutWidget;
    }(Widget));
    var ObjectLayoutWidget = /** @class */ (function (_super) {
        __extends(ObjectLayoutWidget, _super);
        function ObjectLayoutWidget() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        ObjectLayoutWidget.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var control = this.control;
                this.formProperty.errorsChanges.subscribe(( /**
                 * @param {?} errors
                 * @return {?}
                 */function (errors) {
                    control.setErrors(errors, { emitEvent: true });
                }));
            };
        return ObjectLayoutWidget;
    }(Widget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ArrayWidget = /** @class */ (function (_super) {
        __extends(ArrayWidget, _super);
        function ArrayWidget() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        ArrayWidget.prototype.addItem = /**
         * @return {?}
         */
            function () {
                this.formProperty.addItem();
                this.updateButtonDisabledState();
            };
        /**
         * @param {?} item
         * @return {?}
         */
        ArrayWidget.prototype.removeItem = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                this.formProperty.removeItem(item);
                this.updateButtonDisabledState();
            };
        /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        ArrayWidget.prototype.trackByIndex = /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
            function (index, item) {
                return index;
            };
        /**
         * @return {?}
         */
        ArrayWidget.prototype.updateButtonDisabledState = /**
         * @return {?}
         */
            function () {
                this.buttonDisabledAdd = this.isAddButtonDisabled();
                this.buttonDisabledRemove = this.isRemoveButtonDisabled();
            };
        /**
         * @return {?}
         */
        ArrayWidget.prototype.isAddButtonDisabled = /**
         * @return {?}
         */
            function () {
                if (this.schema.hasOwnProperty('maxItems') && Array.isArray(this.formProperty.properties)) {
                    if (this.formProperty.properties.length >= this.schema.maxItems) {
                        return true;
                    }
                }
                return false;
            };
        /**
         * @return {?}
         */
        ArrayWidget.prototype.isRemoveButtonDisabled = /**
         * @return {?}
         */
            function () {
                if (this.schema.hasOwnProperty('minItems') && Array.isArray(this.formProperty.properties)) {
                    if (this.formProperty.properties.length <= this.schema.minItems) {
                        return true;
                    }
                }
                return false;
            };
        ArrayWidget.decorators = [
            { type: core.Component, args: [{
                        selector: 'sf-array-widget',
                        template: "<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n\t<span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<div *ngFor=\"let itemProperty of formProperty.properties\">\n\t\t<sf-form-element [formProperty]=\"itemProperty\"></sf-form-element>\n\t\t<button (click)=\"removeItem(itemProperty)\" class=\"btn btn-default array-remove-button\"\n\t\t\t[disabled]=\"isRemoveButtonDisabled()\" \n\t\t\t*ngIf=\"!(schema.hasOwnProperty('minItems') && schema.hasOwnProperty('maxItems') && schema.minItems === schema.maxItems)\"\n\t\t\t>\n\t\t\t<span class=\"glyphicon glyphicon-minus\" aria-hidden=\"true\"></span> Remove\n\t\t</button>\n\t</div>\n\t<button (click)=\"addItem()\" class=\"btn btn-default array-add-button\"\n\t\t[disabled]=\"isAddButtonDisabled()\"\n\t\t*ngIf=\"!(schema.hasOwnProperty('minItems') && schema.hasOwnProperty('maxItems') && schema.minItems === schema.maxItems)\"\n\t>\n\t\t<span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span> Add\n\t</button>\n</div>"
                    }] }
        ];
        return ArrayWidget;
    }(ArrayLayoutWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ButtonWidget = /** @class */ (function () {
        function ButtonWidget() {
        }
        ButtonWidget.decorators = [
            { type: core.Component, args: [{
                        selector: 'sf-button-widget',
                        template: '<button (click)="button.action($event)">{{button.label}}</button>'
                    }] }
        ];
        return ButtonWidget;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ObjectWidget = /** @class */ (function (_super) {
        __extends(ObjectWidget, _super);
        function ObjectWidget() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        ObjectWidget.decorators = [
            { type: core.Component, args: [{
                        selector: 'sf-form-object',
                        template: "<fieldset *ngFor=\"let fieldset of formProperty.schema.fieldsets\">\n\t<legend *ngIf=\"fieldset.title\">{{fieldset.title}}</legend>\n\t<div *ngIf=\"fieldset.description\">{{fieldset.description}}</div>\n\t<div *ngFor=\"let fieldId of fieldset.fields\">\n\t\t<sf-form-element [formProperty]=\"formProperty.getProperty(fieldId)\"></sf-form-element>\n\t</div>\n</fieldset>"
                    }] }
        ];
        return ObjectWidget;
    }(ObjectLayoutWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckboxWidget = /** @class */ (function (_super) {
        __extends(CheckboxWidget, _super);
        function CheckboxWidget() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.checked = {};
            return _this;
        }
        /**
         * @return {?}
         */
        CheckboxWidget.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var control = this.control;
                this.formProperty.valueChanges.subscribe(( /**
                 * @param {?} newValue
                 * @return {?}
                 */function (newValue) {
                    if (control.value !== newValue) {
                        control.setValue(newValue, { emitEvent: false });
                        if (newValue && Array.isArray(newValue)) {
                            newValue.map(( /**
                             * @param {?} v
                             * @return {?}
                             */function (v) { return _this.checked[v] = true; }));
                        }
                    }
                }));
                this.formProperty.errorsChanges.subscribe(( /**
                 * @param {?} errors
                 * @return {?}
                 */function (errors) {
                    control.setErrors(errors, { emitEvent: true });
                }));
                control.valueChanges.subscribe(( /**
                 * @param {?} newValue
                 * @return {?}
                 */function (newValue) {
                    _this.formProperty.setValue(newValue, false);
                }));
            };
        /**
         * @param {?} el
         * @return {?}
         */
        CheckboxWidget.prototype.onCheck = /**
         * @param {?} el
         * @return {?}
         */
            function (el) {
                if (el.checked) {
                    this.checked[el.value] = true;
                }
                else {
                    delete this.checked[el.value];
                }
                this.formProperty.setValue(Object.keys(this.checked), false);
            };
        CheckboxWidget.decorators = [
            { type: core.Component, args: [{
                        selector: 'sf-checkbox-widget',
                        template: "<div class=\"widget form-group\">\n    <label [attr.for]=\"id\" class=\"horizontal control-label\">\n        {{ schema.title }}\n    </label>\n\t<div *ngIf=\"schema.type!='array'\" class=\"checkbox\">\n\t\t<label class=\"horizontal control-label\">\n\t\t\t<input [formControl]=\"control\" [attr.name]=\"name\" [attr.id]=\"id\" [indeterminate]=\"control.value !== false && control.value !== true ? true :null\" type=\"checkbox\" [disabled]=\"schema.readOnly\">\n\t\t\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n\t\t\t{{schema.description}}\n\t\t</label>\n\t</div>\n\t<ng-container *ngIf=\"schema.type==='array'\">\n\t\t<div *ngFor=\"let option of schema.items.oneOf\" class=\"checkbox\">\n\t\t\t<label class=\"horizontal control-label\">\n\t\t\t\t<input [attr.name]=\"name\"\n\t\t\t\t\tvalue=\"{{option.enum[0]}}\" type=\"checkbox\" \n\t\t\t\t\t[attr.disabled]=\"schema.readOnly\"\n\t\t\t\t\t(change)=\"onCheck($event.target)\"\n\t\t\t\t\t[attr.checked]=\"checked[option.enum[0]] ? true : null\"\n\t\t\t\t\t[attr.id]=\"id + '.' + option.enum[0]\"\n\t\t\t\t\t>\n\t\t\t\t{{option.description}}\n\t\t\t</label>\n\t\t</div>\n\t</ng-container>\n</div>"
                    }] }
        ];
        return CheckboxWidget;
    }(ControlWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FileWidget = /** @class */ (function (_super) {
        __extends(FileWidget, _super);
        function FileWidget() {
            var _this = _super.call(this) || this;
            _this.reader = new FileReader();
            _this.filedata = {};
            return _this;
        }
        /**
         * @return {?}
         */
        FileWidget.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // OVERRIDE ControlWidget ngAfterViewInit() as ReactiveForms do not handle
                // file inputs
                /** @type {?} */
                var control = this.control;
                this.formProperty.errorsChanges.subscribe(( /**
                 * @param {?} errors
                 * @return {?}
                 */function (errors) {
                    control.setErrors(errors, { emitEvent: true });
                }));
                this.reader.onloadend = ( /**
                 * @return {?}
                 */function () {
                    _this.filedata.data = window.btoa((( /** @type {?} */(_this.reader.result))));
                    _this.formProperty.setValue(_this.filedata, false);
                });
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        FileWidget.prototype.onFileChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                /** @type {?} */
                var file = $event.target.files[0];
                this.filedata.filename = file.name;
                this.filedata.size = file.size;
                this.filedata['content-type'] = file.type;
                this.filedata.encoding = 'base64';
                this.reader.readAsBinaryString(file);
            };
        FileWidget.decorators = [
            { type: core.Component, args: [{
                        selector: 'sf-file-widget',
                        template: "<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n  <input [name]=\"name\" class=\"text-widget file-widget\" [attr.id]=\"id\"\n    [formControl]=\"control\" type=\"file\" [attr.disabled]=\"schema.readOnly?true:null\"\n    (change)=\"onFileChange($event)\">\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>"
                    }] }
        ];
        /** @nocollapse */
        FileWidget.ctorParameters = function () { return []; };
        return FileWidget;
    }(ControlWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IntegerWidget = /** @class */ (function (_super) {
        __extends(IntegerWidget, _super);
        function IntegerWidget() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        IntegerWidget.decorators = [
            { type: core.Component, args: [{
                        selector: 'sf-integer-widget',
                        template: "<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n  <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<input [attr.readonly]=\"schema.readOnly?true:null\" [attr.name]=\"name\"\n\t[attr.id]=\"id\"\n\tclass=\"text-widget integer-widget form-control\" [formControl]=\"control\"\n\t[attr.type]=\"'number'\" [attr.min]=\"schema.minimum\" [attr.max]=\"schema.maximum\"\n\t[attr.placeholder]=\"schema.placeholder\"\n\t[attr.maxLength]=\"schema.maxLength || null\"\n  [attr.minLength]=\"schema.minLength || null\">\n</div>"
                    }] }
        ];
        return IntegerWidget;
    }(ControlWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TextAreaWidget = /** @class */ (function (_super) {
        __extends(TextAreaWidget, _super);
        function TextAreaWidget() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        TextAreaWidget.decorators = [
            { type: core.Component, args: [{
                        selector: 'sf-textarea-widget',
                        template: "<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<textarea [readonly]=\"schema.readOnly\" [name]=\"name\"\n\t\t[attr.id]=\"id\"\n\t\tclass=\"text-widget textarea-widget form-control\"\n\t\t[attr.placeholder]=\"schema.placeholder\"\n\t\t[attr.maxLength]=\"schema.maxLength || null\"\n    [attr.minLength]=\"schema.minLength || null\"\n\t\t[formControl]=\"control\"></textarea>\n</div>"
                    }] }
        ];
        return TextAreaWidget;
    }(ControlWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RadioWidget = /** @class */ (function (_super) {
        __extends(RadioWidget, _super);
        function RadioWidget() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RadioWidget.decorators = [
            { type: core.Component, args: [{
                        selector: 'sf-radio-widget',
                        template: "<div class=\"widget form-group\">\n\t<label>{{schema.title}}</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<div *ngFor=\"let option of schema.oneOf\" class=\"radio\">\n\t\t<label class=\"horizontal control-label\">\n\t\t\t<input [formControl]=\"control\" [attr.name]=\"name\" [attr.id]=\"id + '.' + option.enum[0]\" value=\"{{option.enum[0]}}\" type=\"radio\"  [disabled]=\"schema.readOnly||option.readOnly\">\n\t\t\t{{option.description}}\n\t\t</label>\n\t</div>\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>"
                    }] }
        ];
        return RadioWidget;
    }(ControlWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RangeWidget = /** @class */ (function (_super) {
        __extends(RangeWidget, _super);
        function RangeWidget() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        RangeWidget.decorators = [
            { type: core.Component, args: [{
                        selector: 'sf-range-widget',
                        template: "<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\t\n\t<input [name]=\"name\" class=\"text-widget range-widget\" [attr.id]=\"id\"\n\t[formControl]=\"control\" [attr.type]=\"'range'\" [attr.min]=\"schema.minimum\" [attr.max]=\"schema.maximum\" [disabled]=\"schema.readOnly?true:null\" >\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\">\n</div>"
                    }] }
        ];
        return RangeWidget;
    }(ControlWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SelectWidget = /** @class */ (function (_super) {
        __extends(SelectWidget, _super);
        function SelectWidget() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        SelectWidget.decorators = [
            { type: core.Component, args: [{
                        selector: 'sf-select-widget',
                        template: "<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n\n\t<span *ngIf=\"schema.description\" class=\"formHelp\">\n\t\t{{schema.description}}\n\t</span>\n\n\t<select *ngIf=\"schema.type!='array'\" [formControl]=\"control\" [attr.name]=\"name\" [attr.id]=\"id\" [disabled]=\"schema.readOnly\" [disableControl]=\"schema.readOnly\" class=\"form-control\">\n\t\t<ng-container *ngIf=\"schema.oneOf; else use_enum\">\n\t\t\t<option *ngFor=\"let option of schema.oneOf\" [ngValue]=\"option.enum[0]\" >{{option.description}}</option>\n\t\t</ng-container>\n\t\t<ng-template #use_enum>\n\t\t\t<option *ngFor=\"let option of schema.enum\" [ngValue]=\"option\" >{{option}}</option>\n\t\t</ng-template>\n\t</select>\n\n\t<select *ngIf=\"schema.type==='array'\" multiple [formControl]=\"control\" [attr.name]=\"name\" [attr.id]=\"id\" [disabled]=\"schema.readOnly\" [disableControl]=\"schema.readOnly\" class=\"form-control\">\n    <option *ngFor=\"let option of schema.items.oneOf\" [ngValue]=\"option.enum[0]\" [disabled]=\"option.readOnly\">{{option.description}}</option>\n\t</select>\n\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>"
                    }] }
        ];
        return SelectWidget;
    }(ControlWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StringWidget = /** @class */ (function (_super) {
        __extends(StringWidget, _super);
        function StringWidget() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        /**
         * @return {?}
         */
        StringWidget.prototype.getInputType = /**
         * @return {?}
         */
            function () {
                if (!this.schema.widget.id || this.schema.widget.id === 'string') {
                    return 'text';
                }
                else {
                    return this.schema.widget.id;
                }
            };
        StringWidget.decorators = [
            { type: core.Component, args: [{
                        selector: 'sf-string-widget',
                        template: "<input *ngIf=\"this.schema.widget.id ==='hidden'; else notHiddenFieldBlock\"\n  [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n<ng-template #notHiddenFieldBlock>\n<div class=\"widget form-group\">\n    <label [attr.for]=\"id\" class=\"horizontal control-label\">\n    \t{{ schema.title }}\n    </label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n    <input [name]=\"name\" [attr.readonly]=\"(schema.widget.id!=='color') && schema.readOnly?true:null\"\n    class=\"text-widget.id textline-widget form-control\"\n    [attr.type]=\"!this.schema.widget.id || this.schema.widget.id === 'string' ? 'text' : this.schema.widget.id\"\n    [attr.id]=\"id\"  [formControl]=\"control\" [attr.placeholder]=\"schema.placeholder\"\n    [attr.maxLength]=\"schema.maxLength || null\"\n    [attr.minLength]=\"schema.minLength || null\"\n    [attr.required]=\"schema.isRequired || null\"\n    [attr.disabled]=\"(schema.widget.id=='color' && schema.readOnly)?true:null\">\n    <input *ngIf=\"(schema.widget.id==='color' && schema.readOnly)\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>\n</ng-template>"
                    }] }
        ];
        return StringWidget;
    }(ControlWidget));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultWidgetRegistry = /** @class */ (function (_super) {
        __extends(DefaultWidgetRegistry, _super);
        function DefaultWidgetRegistry() {
            var _this = _super.call(this) || this;
            _this.register('array', ArrayWidget);
            _this.register('object', ObjectWidget);
            _this.register('string', StringWidget);
            _this.register('search', StringWidget);
            _this.register('tel', StringWidget);
            _this.register('url', StringWidget);
            _this.register('email', StringWidget);
            _this.register('password', StringWidget);
            _this.register('color', StringWidget);
            _this.register('date', StringWidget);
            _this.register('date-time', StringWidget);
            _this.register('time', StringWidget);
            _this.register('integer', IntegerWidget);
            _this.register('number', IntegerWidget);
            _this.register('range', RangeWidget);
            _this.register('textarea', TextAreaWidget);
            _this.register('file', FileWidget);
            _this.register('select', SelectWidget);
            _this.register('radio', RadioWidget);
            _this.register('boolean', CheckboxWidget);
            _this.register('checkbox', CheckboxWidget);
            _this.register('button', ButtonWidget);
            _this.setDefaultWidget(StringWidget);
            return _this;
        }
        return DefaultWidgetRegistry;
    }(WidgetRegistry));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DisableControlDirective = /** @class */ (function () {
        function DisableControlDirective(ngControl) {
            this.ngControl = ngControl;
        }
        Object.defineProperty(DisableControlDirective.prototype, "disableControl", {
            set: /**
             * @param {?} condition
             * @return {?}
             */ function (condition) {
                /** @type {?} */
                var action = condition ? 'disable' : 'enable';
                this.ngControl.control[action]();
            },
            enumerable: true,
            configurable: true
        });
        DisableControlDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[disableControl]'
                    },] }
        ];
        /** @nocollapse */
        DisableControlDirective.ctorParameters = function () {
            return [
                { type: forms.NgControl }
            ];
        };
        DisableControlDirective.propDecorators = {
            disableControl: [{ type: core.Input }]
        };
        return DisableControlDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultWidget = /** @class */ (function () {
        function DefaultWidget() {
        }
        DefaultWidget.decorators = [
            { type: core.Component, args: [{
                        selector: 'sf-default-field',
                        template: "<p>Unknow type</p>"
                    }] }
        ];
        return DefaultWidget;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var moduleProviders = [
        {
            provide: WidgetRegistry,
            useClass: DefaultWidgetRegistry
        },
        {
            provide: SchemaValidatorFactory,
            useClass: ZSchemaValidatorFactory
        },
        {
            provide: ExpressionCompilerFactory,
            useClass: JEXLExpressionCompilerFactory
        }
    ];
    var SchemaFormModule = /** @class */ (function () {
        function SchemaFormModule() {
        }
        /**
         * @return {?}
         */
        SchemaFormModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: SchemaFormModule,
                    providers: __spread(moduleProviders)
                };
            };
        SchemaFormModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [common.CommonModule, forms.FormsModule, forms.ReactiveFormsModule],
                        declarations: [
                            FormElementComponent,
                            FormElementComponentAction,
                            FormComponent,
                            WidgetChooserComponent,
                            DefaultWidget,
                            ArrayWidget,
                            ButtonWidget,
                            ObjectWidget,
                            CheckboxWidget,
                            FileWidget,
                            IntegerWidget,
                            TextAreaWidget,
                            RadioWidget,
                            RangeWidget,
                            SelectWidget,
                            StringWidget,
                            DisableControlDirective
                        ],
                        entryComponents: [
                            FormElementComponent,
                            FormElementComponentAction,
                            FormComponent,
                            WidgetChooserComponent,
                            ArrayWidget,
                            ButtonWidget,
                            ObjectWidget,
                            CheckboxWidget,
                            FileWidget,
                            IntegerWidget,
                            TextAreaWidget,
                            RadioWidget,
                            RangeWidget,
                            SelectWidget,
                            StringWidget
                        ],
                        exports: [
                            FormComponent,
                            FormElementComponent,
                            FormElementComponentAction,
                            WidgetChooserComponent,
                            ArrayWidget,
                            ButtonWidget,
                            ObjectWidget,
                            CheckboxWidget,
                            FileWidget,
                            IntegerWidget,
                            TextAreaWidget,
                            RadioWidget,
                            RangeWidget,
                            SelectWidget,
                            StringWidget,
                            DisableControlDirective
                        ]
                    },] }
        ];
        return SchemaFormModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TemplateSchemaService = /** @class */ (function () {
        function TemplateSchemaService() {
            this.changes = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        TemplateSchemaService.prototype.changed = /**
         * @return {?}
         */
            function () {
                this.changes.emit();
            };
        return TemplateSchemaService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TemplateSchemaElement = /** @class */ (function () {
        function TemplateSchemaElement() {
        }
        /**
         * @param {?} elementRef
         * @return {?}
         */
        TemplateSchemaElement.prototype.getTextContent = /**
         * @param {?} elementRef
         * @return {?}
         */
            function (elementRef) {
                /** @type {?} */
                var nodes = Array.from(elementRef.nativeElement.childNodes);
                /** @type {?} */
                var node = ( /** @type {?} */(nodes.filter(( /**
                 * @param {?} el
                 * @return {?}
                 */function (el) {
                    return el.nodeType === el.TEXT_NODE;
                })).pop()));
                if (!node || !node.nodeValue) {
                    return '';
                }
                return node.nodeValue.trim();
            };
        return TemplateSchemaElement;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ButtonComponent = /** @class */ (function (_super) {
        __extends(ButtonComponent, _super);
        function ButtonComponent(elementRef) {
            var _this = _super.call(this) || this;
            _this.elementRef = elementRef;
            _this.label = '';
            _this.click = new core.EventEmitter();
            return _this;
        }
        /**
         * @private
         * @return {?}
         */
        ButtonComponent.prototype.setLabelFromContent = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var textContent = this.getTextContent(this.elementRef);
                // label as @Input takes priority over content text
                if (textContent && !this.label) {
                    this.label = textContent;
                }
            };
        /**
         * @return {?}
         */
        ButtonComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.setLabelFromContent();
            };
        ButtonComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sf-button',
                        template: "<ng-content></ng-content>\n",
                        providers: [
                            {
                                provide: TemplateSchemaElement,
                                useExisting: core.forwardRef(( /**
                                 * @return {?}
                                 */function () { return ButtonComponent; })),
                            }
                        ]
                    }] }
        ];
        /** @nocollapse */
        ButtonComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        ButtonComponent.propDecorators = {
            id: [{ type: core.Input }],
            label: [{ type: core.Input }],
            widget: [{ type: core.Input }],
            click: [{ type: core.Output }]
        };
        return ButtonComponent;
    }(TemplateSchemaElement));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var FieldType = {
        String: 'string',
        Object: 'object',
        Array: 'array',
        Boolean: 'boolean',
        Integer: 'integer',
        Number: 'number',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ FieldParent = /** @class */ (function (_super) {
        __extends(FieldParent, _super);
        function FieldParent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.name = '';
            return _this;
        }
        Object.defineProperty(FieldParent.prototype, "path", {
            get: /**
             * @return {?}
             */ function () {
                if (!this.name) {
                    return '';
                }
                return '/' + this.name;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FieldParent.prototype.getButtons = /**
         * @return {?}
         */
            function () {
                var _this = this;
                return this.childButtons.map(( /**
                 * @param {?} button
                 * @param {?} index
                 * @return {?}
                 */function (button, index) {
                    if (!button.id) {
                        /** @type {?} */
                        var randomString = Math.random().toString(16).substr(2, 8);
                        // generate id for button
                        button.id = _this.name + randomString + '_' + (index + 1);
                    }
                    // register as button action the EventEmitter click
                    _this.actionRegistry.register(button.id, button.click.emit.bind(button.click));
                    /** @type {?} */
                    var _button = ( /** @type {?} */({
                        id: button.id,
                        label: button.label,
                    }));
                    if (button.widget) {
                        _button.widget = button.widget;
                    }
                    return _button;
                }));
            };
        /**
         * @protected
         * @param {?} fields
         * @return {?}
         */
        FieldParent.prototype.getFieldsValidators = /**
         * @protected
         * @param {?} fields
         * @return {?}
         */
            function (fields) {
                return fields.reduce(( /**
                 * @param {?} validators
                 * @param {?} field
                 * @return {?}
                 */function (validators, field) {
                    return validators.concat(field.getValidators());
                }), []);
            };
        /**
         * @protected
         * @param {?} fields
         * @return {?}
         */
        FieldParent.prototype.getFieldsSchema = /**
         * @protected
         * @param {?} fields
         * @return {?}
         */
            function (fields) {
                var _this = this;
                return fields.reduce(( /**
                 * @param {?} schema
                 * @param {?} field
                 * @return {?}
                 */function (schema, field) {
                    switch (_this.type) {
                        case FieldType.Array:
                            schema.items = field.getSchema();
                            break;
                        default:
                            if (!schema.properties) {
                                schema.properties = {};
                            }
                            schema.properties[field.name] = field.getSchema();
                            break;
                    }
                    /** @type {?} */
                    var buttons = field.getButtons();
                    if (buttons.length > 0) {
                        schema.buttons = buttons;
                    }
                    if (!field.required) {
                        return schema;
                    }
                    if (!schema.required) {
                        schema.required = [];
                    }
                    schema.required.push(field.name);
                    return schema;
                }), {});
            };
        return FieldParent;
    }(TemplateSchemaElement));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ItemComponent = /** @class */ (function (_super) {
        __extends(ItemComponent, _super);
        function ItemComponent(elementRef) {
            var _this = _super.call(this) || this;
            _this.elementRef = elementRef;
            return _this;
        }
        /**
         * @return {?}
         */
        ItemComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.description = this.getTextContent(this.elementRef);
            };
        ItemComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sf-item',
                        template: "<ng-content></ng-content>\n"
                    }] }
        ];
        /** @nocollapse */
        ItemComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        ItemComponent.propDecorators = {
            value: [{ type: core.Input }]
        };
        return ItemComponent;
    }(TemplateSchemaElement));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FieldComponent = /** @class */ (function (_super) {
        __extends(FieldComponent, _super);
        function FieldComponent(elementRef, templateSchemaService, actionRegistry) {
            var _this = _super.call(this) || this;
            _this.elementRef = elementRef;
            _this.templateSchemaService = templateSchemaService;
            _this.actionRegistry = actionRegistry;
            _this.type = FieldType.String;
            _this.schema = {};
            return _this;
        }
        /**
         * @return {?}
         */
        FieldComponent.prototype.getSchema = /**
         * @return {?}
         */
            function () {
                var _this = this;
                var _a = this.getFieldsSchema(this.childFields.filter(( /**
                 * @param {?} field
                 * @return {?}
                 */function (field) { return field !== _this; }))), properties = _a.properties, items = _a.items, required = _a.required;
                /** @type {?} */
                var oneOf = this.getOneOf();
                /** @type {?} */
                var schema = ( /** @type {?} */({
                    type: this.type
                }));
                if (this.title !== undefined) {
                    schema.title = this.title;
                }
                if (properties !== undefined) {
                    schema.properties = properties;
                }
                if (items !== undefined) {
                    schema.items = items;
                }
                // requried child fields
                if (required !== undefined) {
                    schema.required = required;
                }
                if (oneOf !== undefined) {
                    schema.oneOf = oneOf;
                }
                if (this.description !== undefined) {
                    schema.description = this.description;
                }
                if (this.placeholder !== undefined) {
                    schema.placeholder = this.placeholder;
                }
                if (this.format !== undefined) {
                    schema.format = this.format;
                }
                if (this.widget !== undefined) {
                    schema.widget = this.widget;
                }
                if (this.readOnly !== undefined) {
                    schema.readOnly = this.readOnly;
                }
                /** @type {?} */
                var buttons = this.getButtons();
                if (buttons.length > 0) {
                    schema.buttons = buttons;
                }
                // @Input schema takes precedence
                return Object.assign(schema, this.schema);
            };
        /**
         * @return {?}
         */
        FieldComponent.prototype.getValidators = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // registering validator here is not possible since prop full path is needed
                /** @type {?} */
                var childValidators = this.getFieldsValidators(this.childFields.filter(( /**
                 * @param {?} field
                 * @return {?}
                 */function (field) { return field !== _this; })));
                /** @type {?} */
                var validators = childValidators.map(( /**
                 * @param {?} __0
                 * @return {?}
                 */function (_a) {
                    var path = _a.path, validator = _a.validator;
                    return {
                        path: _this.path + path,
                        validator: validator
                    };
                }));
                if (!this.validator) {
                    return validators;
                }
                validators.push({ path: this.path, validator: this.validator });
                return validators;
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        FieldComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var e_1, _a;
                /** @type {?} */
                var keys = Object.keys(changes);
                if (keys.length > 0) {
                    try {
                        for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                            var key = keys_1_1.value;
                            if (!changes[key].isFirstChange()) {
                                // on any input change, force schema change generation
                                this.templateSchemaService.changed();
                                break;
                            }
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return))
                                _a.call(keys_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                }
            };
        /**
         * @private
         * @return {?}
         */
        FieldComponent.prototype.getOneOf = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.childItems.length === 0) {
                    return;
                }
                /** @type {?} */
                var items = this.childItems.map(( /**
                 * @param {?} __0
                 * @return {?}
                 */function (_a) {
                    var value = _a.value, description = _a.description;
                    if (!Array.isArray(value)) {
                        return { enum: [value], description: description };
                    }
                    return { enum: value, description: description };
                }));
                if (items.length === 0) {
                    return;
                }
                return items;
            };
        /**
         * @private
         * @return {?}
         */
        FieldComponent.prototype.setTitleFromContent = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var textContent = this.getTextContent(this.elementRef);
                //  title as @Input takes priority over content text
                if (textContent && !this.title) {
                    this.title = textContent;
                }
            };
        /**
         * @return {?}
         */
        FieldComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // cache it
                this.setTitleFromContent();
                rxjs.merge(this.childFields.changes, this.childItems.changes, this.childButtons.changes)
                    .subscribe(( /**
             * @return {?}
             */function () { return _this.templateSchemaService.changed(); }));
            };
        FieldComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'sf-field',
                        template: "<ng-content ></ng-content>\n"
                    }] }
        ];
        /** @nocollapse */
        FieldComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: TemplateSchemaService },
                { type: ActionRegistry }
            ];
        };
        FieldComponent.propDecorators = {
            childFields: [{ type: core.ContentChildren, args: [FieldComponent,] }],
            childItems: [{ type: core.ContentChildren, args: [ItemComponent,] }],
            childButtons: [{ type: core.ContentChildren, args: [ButtonComponent,] }],
            name: [{ type: core.Input }],
            type: [{ type: core.Input }],
            format: [{ type: core.Input }],
            required: [{ type: core.Input }],
            readOnly: [{ type: core.Input }],
            title: [{ type: core.Input }],
            description: [{ type: core.Input }],
            placeholder: [{ type: core.Input }],
            widget: [{ type: core.Input }],
            validator: [{ type: core.Input }],
            schema: [{ type: core.Input }]
        };
        return FieldComponent;
    }(FieldParent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TemplateSchemaDirective = /** @class */ (function (_super) {
        __extends(TemplateSchemaDirective, _super);
        function TemplateSchemaDirective(actionRegistry, validatorRegistry, formComponent, terminatorService, templateSchemaService) {
            var _this = _super.call(this) || this;
            _this.actionRegistry = actionRegistry;
            _this.validatorRegistry = validatorRegistry;
            _this.formComponent = formComponent;
            _this.terminatorService = terminatorService;
            _this.templateSchemaService = templateSchemaService;
            return _this;
        }
        /**
         * @param {?} fields
         * @return {?}
         */
        TemplateSchemaDirective.prototype.setFormDocumentSchema = /**
         * @param {?} fields
         * @return {?}
         */
            function (fields) {
                var _this = this;
                this.actionRegistry.clear();
                this.validatorRegistry.clear();
                /** @type {?} */
                var schema = this.getFieldsSchema(fields);
                /** @type {?} */
                var validators = this.getFieldsValidators(fields);
                validators.forEach(( /**
                 * @param {?} __0
                 * @return {?}
                 */function (_a) {
                    var path = _a.path, validator = _a.validator;
                    _this.validatorRegistry.register(path, validator);
                }));
                /** @type {?} */
                var previousSchema = this.formComponent.schema;
                this.formComponent.schema = {
                    type: FieldType.Object,
                    properties: schema.properties
                };
                if (schema.required && schema.required.length > 0) {
                    this.formComponent.schema.requred = schema.required;
                }
                /** @type {?} */
                var buttons = this.getButtons();
                if (buttons.length > 0) {
                    this.formComponent.schema.buttons = buttons;
                }
                this.formComponent.ngOnChanges({
                    schema: new core.SimpleChange(previousSchema, this.formComponent.schema, Boolean(previousSchema))
                });
            };
        /**
         * @return {?}
         */
        TemplateSchemaDirective.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.childFields.length > 0) {
                    this.setFormDocumentSchema(this.childFields.toArray());
                }
                rxjs.merge(this.childFields.changes, this.templateSchemaService.changes)
                    .subscribe(( /**
             * @return {?}
             */function () {
                    _this.terminatorService.destroy();
                    _this.setFormDocumentSchema(_this.childFields.toArray());
                }));
            };
        TemplateSchemaDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'sf-form[templateSchema]',
                        providers: [
                            TemplateSchemaService
                        ]
                    },] }
        ];
        /** @nocollapse */
        TemplateSchemaDirective.ctorParameters = function () {
            return [
                { type: ActionRegistry },
                { type: ValidatorRegistry },
                { type: FormComponent },
                { type: TerminatorService },
                { type: TemplateSchemaService }
            ];
        };
        TemplateSchemaDirective.propDecorators = {
            childFields: [{ type: core.ContentChildren, args: [FieldComponent,] }],
            childButtons: [{ type: core.ContentChildren, args: [ButtonComponent,] }]
        };
        return TemplateSchemaDirective;
    }(FieldParent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TemplateSchemaModule = /** @class */ (function () {
        function TemplateSchemaModule() {
        }
        TemplateSchemaModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule
                        ],
                        declarations: [
                            TemplateSchemaDirective,
                            FieldComponent,
                            ButtonComponent,
                            ItemComponent
                        ],
                        exports: [
                            TemplateSchemaDirective,
                            FieldComponent,
                            ButtonComponent,
                            ItemComponent
                        ]
                    },] }
        ];
        return TemplateSchemaModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.FormComponent = FormComponent;
    exports.FormElementComponent = FormElementComponent;
    exports.FormElementComponentAction = FormElementComponentAction;
    exports.WidgetChooserComponent = WidgetChooserComponent;
    exports.WidgetRegistry = WidgetRegistry;
    exports.FormProperty = FormProperty;
    exports.ArrayProperty = ArrayProperty;
    exports.FormPropertyFactory = FormPropertyFactory;
    exports.SchemaPreprocessor = SchemaPreprocessor;
    exports.ValidatorRegistry = ValidatorRegistry;
    exports.ActionRegistry = ActionRegistry;
    exports.BindingRegistry = BindingRegistry;
    exports.SchemaValidatorFactory = SchemaValidatorFactory;
    exports.ZSchemaValidatorFactory = ZSchemaValidatorFactory;
    exports.WidgetFactory = WidgetFactory;
    exports.TerminatorService = TerminatorService;
    exports.Widget = Widget;
    exports.ControlWidget = ControlWidget;
    exports.ArrayLayoutWidget = ArrayLayoutWidget;
    exports.ObjectLayoutWidget = ObjectLayoutWidget;
    exports.ArrayWidget = ArrayWidget;
    exports.ButtonWidget = ButtonWidget;
    exports.ObjectWidget = ObjectWidget;
    exports.CheckboxWidget = CheckboxWidget;
    exports.FileWidget = FileWidget;
    exports.IntegerWidget = IntegerWidget;
    exports.TextAreaWidget = TextAreaWidget;
    exports.RadioWidget = RadioWidget;
    exports.RangeWidget = RangeWidget;
    exports.SelectWidget = SelectWidget;
    exports.StringWidget = StringWidget;
    exports.DefaultWidgetRegistry = DefaultWidgetRegistry;
    exports.DisableControlDirective = DisableControlDirective;
    exports.SchemaFormModule = SchemaFormModule;
    exports.TemplateSchemaModule = TemplateSchemaModule;
    exports.ɵj = DefaultWidget;
    exports.ɵh = ExpressionCompilerFactory;
    exports.ɵi = JEXLExpressionCompilerFactory;
    exports.ɵa = useFactory;
    exports.ɵb = ActionRegistry;
    exports.ɵe = BindingRegistry;
    exports.ɵg = FormPropertyFactory;
    exports.ɵf = SchemaPreprocessor;
    exports.ɵc = ValidatorRegistry;
    exports.ɵd = PropertyBindingRegistry;
    exports.ɵq = ButtonComponent;
    exports.ɵl = FieldParent;
    exports.ɵo = FieldComponent;
    exports.ɵp = ItemComponent;
    exports.ɵm = TemplateSchemaElement;
    exports.ɵk = TemplateSchemaDirective;
    exports.ɵn = TemplateSchemaService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=ngx-schema-form.umd.js.map