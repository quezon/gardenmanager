{"version":3,"sources":["ng://ngx-schema-form/lib/model/actionregistry.ts","node_modules/tslib/tslib.es6.js","ng://ngx-schema-form/lib/model/formproperty.ts","ng://ngx-schema-form/lib/model/typemapping.ts","ng://ngx-schema-form/lib/model/formpropertyfactory.ts","ng://ngx-schema-form/lib/model/schemapreprocessor.ts","ng://ngx-schema-form/lib/model/utils.ts","ng://ngx-schema-form/lib/model/validatorregistry.ts","ng://ngx-schema-form/lib/model/bindingregistry.ts","ng://ngx-schema-form/lib/schemavalidatorfactory.ts","ng://ngx-schema-form/lib/widgetregistry.ts","ng://ngx-schema-form/lib/widgetfactory.ts","ng://ngx-schema-form/lib/terminator.service.ts","ng://ngx-schema-form/lib/property-binding-registry.ts","ng://ngx-schema-form/lib/expression-compiler-factory.ts","ng://ngx-schema-form/lib/form.component.ts","ng://ngx-schema-form/lib/formelement.component.ts","ng://ngx-schema-form/lib/formelement.action.component.ts","ng://ngx-schema-form/lib/widgetchooser.component.ts","ng://ngx-schema-form/lib/model/atomicproperty.ts","ng://ngx-schema-form/lib/model/objectproperty.ts","ng://ngx-schema-form/lib/model/arrayproperty.ts","ng://ngx-schema-form/lib/model/stringproperty.ts","ng://ngx-schema-form/lib/model/booleanproperty.ts","ng://ngx-schema-form/lib/model/numberproperty.ts","ng://ngx-schema-form/lib/widget.ts","ng://ngx-schema-form/lib/defaultwidgets/array/array.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/button/button.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/object/object.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/checkbox/checkbox.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/file/file.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/integer/integer.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/textarea/textarea.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/radio/radio.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/range/range.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/select/select.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/string/string.widget.ts","ng://ngx-schema-form/lib/defaultwidgets/defaultwidgetregistry.ts","ng://ngx-schema-form/lib/defaultwidgets/_directives/disableControl.directive.ts","ng://ngx-schema-form/lib/default.widget.ts","ng://ngx-schema-form/lib/schema-form.module.ts","ng://ngx-schema-form/lib/template-schema/template-schema.service.ts","ng://ngx-schema-form/lib/template-schema/template-schema-element.ts","ng://ngx-schema-form/lib/template-schema/button/button.component.ts","ng://ngx-schema-form/lib/template-schema/field/field.ts","ng://ngx-schema-form/lib/template-schema/field/field-parent.ts","ng://ngx-schema-form/lib/template-schema/field/item/item.component.ts","ng://ngx-schema-form/lib/template-schema/field/field.component.ts","ng://ngx-schema-form/lib/template-schema/template-schema.directive.ts","ng://ngx-schema-form/lib/template-schema/template-schema.module.ts"],"names":["ActionRegistry","prototype","clear","this","actions","register","actionId","action","get","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","defineProperty","FormProperty","__canonicalPath","canonicalPath","__canonicalPathNotation","replace","RegExp","_rootName","createRootName","schema","_valueChanges","_errorsChanges","type","_parent","_root","_path","_value","_visible","_errors","updateValueAndValidity","onlySelf","emitEvent","_updateValue","valueChanges","_runValidation","parent","errors","schemaValidator","customValidator","validatorRegistry","path","customErrors","findRoot","mergeErrors","setErrors","newErrors","isArray","apply","extendErrors","searchProperty","prop","base","result","getProperty","substr","property","setVisible","visible","_visibilityChanges","__evaluateVisibilityIf","sourceProperty","targetProperty","dependencyPath","expression","valid","indexOf","toString","expArray","expArray_1","tslib_1.__values","expArray_1_1","_expresssion","substring","expressionCompilerVisibiltyIf","evaluate","source","target","console","_canonicalPath","__bindVisibility","_this","visibleIfProperty","visibleIf","visibleIfOf","oneOf","allOf","keys","this_1","undefined","propertiesBinding","properties","findProperties","valueCheck","pipe","map","_c","_d","item","_e","_f","depPath","propVal","visibilityCheck","and","combineLatest","v1","v2","properties_1","properties_1_1","warn","registerMissingVisibilityBinding","values","_i","distinctUntilChanged","subscribe","visibleIfOf_1","visibleIfOf_1_1","_bindVisibility","this_2","properties_2","properties_2_1","formProperty","_propertyBindingRegistry","getPropertyBindingsVisibility","add","propertyPath","props","paths","findPropertyPaths","paths_1","paths_1_1","parentPath","ix","prePath","subPath","pathFound","PropertyGroup","arrProp","curreItemPath","endsWith","curreItemPrePath","childrenPathFound","schemaValidatorFactory","expressionCompilerFactory","BehaviorSubject","createValidatorFn","createExpressionCompilerVisibilityIf","root","tslib_1.__extends","_properties","Proxy","_propertyProxyHandler","subPathIdx","propertyId","forEachChild","fn","forEachChildRecursive","child","_super","_bindVisibilityRecursive","isRoot","set","receiver","_a","propertyValue","indexOfChild","pos","lastIndexOf","getCanonicalPath","propertyGroup","propertyGroupChildren","propertyGroupChildren_1","propertyGroupChildren_1_1","children","assertCanonicalPath","findPropertiesToRebind","propertyBindings","rebind","findByDependencyPath","startsWith","uniqueValues","rebind_1","rebind_1_1","rebindAll","rebindAll_1","rebindAll_1_1","_property","rebindPaths","rebindPaths_1","rebindPaths_1_1","rebindPropPath","rebindVisibility","deleteProperty","PROPERTY_TYPE_MAPPING","FormPropertyFactory","createProperty","newProperty","$ref","refSchema","getSchema","TypeError","propertyBindingRegistry","initializeRoot","rootProperty","reset","formatMessage","message","schemaError","mesg","Error","schemaWarning","SchemaPreprocessor","preprocess","jsonSchema","normalizeExtensions","checkProperties","checkAndCreateFieldsets","checkItems","normalizeWidget","recursiveCheck","isBlank","fieldsets","order","replaceOrderByFieldsets","createFieldsets","checkFieldsUsage","fieldsId","usedFields","fieldset","fields","_g","fieldId","id","fieldsId_1","fieldsId_1_1","isRequired","required","remainingfieldsId","title","description","name","fieldSchema","widget","items","definitions","removeRecursiveRefProperties","definitionPath","extensions","regex","k","find","match","v","copy","JSON","parse","stringify","ValidatorRegistry","validator","validators","BindingRegistry","bindings","binding","SchemaValidatorFactory","ZSchemaValidatorFactory","createSchemaValidator","zschema","ZSchema","breakOnFirstError","validate","err","getLastErrors","denormalizeRequiredPropertyPaths","ref","compileSchema","getDefinition","getLastError","code","params","foundSchema","split","slice","forEach","ptr","WidgetRegistry","setDefaultWidget","defaultWidget","getDefaultWidget","hasWidget","widgets","getWidgetType","WidgetFactory","createWidget","container","componentClass","registry","componentFactory","resolver","resolveComponentFactory","createComponent","Injectable","ComponentFactoryResolver","TerminatorService","destroy","onDestroy","Subject","PropertyBindingRegistry","getPropertyBindings","PropertyBindings","PropertyBindingTypes","visibility","sourcePropertyPath","sourcesIndex","store","dependenciesIndex","results","_b","res","found","getBySourcePropertyPath","createPathIndex","SimplePropertyIndexer","_createPathIndex","filter","_storeIndex","pathIndex","indexPos","index","pathIndex_1","pathIndex_1_1","key","MARKER","_findInIndex","ixRes","__findIndex","indexerResults","segment","wild","_keys","keys_1","keys_1_1","restPath","restIndex","restParent","findOnlyWithValue","restPaths","ExpressionCompilerFactory","JEXLExpressionCompilerFactory","createExpressionCompiler","JEXLExpressionCompiler","JEXLExpressionCompilerVisibiltyIf","context","JEXL.Jexl","evalSync","useFactory","FormComponent","writeValue","obj","registerOnChange","onChangeCallback","onValueChanges","bind","registerOnTouched","ngOnChanges","changes","setValidators","setActions","setBindings","firstChange","terminator","formPropertyFactory","model","errorsChanges","onErrorChange","emit","isValid","cdr","detectChanges","validatorId","actionRegistry","bindingRegistry","bindingPath","setModel","assign","modelChange","observers","onChange","Component","args","selector","template","providers","provide","deps","NG_VALUE_ACCESSOR","useExisting","multi","ChangeDetectorRef","Input","Output","EventEmitter","onErrorsChange","FormElementComponent","ngOnInit","parseButtons","setupBindings","eventId","createBinding","listener","unlisten","renderer","listen","elementRef","nativeElement","event","Function","buttons","button","createButtonCallback","parameters","preventDefault","onWidgetInstanciated","canonicalPathNotation","counter","rootName","control","ngOnDestroy","Renderer2","ElementRef","FormControl","FormElementComponentAction","subs","widgetFactory","instance","unsubscribe","ViewChild","read","ViewContainerRef","static","WidgetChooserComponent","widgetInfo","widgetInstanciated","widgetInstance","AtomicProperty","setValue","resetValue","default","fallbackValue","_hasValue","ObjectProperty","resetProperties","createProperties","propertiesId","propertySchema","reduceValue","object","ArrayProperty","addItem","addProperty","removeItem","_","idx","array","StringProperty","string","BooleanProperty","boolean","NumberProperty","parseFloat","parseInt","integer","number","Widget","ControlWidget","ngAfterViewInit","newValue","messages","errorMessages","ArrayLayoutWidget","ObjectLayoutWidget","ArrayWidget","updateButtonDisabledState","trackByIndex","buttonDisabledAdd","isAddButtonDisabled","buttonDisabledRemove","isRemoveButtonDisabled","maxItems","minItems","ButtonWidget","ObjectWidget","CheckboxWidget","checked","onCheck","el","FileWidget","reader","onloadend","filedata","data","window","btoa","onFileChange","$event","file","files","filename","size","encoding","readAsBinaryString","FileReader","IntegerWidget","TextAreaWidget","RadioWidget","RangeWidget","SelectWidget","StringWidget","getInputType","DefaultWidgetRegistry","DisableControlDirective","condition","ngControl","Directive","NgControl","DefaultWidget","moduleProviders","useClass","SchemaFormModule","forRoot","ngModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","declarations","entryComponents","exports","TemplateSchemaService","changed","TemplateSchemaElement","getTextContent","node","from","childNodes","nodeType","TEXT_NODE","pop","nodeValue","trim","ButtonComponent","setLabelFromContent","textContent","label","ngAfterContentInit","forwardRef","click","FieldParent","getButtons","childButtons","randomString","Math","random","_button","getFieldsValidators","reduce","field","getValidators","getFieldsSchema","FieldType","ItemComponent","FieldComponent","childFields","getOneOf","placeholder","format","readOnly","isFirstChange","templateSchemaService","childItems","enum","setTitleFromContent","merge","ContentChildren","TemplateSchemaDirective","setFormDocumentSchema","previousSchema","formComponent","requred","SimpleChange","Boolean","toArray","terminatorService","TemplateSchemaModule"],"mappings":"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","sourcesContent":["import { Action } from './action';\n\nexport class ActionRegistry {\n  actions: {[key: string]: Action} = {};\n\n  clear() {\n    this.actions = {};\n  }\n\n  register(actionId: string, action: Action) {\n    this.actions[actionId] = action;\n  }\n\n  get(actionId: string) {\n    return this.actions[actionId];\n  }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {BehaviorSubject, combineLatest} from 'rxjs';\nimport {distinctUntilChanged, map} from 'rxjs/operators';\n\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\nimport {PropertyBindingRegistry} from '../property-binding-registry';\nimport { ExpressionCompilerFactory, ExpressionCompilerVisibilityIf } from '../expression-compiler-factory';\n\nexport abstract class FormProperty {\n  public schemaValidator: Function;\n  public expressionCompilerVisibiltyIf: ExpressionCompilerVisibilityIf;\n\n  _value: any = null;\n  _errors: any = null;\n  private _valueChanges = new BehaviorSubject<any>(null);\n  private _errorsChanges = new BehaviorSubject<any>(null);\n  private _visible = true;\n  private _visibilityChanges = new BehaviorSubject<boolean>(true);\n  private _root: PropertyGroup;\n  private _parent: PropertyGroup;\n  private _path: string;\n  _propertyBindingRegistry: PropertyBindingRegistry;\n  __canonicalPath: string;\n  __canonicalPathNotation: string;\n  \n  /**\n   * Provides the unique path of this form element.<br/>\n   * E.g.: \n   * <code>/garage/cars</code>,<br/>\n   * <code>/shop/book/0/page/1/</code>\n   */\n  get _canonicalPath() { return this.__canonicalPath; }\n  set _canonicalPath(canonicalPath: string) { \n    this.__canonicalPath = canonicalPath; \n    this.__canonicalPathNotation = (this.__canonicalPath||'')\n      .replace(new RegExp('^/', 'ig'), '')\n      .replace(new RegExp('/$', 'ig'), '')\n      .replace(new RegExp('/', 'ig'), '.');\n  }\n  /**\n   * Uses the unique path provided by the property <code>_canonicalPath</code><br/>\n   * but converts it to a HTML Element Attribute ID compliant format.<br/>\n   * E.g.: \n   * <code>garage.cars</code>,<br/>\n   * <code>shop.book.0.page.1.</code>\n   */\n  get canonicalPathNotation() { return this.__canonicalPathNotation; }\n\n  private _rootName;\n  /**\n   * Provides the HTML Element Attribute ID/NAME compliant representation \n   * of the root element.<br/>\n   * Represents the HTML FORM NAME.<br/>\n   * Only the root <code>FormProperty</code> will provide a value here.\n   */\n  get rootName() { return this._rootName; }\n\n  constructor(schemaValidatorFactory: SchemaValidatorFactory,\n              private validatorRegistry: ValidatorRegistry,\n              expressionCompilerFactory: ExpressionCompilerFactory,\n              public schema: any,\n              parent: PropertyGroup,\n              path: string) {\n    this.schemaValidator = schemaValidatorFactory.createValidatorFn(this.schema);\n    this.expressionCompilerVisibiltyIf = expressionCompilerFactory.createExpressionCompilerVisibilityIf();\n\n    this._parent = parent;\n    if (parent) {\n      this._root = parent.root;\n    } else if (this instanceof PropertyGroup) {\n      this._root = <PropertyGroup><any>this;\n      this._rootName = this.createRootName();\n    }\n    this._path = path;\n  }\n\n  /**\n   * Creates the HTML ID and NAME attribute compliant string.\n   */\n  private createRootName(): string {\n    if (this.schema && this.schema['name']) {\n      return this._rootName = this.schema['name'].replace(new RegExp('[\\\\s]+', 'ig'), '_')\n    }\n    return ''\n  }\n\n  public get valueChanges() {\n    return this._valueChanges;\n  }\n\n  public get errorsChanges() {\n    return this._errorsChanges;\n  }\n\n  public get type(): string {\n    return this.schema.type;\n  }\n\n  public get parent(): PropertyGroup {\n    return this._parent;\n  }\n\n  public get root(): PropertyGroup {\n    return this._root || <PropertyGroup><any>this;\n  }\n\n  public get path(): string {\n    return this._path;\n  }\n\n  public get value() {\n    return this._value;\n  }\n\n  public get visible() {\n    return this._visible;\n  }\n\n  public get valid() {\n    return this._errors === null;\n  }\n\n  public abstract setValue(value: any, onlySelf: boolean);\n\n  public abstract reset(value: any, onlySelf: boolean);\n\n  public updateValueAndValidity(onlySelf = false, emitEvent = true) {\n    this._updateValue();\n\n    if (emitEvent) {\n      this.valueChanges.next(this.value);\n    }\n\n    this._runValidation();\n\n    if (this.parent && !onlySelf) {\n      this.parent.updateValueAndValidity(onlySelf, emitEvent);\n    }\n\n  }\n\n  /**\n   * @internal\n   */\n  public abstract _hasValue(): boolean;\n\n  /**\n   *  @internal\n   */\n  public abstract _updateValue();\n\n  /**\n   * @internal\n   */\n  public _runValidation(): any {\n    let errors = this.schemaValidator(this._value) || [];\n    let customValidator = this.validatorRegistry.get(this.path);\n    if (customValidator) {\n      let customErrors = customValidator(this.value, this, this.findRoot());\n      errors = this.mergeErrors(errors, customErrors);\n    }\n    if (errors.length === 0) {\n      errors = null;\n    }\n\n    this._errors = errors;\n    this.setErrors(this._errors);\n  }\n\n  private mergeErrors(errors, newErrors) {\n    if (newErrors) {\n      if (Array.isArray(newErrors)) {\n        errors = errors.concat(...newErrors);\n      } else {\n        errors.push(newErrors);\n      }\n    }\n    return errors;\n  }\n\n  private setErrors(errors) {\n    this._errors = errors;\n    this._errorsChanges.next(errors);\n  }\n\n  public extendErrors(errors) {\n    errors = this.mergeErrors(this._errors || [], errors);\n    this.setErrors(errors);\n  }\n\n  searchProperty(path: string): FormProperty {\n    let prop: FormProperty = this;\n    let base: PropertyGroup = null;\n\n    let result = null;\n    if (path[0] === '/') {\n      base = this.findRoot();\n      result = base.getProperty(path.substr(1));\n    } else {\n      while (result === null && prop.parent !== null) {\n        prop = base = prop.parent;\n        result = base.getProperty(path);\n      }\n    }\n    return result;\n  }\n\n  public findRoot(): PropertyGroup {\n    let property: FormProperty = this;\n    while (property.parent !== null) {\n      property = property.parent;\n    }\n    return <PropertyGroup>property;\n  }\n\n  private setVisible(visible: boolean) {\n    this._visible = visible;\n    this._visibilityChanges.next(visible);\n    this.updateValueAndValidity();\n    if (this.parent) {\n      this.parent.updateValueAndValidity(false, true);\n    }\n  }\n\n  /**\n   * Making use of the expression compiler for the <code>visibleIf</code> condition\n   */\n  private __evaluateVisibilityIf(\n    sourceProperty: FormProperty,\n    targetProperty: FormProperty,\n    dependencyPath: string,\n    value: any = '',\n    expression: string|string[] = ''): boolean {\n    try {\n      let valid = false\n      if (expression.indexOf('$ANY$') !== -1) {\n        valid = value && value.length > 0;\n      } else if ((expression||[]).toString().indexOf('$EXP$') === 0) {\n        // since visibleIf condition values are an array... we must do this\n        const expArray = Array.isArray(expression) ? expression : (expression ? [expression] : [])\n        for (const expString of expArray) {\n          const _expresssion = expString.substring('$EXP$'.length);\n          valid = true === this.expressionCompilerVisibiltyIf.evaluate(_expresssion, {\n            source: sourceProperty,\n            target: targetProperty\n          })\n          if (valid) {\n            break\n          }\n        }\n      } else {\n        valid = expression.indexOf(value) !== -1;\n      }\n      return valid\n    } catch (error) {\n      console.error('Error processing \"VisibileIf\" expression for path: ', dependencyPath,\n        `source - ${sourceProperty._canonicalPath}: `, sourceProperty,\n        `target - ${targetProperty._canonicalPath}: `, targetProperty,\n        'value:', value,\n        'expression: ', expression,\n        'error: ', error)\n    }\n  }\n\n  private __bindVisibility(): boolean {\n    /**\n     * <pre>\n     *     \"oneOf\":[{\n     *         \"path\":[\"value\",\"value\"]\n     *     },{\n     *         \"path\":[\"value\",\"value\"]\n     *     }]\n     *     </pre>\n     * <pre>\n     *     \"allOf\":[{\n     *         \"path\":[\"value\",\"value\"]\n     *     },{\n     *         \"path\":[\"value\",\"value\"]\n     *     }]\n     *     </pre>\n     */\n    const visibleIfProperty = this.schema.visibleIf;\n    const visibleIfOf = (visibleIfProperty || {}).oneOf || (visibleIfProperty || {}).allOf;\n    if (visibleIfOf) {\n      for (const visibleIf of visibleIfOf) {\n        if (typeof visibleIf === 'object' && Object.keys(visibleIf).length === 0) {\n          this.setVisible(false);\n        } else if (visibleIf !== undefined) {\n          const propertiesBinding = [];\n          for (const dependencyPath in visibleIf) {\n            if (visibleIf.hasOwnProperty(dependencyPath)) {\n              const properties = this.findProperties(this, dependencyPath);\n              if ((properties || []).length) {\n                for (const property of properties) {\n                  if (property) {\n                    let valueCheck;\n                    if (this.schema.visibleIf.oneOf) {\n                      valueCheck = property.valueChanges.pipe(map(\n                        value => this.__evaluateVisibilityIf(this, property, dependencyPath, value, visibleIf[dependencyPath])\n                      ));\n                    } else if (this.schema.visibleIf.allOf) {\n                      const _chk = (value) => {\n                        for (const item of this.schema.visibleIf.allOf) {\n                          for (const depPath of Object.keys(item)) {\n                            const prop = this.searchProperty(depPath);\n                            const propVal = prop.value;\n                            if (!this.__evaluateVisibilityIf(this, prop, dependencyPath, propVal, item[depPath])) {\n                              return false;\n                            }\n                          }\n                        }\n                        return true;\n                      };\n                      valueCheck = property.valueChanges.pipe(map(_chk));\n                    }\n                    const visibilityCheck = property._visibilityChanges;\n                    const and = combineLatest([valueCheck, visibilityCheck], (v1, v2) => v1 && v2);\n                    propertiesBinding.push(and);\n                  }\n                }\n              } else {\n                console.warn('Can\\'t find property ' + dependencyPath + ' for visibility check of ' + this.path);\n                this.registerMissingVisibilityBinding(dependencyPath, this);\n                // not visible if not existent\n                this.setVisible(false);\n              }\n            }\n          }\n\n          combineLatest(propertiesBinding, (...values: boolean[]) => {\n            return values.indexOf(true) !== -1;\n          }).pipe(distinctUntilChanged()).subscribe((visible) => {\n            this.setVisible(visible);\n          });\n        }\n      }\n      return true;\n    }\n  }\n\n  // A field is visible if AT LEAST ONE of the properties it depends on is visible AND has a value in the list\n  public _bindVisibility() {\n    if (this.__bindVisibility())\n      return;\n    let visibleIf = this.schema.visibleIf;\n    if (typeof visibleIf === 'object' && Object.keys(visibleIf).length === 0) {\n      this.setVisible(false);\n    } else if (visibleIf !== undefined) {\n      let propertiesBinding = [];\n      for (let dependencyPath in visibleIf) {\n        if (visibleIf.hasOwnProperty(dependencyPath)) {\n          const properties = this.findProperties(this, dependencyPath);\n          if ((properties || []).length) {\n            for (const property of properties) {\n              if (property) {\n                const valueCheck = property.valueChanges.pipe(map(\n                  value => this.__evaluateVisibilityIf(this, property, dependencyPath, value, visibleIf[dependencyPath])\n                ));\n                const visibilityCheck = property._visibilityChanges;\n                const and = combineLatest([valueCheck, visibilityCheck], (v1, v2) => v1 && v2);\n                propertiesBinding.push(and);\n              }\n            }\n          } else {\n            console.warn('Can\\'t find property ' + dependencyPath + ' for visibility check of ' + this.path);\n            this.registerMissingVisibilityBinding(dependencyPath, this);\n            // not visible if not existent\n            this.setVisible(false);\n          }\n        }\n      }\n\n      combineLatest(propertiesBinding, (...values: boolean[]) => {\n        return values.indexOf(true) !== -1;\n      }).pipe(distinctUntilChanged()).subscribe((visible) => {\n        this.setVisible(visible);\n      });\n    }\n  }\n\n  private registerMissingVisibilityBinding(dependencyPath: string, formProperty: FormProperty) {\n    formProperty._propertyBindingRegistry.getPropertyBindingsVisibility().add(dependencyPath, formProperty.path);\n  }\n\n\n  /**\n   * Finds all <code>formProperties</code> from a path with wildcards.<br/>\n   * e.g: <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>\n   * @param target\n   * @param propertyPath\n   */\n  findProperties(target: FormProperty, propertyPath: string): FormProperty[] {\n    const props: FormProperty[] = [];\n    const paths = this.findPropertyPaths(target, propertyPath);\n    for (const path of paths) {\n      const p: FormProperty = target.searchProperty(path);\n      if (p) {\n        props.push(p);\n      }\n    }\n    return props;\n  }\n\n  /**\n   * Creates canonical paths from a path with wildcards.\n   * e.g:<br/>\n   * From:<br/>\n   * <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>\n   * it creates:<br/>\n   * <code>/garage/cars/0/tires/0/name</code><br/>\n   * <code>/garage/cars/0/tires/1/name</code><br/>\n   * <code>/garage/cars/0/tires/2/name</code><br/>\n   * <code>/garage/cars/0/tires/3/name</code><br/>\n   * <code>/garage/cars/1/tires/0/name</code><br/>\n   * <code>/garage/cars/2/tires/1/name</code><br/>\n   * <code>/garage/cars/3/tires/2/name</code><br/>\n   * <code>/garage/cars/3/tires/3/name</code><br/>\n   * <code>/garage/cars/&#42;/tires/&#42;/name</code><br/>\n   * <code>/garage/cars/&#42;/tires/2/name</code><br/>\n   * <code>/garage/cars/&#42;/tires/3/name</code><br/>\n   * <br/>etc...\n   * @param target\n   * @param path\n   * @param parentPath\n   */\n  findPropertyPaths(target: FormProperty, path: string, parentPath?: string): string[] {\n    const ix = path.indexOf('*');\n    if (-1 !== ix) {\n      const prePath = ix > -1 ? path.substring(0, ix - 1) : path;\n      const subPath = ix > -1 ? path.substring(ix + 1) : path;\n      const prop: FormProperty = target.searchProperty(prePath);\n      let pathFound = [];\n      if (prop instanceof PropertyGroup) {\n        const arrProp = prop.properties as FormProperty[];\n        for (let i = 0; i < arrProp.length; i++) {\n          const curreItemPath = (parentPath || '') + prePath + (prePath.endsWith('/') ? '' : '/') + i + subPath;\n          const curreItemPrePath = (parentPath || '') + prePath + i;\n          if (-1 === curreItemPath.indexOf('*')) {\n            pathFound.push(curreItemPath);\n          }\n          const childrenPathFound = this.findPropertyPaths(arrProp[i], subPath, curreItemPrePath);\n          pathFound = pathFound.concat(childrenPathFound);\n        }\n      }\n      return pathFound;\n    }\n    return [path];\n  }\n}\n\nexport abstract class PropertyGroup extends FormProperty {\n\n  _properties: FormProperty[] | { [key: string]: FormProperty } = null;\n\n  get properties() {\n    return this._properties;\n  }\n\n  set properties(properties: FormProperty[] | { [key: string]: FormProperty }) {\n    /**\n     * Override the setter to add an observer that notices when an item is added or removed.<br/>\n     */\n    this._properties = new Proxy(properties, this._propertyProxyHandler);\n  }\n\n  private _propertyProxyHandler: ProxyHandler<FormProperty[] | { [key: string]: FormProperty }> = {\n    /**\n     * When a new item is added it will be checked for visibility updates to proceed <br/>\n     * if any other field has a binding reference to it.<br/>\n     */\n    set(target: FormProperty[] | { [p: string]: FormProperty }, p: PropertyKey, value: any, receiver: any): boolean {\n\n      /**\n       * 1) Make sure a canonical path is set\n       */\n      const assertCanonicalPath = (propertyValue: any) => {\n        const formProperty = propertyValue as FormProperty;\n        if (Array.isArray(target) && propertyValue instanceof FormProperty) {\n          /**\n           * Create a canonical path replacing the last '*' with the elements position in array\n           * @param propertyPath\n           * @param indexOfChild\n           */\n          const getCanonicalPath = (propertyPath: string, indexOfChild: number) => {\n            let pos;\n            if (propertyPath && -1 !== (pos = propertyPath.lastIndexOf('*'))) {\n              return propertyPath.substring(0, pos) + indexOfChild.toString() + propertyPath.substring(pos + 1);\n            }\n          };\n          if (formProperty) {\n            formProperty._canonicalPath = getCanonicalPath(formProperty._canonicalPath, p as number);\n          }\n        }\n\n        const propertyGroup = formProperty as PropertyGroup;\n        const propertyGroupChildren = (Array.isArray(propertyGroup.properties) ?\n          propertyGroup.properties :\n          Object.values(propertyGroup.properties || {})) as FormProperty[];\n        if ((formProperty.path || '').endsWith('/*')) {\n          /**\n           * If it is an array, then all children canonical paths must be computed now.\n           * The children don't have the parent's path segment set yet,\n           * because they are created before the parent gets attached to its parent.\n           */\n          for (const child of propertyGroupChildren) {\n            child._canonicalPath = formProperty._canonicalPath + child._canonicalPath.substring(formProperty.path.length);\n          }\n        }\n        return {property: formProperty, children: propertyGroupChildren};\n      };\n      const {property, children} = assertCanonicalPath(value);\n\n      /**\n       * 2) Add the new property before rebinding, so it can be found by <code>_bindVisibility</code>\n       */\n      const result = target[p as string] = value;\n\n      /**\n       * 3) Re-bind the visibility bindings referencing to this canonical paths\n       */\n      const rebindVisibility = () => {\n        const rebindAll = [property].concat(children);\n        const findPropertiesToRebind = (formProperty: FormProperty) => {\n          const propertyBindings = formProperty._propertyBindingRegistry.getPropertyBindingsVisibility();\n          let rebind: string[] = [];\n          if (formProperty._canonicalPath) {\n            rebind = rebind.concat(rebind.concat(propertyBindings.findByDependencyPath(formProperty._canonicalPath) || []));\n            if (formProperty._canonicalPath.startsWith('/')) {\n              rebind = rebind.concat(rebind.concat(propertyBindings.findByDependencyPath(formProperty._canonicalPath.substring(1)) || []));\n            }\n          }\n          rebind = rebind.concat(propertyBindings.findByDependencyPath(formProperty.path) || []);\n          if (formProperty.path.startsWith('/')) {\n            rebind = rebind.concat(rebind.concat(propertyBindings.findByDependencyPath(formProperty.path.substring(1)) || []));\n          }\n          const uniqueValues = {};\n          for (const item of rebind) {\n            uniqueValues[item] = item;\n          }\n          return Object.keys(uniqueValues);\n        };\n        for (const _property of rebindAll) {\n          if (_property instanceof FormProperty) {\n            try {\n              const rebindPaths = findPropertiesToRebind(_property);\n              for (const rebindPropPath of rebindPaths) {\n                const rebindProp = _property.searchProperty(rebindPropPath);\n                rebindProp._bindVisibility();\n              }\n            } catch (e) {\n              console.error('Rebinding visibility error at path:', _property.path, 'property:', _property, e);\n            }\n          }\n        }\n      };\n      rebindVisibility();\n\n      return result;\n    },\n    get(target: FormProperty[] | { [p: string]: FormProperty }, p: PropertyKey, receiver: any): any {\n      return target[p as string];\n    },\n    deleteProperty(target: FormProperty[] | { [p: string]: FormProperty }, p: PropertyKey): boolean {\n      return delete target[p as string];\n    }\n  };\n\n  getProperty(path: string) {\n    let subPathIdx = path.indexOf('/');\n    let propertyId = subPathIdx !== -1 ? path.substr(0, subPathIdx) : path;\n\n    let property = this.properties[propertyId];\n    if (property !== null && subPathIdx !== -1 && property instanceof PropertyGroup) {\n      let subPath = path.substr(subPathIdx + 1);\n      property = (<PropertyGroup>property).getProperty(subPath);\n    }\n    return property;\n  }\n\n  public forEachChild(fn: (formProperty: FormProperty, str: String) => void) {\n    for (let propertyId in this.properties) {\n      if (this.properties.hasOwnProperty(propertyId)) {\n        let property = this.properties[propertyId];\n        fn(property, propertyId);\n      }\n    }\n  }\n\n  public forEachChildRecursive(fn: (formProperty: FormProperty) => void) {\n    this.forEachChild((child) => {\n      fn(child);\n      if (child instanceof PropertyGroup) {\n        (<PropertyGroup>child).forEachChildRecursive(fn);\n      }\n    });\n  }\n\n  public _bindVisibility() {\n    super._bindVisibility();\n    this._bindVisibilityRecursive();\n  }\n\n  private _bindVisibilityRecursive() {\n    this.forEachChildRecursive((property) => {\n      property._bindVisibility();\n    });\n  }\n\n  public isRoot() {\n    return this === this.root;\n  }\n}\n\n\n","export const PROPERTY_TYPE_MAPPING: { [type: string]: any } = {};\n","import {FormProperty, PropertyGroup} from './formproperty';\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\nimport {PropertyBindingRegistry} from '../property-binding-registry';\nimport { ExpressionCompilerFactory } from '../expression-compiler-factory';\nimport { PROPERTY_TYPE_MAPPING } from './typemapping';\n\nexport class FormPropertyFactory {\n\n  constructor(private schemaValidatorFactory: SchemaValidatorFactory, private validatorRegistry: ValidatorRegistry,\n              private propertyBindingRegistry: PropertyBindingRegistry,\n              private expressionCompilerFactory: ExpressionCompilerFactory) {\n  }\n\n  createProperty(schema: any, parent: PropertyGroup = null, propertyId?: string): FormProperty {\n    let newProperty = null;\n    let path = '';\n    let _canonicalPath = '';\n    if (parent) {\n      path += parent.path;\n      if (parent.parent !== null) {\n        path += '/';\n        _canonicalPath += '/';\n      }\n      if (parent.type === 'object') {\n        path += propertyId;\n        _canonicalPath += propertyId;\n      } else if (parent.type === 'array') {\n        path += '*';\n        _canonicalPath += '*';\n      } else {\n        throw 'Instanciation of a FormProperty with an unknown parent type: ' + parent.type;\n      }\n      _canonicalPath = (parent._canonicalPath || parent.path) + _canonicalPath;\n    } else {\n      path = '/';\n      _canonicalPath = '/';\n    }\n\n    if (schema.$ref) {\n      const refSchema = this.schemaValidatorFactory.getSchema(parent.root.schema, schema.$ref);\n      newProperty = this.createProperty(refSchema, parent, path);\n    } else {\n        if (PROPERTY_TYPE_MAPPING[schema.type]) {\n            if (schema.type === 'object' || schema.type === 'array') {\n                newProperty = PROPERTY_TYPE_MAPPING[schema.type](\n                    this.schemaValidatorFactory, this.validatorRegistry, this.expressionCompilerFactory, schema, parent, path, this);\n            } else {\n                newProperty = PROPERTY_TYPE_MAPPING[schema.type](\n                    this.schemaValidatorFactory, this.validatorRegistry, this.expressionCompilerFactory, schema, parent, path);\n            }\n        } else {\n            throw new TypeError(`Undefined type ${schema.type} (existing: ${Object.keys(PROPERTY_TYPE_MAPPING)})`);\n        }\n    }\n\n    newProperty._propertyBindingRegistry = this.propertyBindingRegistry;\n    newProperty._canonicalPath = _canonicalPath;\n\n    if (newProperty instanceof PropertyGroup) {\n      this.initializeRoot(newProperty);\n    }\n\n    return newProperty;\n  }\n\n  private initializeRoot(rootProperty: PropertyGroup) {\n    rootProperty.reset(null, true);\n    rootProperty._bindVisibility();\n  }\n}\n","import {isBlank} from './utils';\n\nfunction formatMessage(message, path) {\n  return `Parsing error on ${path}: ${message}`;\n}\n\nfunction schemaError(message, path): void {\n  let mesg = formatMessage(message, path);\n  throw new Error(mesg);\n}\n\nfunction schemaWarning(message, path): void {\n  let mesg = formatMessage(message, path);\n  throw new Error(mesg);\n}\n\nexport class SchemaPreprocessor {\n\n  static preprocess(jsonSchema: any, path = '/'): any {\n    jsonSchema = jsonSchema || {};\n    SchemaPreprocessor.normalizeExtensions(jsonSchema);\n    if (jsonSchema.type === 'object') {\n      SchemaPreprocessor.checkProperties(jsonSchema, path);\n      SchemaPreprocessor.checkAndCreateFieldsets(jsonSchema, path);\n    } else if (jsonSchema.type === 'array') {\n      SchemaPreprocessor.checkItems(jsonSchema, path);\n    }\n    SchemaPreprocessor.normalizeWidget(jsonSchema);\n    SchemaPreprocessor.recursiveCheck(jsonSchema, path);\n  }\n\n  private static checkProperties(jsonSchema, path: string) {\n    if (isBlank(jsonSchema.properties)) {\n      jsonSchema.properties = {};\n      schemaWarning('Provided json schema does not contain a \\'properties\\' entry. Output schema will be empty', path);\n    }\n  }\n\n  private static checkAndCreateFieldsets(jsonSchema: any, path: string) {\n    if (jsonSchema.fieldsets === undefined) {\n      if (jsonSchema.order !== undefined) {\n        SchemaPreprocessor.replaceOrderByFieldsets(jsonSchema);\n      } else {\n        SchemaPreprocessor.createFieldsets(jsonSchema);\n      }\n    }\n    SchemaPreprocessor.checkFieldsUsage(jsonSchema, path);\n  }\n\n  private static checkFieldsUsage(jsonSchema, path: string) {\n    let fieldsId: string[] = Object.keys(jsonSchema.properties);\n    let usedFields = {};\n    for (let fieldset of jsonSchema.fieldsets) {\n      for (let fieldId of fieldset.fields) {\n        if (usedFields[fieldId] === undefined) {\n          usedFields[fieldId] = [];\n        }\n        usedFields[fieldId].push(fieldset.id);\n      }\n    }\n\n    for (const fieldId of fieldsId) {\n      const isRequired = jsonSchema.required && jsonSchema.required.indexOf(fieldId) > -1;\n      if (isRequired && jsonSchema.properties[fieldId]) {\n        jsonSchema.properties[fieldId].isRequired = true;\n      }\n      if (usedFields.hasOwnProperty(fieldId)) {\n        if (usedFields[fieldId].length > 1) {\n          schemaError(`${fieldId} is referenced by more than one fieldset: ${usedFields[fieldId]}`, path);\n        }\n        delete usedFields[fieldId];\n      } else if (isRequired) {\n        schemaError(`${fieldId} is a required field but it is not referenced as part of a 'order' or a 'fieldset' property`, path);\n      } else {\n        delete jsonSchema[fieldId];\n        schemaWarning(`Removing unreferenced field ${fieldId}`, path);\n      }\n    }\n\n    for (let remainingfieldsId in usedFields) {\n      if (usedFields.hasOwnProperty(remainingfieldsId)) {\n        schemaWarning(`Referencing non-existent field ${remainingfieldsId} in one or more fieldsets`, path);\n      }\n    }\n  }\n\n  private static createFieldsets(jsonSchema) {\n    jsonSchema.order = Object.keys(jsonSchema.properties);\n    SchemaPreprocessor.replaceOrderByFieldsets(jsonSchema);\n  }\n\n  private static replaceOrderByFieldsets(jsonSchema) {\n    jsonSchema.fieldsets = [{\n      id: 'fieldset-default',\n      title: jsonSchema.title || '',\n      description: jsonSchema.description || '',\n      name: jsonSchema.name || '',\n      fields: jsonSchema.order\n    }];\n    delete jsonSchema.order;\n  }\n\n  private static normalizeWidget(fieldSchema: any) {\n    let widget = fieldSchema.widget;\n    if (widget === undefined) {\n      widget = {'id': fieldSchema.type};\n    } else if (typeof widget === 'string') {\n      widget = {'id': widget};\n    }\n    fieldSchema.widget = widget;\n  }\n\n  private static checkItems(jsonSchema, path) {\n    if (jsonSchema.items === undefined) {\n      schemaError('No \\'items\\' property in array', path);\n    }\n  }\n\n  private static recursiveCheck(jsonSchema, path: string) {\n    if (jsonSchema.type === 'object') {\n      for (let fieldId in jsonSchema.properties) {\n        if (jsonSchema.properties.hasOwnProperty(fieldId)) {\n          let fieldSchema = jsonSchema.properties[fieldId];\n          SchemaPreprocessor.preprocess(fieldSchema, path + fieldId + '/');\n        }\n      }\n      if (jsonSchema.hasOwnProperty('definitions')) {\n        for (let fieldId in jsonSchema.definitions) {\n          if (jsonSchema.definitions.hasOwnProperty(fieldId)) {\n            let fieldSchema = jsonSchema.definitions[fieldId];\n            SchemaPreprocessor.removeRecursiveRefProperties(fieldSchema, `#/definitions/${fieldId}`);\n            SchemaPreprocessor.preprocess(fieldSchema, path + fieldId + '/');\n          }\n        }\n      }\n    } else if (jsonSchema.type === 'array') {\n      SchemaPreprocessor.preprocess(jsonSchema.items, path + '*/');\n    }\n  }\n\n  private static removeRecursiveRefProperties(jsonSchema, definitionPath) {\n    // to avoid infinite loop\n    if (jsonSchema.type === 'object') {\n      for (let fieldId in jsonSchema.properties) {\n        if (jsonSchema.properties.hasOwnProperty(fieldId)) {\n          if (jsonSchema.properties[fieldId].$ref\n            && jsonSchema.properties[fieldId].$ref === definitionPath) {\n            delete jsonSchema.properties[fieldId];\n          } else if (jsonSchema.properties[fieldId].type === 'object') {\n            SchemaPreprocessor.removeRecursiveRefProperties(jsonSchema.properties[fieldId], definitionPath);\n          }\n        }\n      }\n    }\n  }\n  \n  /**\n   * Enables alias names for JSON schema extensions.\n   *\n   * Copies the value of each alias JSON schema property\n   * to the JSON schema property of ngx-schema-form.\n   *\n   * @param schema JSON schema to enable alias names.\n   */\n  private static normalizeExtensions(schema: any): void {\n    const extensions = [\n        { name: \"fieldsets\", regex: /^x-?field-?sets$/i },\n        { name: \"widget\",    regex: /^x-?widget$/i },\n        { name: \"visibleIf\", regex: /^x-?visible-?if$/i }\n    ];\n    const keys = Object.keys(schema);\n    for (let i = 0; i < keys.length; ++i) {\n      let k = keys[i];\n      let e = extensions.find(e => !!k.match(e.regex));\n      if (e) {\n        let v = schema[k];\n        let copy = JSON.parse(JSON.stringify(v));\n        schema[e.name] = copy;\n      }\n    }\n  }\n}\n\n","export function isPresent(o) {\n  return o !== null && o !== undefined;\n}\n\nexport function isBlank(o) {\n  return o === null || o === undefined;\n}\n","import { Validator } from './validator';\n\nexport class ValidatorRegistry {\n  private validators: Validator[] = [];\n\n  register(path: string, validator: Validator) {\n    this.validators[path] = validator;\n  }\n\n  get(path: string): Validator {\n    return this.validators[path];\n  }\n\n  clear() {\n    this.validators = [];\n  }\n}\n","import {Binding} from './binding';\n\nexport class BindingRegistry {\n  bindings: Binding[] = [];\n\n  clear() {\n    this.bindings = [];\n  }\n\n  register(path: string, binding: Binding | Binding[]) {\n    this.bindings[path] = [].concat(binding);\n  }\n\n  get(path: string): Binding[] {\n    return this.bindings[path];\n  }\n}\n","import * as ZSchema from 'z-schema';\n\nexport abstract class SchemaValidatorFactory {\n  abstract createValidatorFn(schema): (value: any) => any;\n\n  abstract getSchema(schema, ref): any;\n\n  /**\n   * Override this method to reset the schema validator instance.<br/>\n   * This may be required since some schema validators keep a deep copy<br/>\n   * of your schemas and changes at runtime are not recognized by the schema validator.<br/>\n   * In this method you should either re-instantiate the schema validator or\n   * clear its cache.<br/>\n   * Example of re-instantiating schema validator\n   * <code>\n   *     reset(){\n   *         this.zschema = new ZSchema({})\n   *     }\n   * </code>\n   * <br/>\n   * Since this method it self does nothing there is <br/>\n   * no need to call the <code>super.reset()</code>\n   */\n  reset() {\n\n  }\n}\n\nexport class ZSchemaValidatorFactory extends SchemaValidatorFactory {\n\n  protected zschema;\n\n  constructor() {\n    super();\n    this.createSchemaValidator()\n  }\n\n  private createSchemaValidator() {\n    this.zschema =  new ZSchema({\n      breakOnFirstError: false\n    });\n  }\n\n  reset() {\n    this.createSchemaValidator()\n  }\n\n  createValidatorFn(schema: any) {\n    return (value): { [key: string]: boolean } => {\n\n      if (schema.type === 'number' || schema.type === 'integer') {\n        value = +value;\n      }\n\n      this.zschema.validate(value, schema);\n      let err = this.zschema.getLastErrors();\n\n      this.denormalizeRequiredPropertyPaths(err);\n\n      return err || null;\n    };\n  }\n\n  getSchema(schema: any, ref: string) {\n    // check definitions are valid\n    const isValid = this.zschema.compileSchema(schema);\n    if (isValid) {\n      return this.getDefinition(schema, ref);\n    } else {\n      throw this.zschema.getLastError();\n    }\n  }\n\n  private denormalizeRequiredPropertyPaths(err: any[]) {\n    if (err && err.length) {\n      err = err.map(error => {\n        if (error.path === '#/' && error.code === 'OBJECT_MISSING_REQUIRED_PROPERTY') {\n          error.path = `${error.path}${error.params[0]}`;\n        }\n        return error;\n      });\n    }\n  }\n\n  private getDefinition(schema: any, ref: string) {\n    let foundSchema = schema;\n    ref.split('/').slice(1).forEach(ptr => {\n      if (ptr) {\n        foundSchema = foundSchema[ptr];\n      }\n    });\n    return foundSchema;\n  }\n}\n\n","export class WidgetRegistry {\n\n  private widgets: { [type: string]: any } = {};\n\n  private defaultWidget: any;\n\n  constructor() { }\n\n  setDefaultWidget(widget: any) {\n    this.defaultWidget = widget;\n  }\n\n  getDefaultWidget() {\n    return this.defaultWidget;\n  }\n\n  hasWidget(type: string) {\n    return this.widgets.hasOwnProperty(type);\n  }\n\n  register(type: string, widget: any) {\n    this.widgets[type] = widget;\n  }\n\n  getWidgetType(type: string): any {\n    if (this.hasWidget(type)) {\n      return this.widgets[type];\n    }\n    return this.defaultWidget;\n  }\n}\n","import {\n  ViewContainerRef,\n  ComponentRef,\n  ComponentFactoryResolver,\n  Injectable\n} from '@angular/core';\n\nimport { WidgetRegistry } from './widgetregistry';\n\n@Injectable()\nexport class WidgetFactory {\n\n  private resolver: ComponentFactoryResolver;\n  private registry: WidgetRegistry;\n\n  constructor(registry: WidgetRegistry, resolver: ComponentFactoryResolver) {\n    this.registry = registry;\n    this.resolver = resolver;\n  }\n\n  createWidget(container: ViewContainerRef, type: string): ComponentRef<any> {\n    let componentClass = this.registry.getWidgetType(type);\n\n    let componentFactory = this.resolver.resolveComponentFactory(componentClass);\n    return container.createComponent(componentFactory);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n@Injectable()\nexport class TerminatorService {\n  public onDestroy: Subject<boolean>;\n\n  constructor() {\n    this.onDestroy = new Subject();\n  }\n\n  destroy() {\n    this.onDestroy.next(true);\n  }\n}\n","/**\n * General purpose propery binding registry\n */\nexport class PropertyBindingRegistry {\n\n  private bindings: { [key: string]: PropertyBindings } = {};\n\n  getPropertyBindings(type: PropertyBindingTypes): PropertyBindings {\n    this.bindings[type] = this.bindings[type] || new PropertyBindings();\n    return this.bindings[type];\n  }\n\n  getPropertyBindingsVisibility() {\n    return this.getPropertyBindings(PropertyBindingTypes.visibility);\n  }\n}\n\n/**\n * Defines the types of supported property bindings.<br/>\n * For now only <code>visibility</code> is supported.<br/>\n */\nexport enum PropertyBindingTypes {\n  visibility\n}\n\n/**\n * Storage that holds all bindings that are property paths related.<br/>\n */\nexport class PropertyBindings {\n  sourcesIndex: SimplePropertyIndexer = new SimplePropertyIndexer();\n  dependenciesIndex: SimplePropertyIndexer = new SimplePropertyIndexer();\n\n  add(dependencyPath: string, sourcePropertyPath: string) {\n    this.sourcesIndex.store(sourcePropertyPath, dependencyPath);\n    this.dependenciesIndex.store(dependencyPath, sourcePropertyPath);\n  }\n\n  findByDependencyPath(dependencyPath: string): string[] {\n    const result = this.dependenciesIndex.find(dependencyPath);\n    result.results = result.results || [];\n    let values = [];\n    for (const res of result.results) {\n      values = values.concat(Object.keys(res.value));\n    }\n    return result.found ? values : [];\n  }\n\n  getBySourcePropertyPath(sourcePropertyPath: string): string[] {\n    const result = this.sourcesIndex.find(sourcePropertyPath);\n    result.results = result.results || [];\n    let values = [];\n    for (const res of result.results) {\n      values = values.concat(Object.keys(res.value));\n    }\n    return result.found ? values : [];\n  }\n\n  createPathIndex(path: string): string[] {\n    return path.split('/');\n  }\n}\n\n/**\n * Simple indexer to store property paths\n */\nexport class SimplePropertyIndexer {\n\n  static MARKER = '$____value';\n  index: object = {};\n  findOnlyWithValue = true;\n\n  private _createPathIndex(path: string) {\n    return path\n      .replace(new RegExp('//', 'g'), '/')\n      .replace(new RegExp('^/', 'g'), '')\n      .split('/').filter(item => item);\n  }\n\n  store(propertyPath: string, value?: any) {\n    this._storeIndex(this._createPathIndex(propertyPath), value);\n  }\n\n  private _storeIndex(pathIndex: string[], value?: string) {\n    let indexPos = this.index;\n    for (const key of pathIndex) {\n      indexPos[key] = indexPos[key] || {};\n      indexPos = indexPos[key];\n    }\n    if (indexPos && value) {\n      indexPos[SimplePropertyIndexer.MARKER] = indexPos[SimplePropertyIndexer.MARKER] || {};\n      indexPos[SimplePropertyIndexer.MARKER][value] = value;\n    }\n  }\n\n  /**\n   * Find path in index.<br/>\n   * Will find path like:<br/>\n   * <ul>\n   *     <li>/property/0/prop</li>\n   *     <li>/property/0/prop/2/test</li>\n   *     <li>/property/0/prop/&#42;/test</li>\n   *     <li>/property/&#42;/prop/1/test</li>\n   *     <li>/property/&#42;/prop/&#42;/test</li>\n   *     <li>/property/1/prop/&#42;/test</li>\n   *  </ul>\n   * @param path\n   */\n  find(path: string): IndexerResult {\n    return this._findInIndex(this._createPathIndex(path));\n  }\n\n  _findInIndex(path: string[]): IndexerResult {\n    const ixRes: IndexerResult = {target: path, found: false, results: []};\n    this.__findIndex(ixRes, path, this.index, []);\n    return ixRes;\n  }\n\n  __findIndex(indexerResults: IndexerResult, path: string[], index: object, parent?: string[]) {\n\n    const p = parent || [];\n    const segment = path[0];\n    const wild = ('*' === segment) ? Object.keys(index) : [];\n    const _keys = ((Array.isArray(segment) ? segment : [segment]) as string[]).concat(wild);\n    const keys = _keys.filter((item, pos) => '*' !== item && _keys.indexOf(item) === pos); // remove duplicates\n\n    if (index['*']) {\n      keys.push('*');\n    }\n\n    let paths = [];\n    for (const key of keys) {\n      const restPath = path.slice(1);\n      const restIndex = index[key];\n      const restParent = p.concat(key);\n\n      if (path.length === 1) {// collect only the full paths\n        if (!this.findOnlyWithValue || (restIndex && restIndex[SimplePropertyIndexer.MARKER])) {\n          indexerResults.results = indexerResults.results || [];\n          indexerResults.results.push({\n            path: restParent,\n            value: restIndex[SimplePropertyIndexer.MARKER]\n          });\n          paths.push(restParent);\n          indexerResults.found = indexerResults.results.length > 0;\n        }\n      }\n\n      if (!restPath || !restPath.length || !restIndex) {\n        break;\n      }\n      const restPaths = this.__findIndex(indexerResults, restPath, restIndex, restParent);\n\n      paths = paths.concat(restPaths);\n    }\n    return paths;\n  }\n\n}\n\nexport interface IndexerResult {\n  /**\n   * The path originally searched for\n   */\n  target: string[];\n  /**\n   * Flag for the status of found or not found.<br/>\n   * Usually <code>results</code> will be empty if no matches found.\n   */\n  found: boolean;\n  /**\n   * The result path and values from the index search.<br/>\n   * Usually <code>results</code> will be empty if no matches found.\n   */\n  results: {\n    /**\n     * The path that matched the <code>target</code>\n     * separated in segments\n     */\n    path: string[],\n    /**\n     * The value stored at the <code>path</code>\n     */\n    value: any\n  }[];\n}\n","export abstract class ExpressionCompilerFactory {\n    public abstract createExpressionCompiler(): ExpressionCompiler;\n    public abstract createExpressionCompilerVisibilityIf(): ExpressionCompilerVisibilityIf;\n}\n\nexport interface ExpressionCompiler {\n    evaluate(expression: string, context: object): any;\n}\n\nexport interface ExpressionCompilerVisibilityIf {\n    evaluate(expression: string, context: ExpressionContextVisibilitIf): any;\n}\n/**\n * UseCase:<br/>\n * When evaluating the expression of a <code>visibilityIf</code> condition\n * an instance of this definition will be passed as context.<br/>\n * This will give access to the source and target <code>FormProperty</code>.\n */\nexport interface ExpressionContextVisibilitIf {\n    /**\n     * The source property which has the <code>visibilityIf</code> defined\n     */\n    source: FormProperty\n    /**\n     * The target property given with the <code>visibilityIf</code>\n     * <em>path</em> property\n     */\n    target: FormProperty\n}\n\n\nimport * as JEXL from 'jexl';\nimport { FormProperty } from './model';\n\nexport class JEXLExpressionCompilerFactory extends ExpressionCompilerFactory {\n    public createExpressionCompiler(): ExpressionCompiler {\n        return new JEXLExpressionCompiler();\n    }\n\n    public createExpressionCompilerVisibilityIf(): ExpressionCompilerVisibilityIf {\n        return new JEXLExpressionCompilerVisibiltyIf();\n    }\n}\n\nexport class JEXLExpressionCompiler implements ExpressionCompiler {\n    evaluate(expression: string, context: object = {}): any {\n        return new JEXL.Jexl().evalSync(expression, context)\n    }\n}\n\nexport class JEXLExpressionCompilerVisibiltyIf implements ExpressionCompilerVisibilityIf {\n    evaluate(expression: string, context: ExpressionContextVisibilitIf = { source: {} as FormProperty, target: {} as FormProperty }): any {\n        return new JEXL.Jexl().evalSync(expression, context)\n    }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  OnChanges,\n  EventEmitter,\n  Input,\n  Output,\n  SimpleChanges\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport {Action} from './model/action';\nimport {ActionRegistry} from './model/actionregistry';\nimport {FormProperty} from './model/formproperty';\nimport {FormPropertyFactory} from './model/formpropertyfactory';\nimport {SchemaPreprocessor} from './model/schemapreprocessor';\nimport {ValidatorRegistry} from './model/validatorregistry';\nimport {Validator} from './model/validator';\nimport {Binding} from './model/binding';\nimport {BindingRegistry} from './model/bindingregistry';\n\nimport {SchemaValidatorFactory} from './schemavalidatorfactory';\nimport {WidgetFactory} from './widgetfactory';\nimport {TerminatorService} from './terminator.service';\nimport {PropertyBindingRegistry} from './property-binding-registry';\nimport { ExpressionCompilerFactory } from './expression-compiler-factory';\n\nexport function useFactory(schemaValidatorFactory, validatorRegistry, propertyBindingRegistry, expressionCompilerFactory) {\n  return new FormPropertyFactory(schemaValidatorFactory, validatorRegistry, propertyBindingRegistry, expressionCompilerFactory);\n}\n\n@Component({\n  selector: 'sf-form',\n  template: `\n    <form *ngIf=\"rootProperty\" [attr.name]=\"rootProperty.rootName\" [attr.id]=\"rootProperty.rootName\">\n      <sf-form-element [formProperty]=\"rootProperty\"></sf-form-element>\n    </form>`,\n  providers: [\n    ActionRegistry,\n    ValidatorRegistry,\n    PropertyBindingRegistry,\n    BindingRegistry,\n    SchemaPreprocessor,\n    WidgetFactory,\n    {\n      provide: FormPropertyFactory,\n      useFactory: useFactory,\n      deps: [SchemaValidatorFactory, ValidatorRegistry, PropertyBindingRegistry, ExpressionCompilerFactory]\n    },\n    TerminatorService,\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: FormComponent,\n      multi: true\n    }\n  ]\n})\nexport class FormComponent implements OnChanges, ControlValueAccessor {\n\n  @Input() schema: any = null;\n\n  @Input() model: any;\n\n  @Input() actions: { [actionId: string]: Action } = {};\n\n  @Input() validators: { [path: string]: Validator } = {};\n\n  @Input() bindings: { [path: string]: Binding } = {};\n\n  @Output() onChange = new EventEmitter<{ value: any }>();\n\n  @Output() modelChange = new EventEmitter<any>();\n\n  @Output() isValid = new EventEmitter<boolean>();\n\n  @Output() onErrorChange = new EventEmitter<{ value: any[] }>();\n\n  @Output() onErrorsChange = new EventEmitter<{value: any}>();\n\n  rootProperty: FormProperty = null;\n\n  private onChangeCallback: any;\n\n  constructor(\n    private formPropertyFactory: FormPropertyFactory,\n    private actionRegistry: ActionRegistry,\n    private validatorRegistry: ValidatorRegistry,\n    private bindingRegistry: BindingRegistry,\n    private cdr: ChangeDetectorRef,\n    private terminator: TerminatorService\n  ) { }\n\n  writeValue(obj: any) {\n    if (this.rootProperty) {\n      this.rootProperty.reset(obj, false);\n    }\n  }\n\n  registerOnChange(fn: any) {\n    this.onChangeCallback = fn;\n    if (this.rootProperty) {\n      this.rootProperty.valueChanges.subscribe(\n        this.onValueChanges.bind(this)\n      );\n    }\n  }\n\n  // TODO implement\n  registerOnTouched(fn: any) {\n  }\n\n  // TODO implement\n  // setDisabledState(isDisabled: boolean)?: void\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.validators) {\n      this.setValidators();\n    }\n\n    if (changes.actions) {\n      this.setActions();\n    }\n\n    if (changes.bindings) {\n      this.setBindings();\n    }\n\n    if (this.schema && !this.schema.type) {\n      this.schema.type = 'object';\n    }\n\n    if (this.schema && changes.schema) {\n      if (!changes.schema.firstChange) {\n        this.terminator.destroy();\n      }\n\n      SchemaPreprocessor.preprocess(this.schema);\n      this.rootProperty = this.formPropertyFactory.createProperty(this.schema);\n      if (this.model) {\n        // this.rootProperty.reset(this.model, false);\n      }\n\n      this.rootProperty.valueChanges.subscribe(\n        this.onValueChanges.bind(this)\n      );\n\n      this.rootProperty.errorsChanges.subscribe(value => {\n        this.onErrorChange.emit({value: value});\n        this.isValid.emit(!(value && value.length));\n      });\n\n    }\n\n    if (this.schema && (changes.model || changes.schema )) {\n      this.rootProperty.reset(this.model, false);\n      this.cdr.detectChanges();\n    }\n\n  }\n\n  private setValidators() {\n    this.validatorRegistry.clear();\n    if (this.validators) {\n      for (const validatorId in this.validators) {\n        if (this.validators.hasOwnProperty(validatorId)) {\n          this.validatorRegistry.register(validatorId, this.validators[validatorId]);\n        }\n      }\n    }\n  }\n\n  private setActions() {\n    this.actionRegistry.clear();\n    if (this.actions) {\n      for (const actionId in this.actions) {\n        if (this.actions.hasOwnProperty(actionId)) {\n          this.actionRegistry.register(actionId, this.actions[actionId]);\n        }\n      }\n    }\n  }\n\n  private setBindings() {\n    this.bindingRegistry.clear();\n    if (this.bindings) {\n      for (const bindingPath in this.bindings) {\n        if (this.bindings.hasOwnProperty(bindingPath)) {\n          this.bindingRegistry.register(bindingPath, this.bindings[bindingPath]);\n        }\n      }\n    }\n  }\n\n  public reset() {\n    this.rootProperty.reset(null, true);\n  }\n\n  private setModel(value: any) {\n    if (this.model) {\n      Object.assign(this.model, value);\n    } else {\n      this.model = value;\n    }\n  }\n\n  private onValueChanges(value) {\n    if (this.onChangeCallback) {\n      this.setModel(value);\n      this.onChangeCallback(value);\n    }\n\n    // two way binding is used\n    if (this.modelChange.observers.length > 0) {\n      if (!this.onChangeCallback) {\n        this.setModel(value);\n      }\n    }\n    this.onChange.emit({value: value});\n  }\n}\n","import {\n  Component, ElementRef,\n  Input, OnDestroy,\n  OnInit, Renderer2\n} from '@angular/core';\n\nimport {\n  FormControl\n} from '@angular/forms';\n\nimport {Widget} from './widget';\n\nimport {ActionRegistry} from './model/actionregistry';\nimport {FormProperty} from './model/formproperty';\nimport {BindingRegistry} from './model/bindingregistry';\nimport {Binding} from './model/binding';\n\n@Component({\n  selector: 'sf-form-element',\n  template: `\n    <div *ngIf=\"formProperty.visible\"\n         [class.has-error]=\"!control.valid\"\n         [class.has-success]=\"control.valid\">\n      <sf-widget-chooser\n        (widgetInstanciated)=\"onWidgetInstanciated($event)\"\n        [widgetInfo]=\"formProperty.schema.widget\">\n      </sf-widget-chooser>\n      <sf-form-element-action *ngFor=\"let button of buttons\" [button]=\"button\" [formProperty]=\"formProperty\"></sf-form-element-action>\n    </div>`\n})\nexport class FormElementComponent implements OnInit, OnDestroy {\n\n  private static counter = 0;\n\n  @Input() formProperty: FormProperty;\n  control: FormControl = new FormControl('', () => null);\n\n  widget: Widget<any> = null;\n\n  buttons = [];\n\n  unlisten = [];\n\n  constructor(private actionRegistry: ActionRegistry,\n              private bindingRegistry: BindingRegistry,\n              private renderer: Renderer2,\n              private elementRef: ElementRef) {\n  }\n\n  ngOnInit() {\n    this.parseButtons();\n    this.setupBindings();\n  }\n\n  private setupBindings() {\n    const bindings: Binding[] = this.bindingRegistry.get(this.formProperty.path);\n    if ((bindings || []).length) {\n      bindings.forEach((binding) => {\n        for (const eventId in binding) {\n          this.createBinding(eventId, binding[eventId]);\n        }\n      });\n    }\n  }\n\n  private createBinding(eventId, listener) {\n    this.unlisten.push(this.renderer.listen(this.elementRef.nativeElement,\n      eventId,\n      (event) => {\n        if (listener instanceof Function) {\n          listener(event, this.formProperty);\n        } else {\n          console.warn('Calling non function handler for eventId ' + eventId + ' for path ' + this.formProperty.path);\n        }\n      }));\n  }\n\n  private parseButtons() {\n    if (this.formProperty.schema.buttons !== undefined) {\n      this.buttons = this.formProperty.schema.buttons;\n\n      for (let button of this.buttons) {\n        this.createButtonCallback(button);\n      }\n    }\n  }\n\n  private createButtonCallback(button) {\n    button.action = (e) => {\n      let action;\n      if (button.id && (action = this.actionRegistry.get(button.id))) {\n        if (action) {\n          action(this.formProperty, button.parameters);\n        }\n      }\n      e.preventDefault();\n    };\n  }\n\n  onWidgetInstanciated(widget: Widget<any>) {\n    this.widget = widget;\n    let id = this.formProperty.canonicalPathNotation ||Â 'field' + (FormElementComponent.counter++);\n    if (this.formProperty.root.rootName) {\n      id = `${this.formProperty.root.rootName}:${id}`;\n    }\n\n    this.widget.formProperty = this.formProperty;\n    this.widget.schema = this.formProperty.schema;\n    this.widget.name = id;\n    this.widget.id = id;\n    this.widget.control = this.control;\n  }\n\n  ngOnDestroy(): void {\n    if (this.unlisten) {\n      this.unlisten.forEach((item) => {\n        item();\n      });\n    }\n  }\n\n}\n","import {\n  Component,\n  ComponentRef,\n  Input,\n  OnChanges,\n  ViewChild,\n  ViewContainerRef,\n  OnInit,\n  OnDestroy\n} from \"@angular/core\";\nimport {Subscription} from 'rxjs';\nimport {WidgetFactory} from \"./widgetfactory\";\nimport {TerminatorService} from \"./terminator.service\";\n\n@Component({\n  selector: 'sf-form-element-action',\n  template: '<ng-template #target></ng-template>'\n})\nexport class FormElementComponentAction implements OnInit, OnChanges, OnDestroy {\n\n  @Input()\n  button: any;\n\n  @Input()\n  formProperty: any;\n\n  @ViewChild('target', { read: ViewContainerRef, static: true }) container: ViewContainerRef;\n\n  private ref: ComponentRef<any>;\n  private subs: Subscription;\n\n  constructor(private widgetFactory: WidgetFactory = null,\n              private terminator: TerminatorService) {\n  }\n\n  ngOnInit() {\n    this.subs = this.terminator.onDestroy.subscribe(destroy => {\n      if (destroy) {\n        this.ref.destroy();\n      }\n    });\n  }\n\n  ngOnChanges() {\n    this.ref = this.widgetFactory.createWidget(this.container, this.button.widget || 'button');\n    this.ref.instance.button = this.button;\n    this.ref.instance.formProperty = this.formProperty;\n  }\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n  }\n}\n","import {\n  Component,\n  ComponentRef,\n  ChangeDetectorRef,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  OnInit,\n  OnDestroy\n} from '@angular/core';\nimport { TerminatorService } from './terminator.service';\nimport { WidgetFactory } from './widgetfactory';\nimport { Subscription } from 'rxjs';\n\n\n@Component({\n  selector: 'sf-widget-chooser',\n  template: `<div #target></div>`,\n})\nexport class WidgetChooserComponent implements OnInit, OnChanges, OnDestroy {\n\n  @Input() widgetInfo: any;\n\n  @Output() widgetInstanciated = new EventEmitter<any>();\n\n  @ViewChild('target', { read: ViewContainerRef, static: true }) container: ViewContainerRef;\n\n  private widgetInstance: any;\n  private ref: ComponentRef<any>;\n  private subs: Subscription;\n\n  constructor(\n    private widgetFactory: WidgetFactory = null,\n    private cdr: ChangeDetectorRef,\n    private terminator: TerminatorService,\n  ) { }\n\n  ngOnInit() {\n    this.subs = this.terminator.onDestroy.subscribe(destroy => {\n      if (destroy) {\n        this.ref.destroy();\n      }\n    });\n  }\n\n  ngOnChanges() {\n    this.ref = this.widgetFactory.createWidget(this.container, this.widgetInfo.id);\n    this.widgetInstanciated.emit(this.ref.instance);\n    this.widgetInstance = this.ref.instance;\n    this.cdr.detectChanges();\n  }\n\n  ngOnDestroy() {\n    this.subs.unsubscribe();\n  }\n}\n","import {FormProperty} from './formproperty';\n\nexport abstract class AtomicProperty extends FormProperty {\n\n  setValue(value, onlySelf = false) {\n    this._value = value;\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  reset(value: any = null, onlySelf = true) {\n    this.resetValue(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  resetValue(value: any): any {\n    if (value === null) {\n      if (this.schema.default !== undefined) {\n        value = this.schema.default;\n      } else {\n        value = this.fallbackValue();\n      }\n    }\n    this._value = value;\n  }\n\n  public _hasValue(): boolean {\n    return this.fallbackValue() !== this.value;\n  }\n\n  abstract fallbackValue(): any;\n\n  public _updateValue() {\n  }\n}\n","import { PROPERTY_TYPE_MAPPING } from './typemapping';\nimport {PropertyGroup} from './formproperty';\nimport {FormPropertyFactory} from './formpropertyfactory';\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\nimport { ExpressionCompilerFactory } from '../expression-compiler-factory';\n\nexport class ObjectProperty extends PropertyGroup {\n\n  private propertiesId: string[] = [];\n\n  constructor(private formPropertyFactory: FormPropertyFactory,\n              schemaValidatorFactory: SchemaValidatorFactory,\n              validatorRegistry: ValidatorRegistry,\n              expressionCompilerFactory: ExpressionCompilerFactory,\n              schema: any,\n              parent: PropertyGroup,\n              path: string) {\n    super(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n    this.createProperties();\n  }\n\n  setValue(value: any, onlySelf: boolean) {\n    for (const propertyId in value) {\n      if (value.hasOwnProperty(propertyId)) {\n        this.properties[propertyId].setValue(value[propertyId], true);\n      }\n    }\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  reset(value: any, onlySelf = true) {\n    value = value || this.schema.default || {};\n    this.resetProperties(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  resetProperties(value: any) {\n    for (const propertyId in this.schema.properties) {\n      if (this.schema.properties.hasOwnProperty(propertyId)) {\n        this.properties[propertyId].reset(value[propertyId], true);\n      }\n    }\n  }\n\n  createProperties() {\n    this.properties = {};\n    this.propertiesId = [];\n    for (const propertyId in this.schema.properties) {\n      if (this.schema.properties.hasOwnProperty(propertyId)) {\n        const propertySchema = this.schema.properties[propertyId];\n        this.properties[propertyId] = this.formPropertyFactory.createProperty(propertySchema, this, propertyId);\n        this.propertiesId.push(propertyId);\n      }\n    }\n  }\n\n  public _hasValue(): boolean {\n    return !!Object.keys(this.value).length;\n  }\n\n  public _updateValue() {\n    this.reduceValue();\n  }\n\n  public _runValidation() {\n    super._runValidation();\n\n    if (this._errors) {\n      this._errors.forEach(error => {\n        const prop = this.searchProperty(error.path.slice(1));\n        if (prop) {\n          prop.extendErrors(error);\n        }\n      });\n    }\n  }\n\n  private reduceValue(): void {\n    const value = {};\n    this.forEachChild((property, propertyId: string) => {\n      if (property.visible && property._hasValue()) {\n        value[propertyId] = property.value;\n      }\n    });\n    this._value = value;\n  }\n}\n\nPROPERTY_TYPE_MAPPING.object = (\n    schemaValidatorFactory: SchemaValidatorFactory,\n    validatorRegistry: ValidatorRegistry,\n    expressionCompilerFactory: ExpressionCompilerFactory,\n    schema: any,\n    parent: PropertyGroup,\n    path: string,\n    formPropertyFactory: FormPropertyFactory,\n) => {\n    return new ObjectProperty(\n        formPropertyFactory, schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n};\n","import {FormProperty, PropertyGroup} from './formproperty';\nimport {FormPropertyFactory} from './formpropertyfactory';\nimport { PROPERTY_TYPE_MAPPING } from './typemapping';\nimport {SchemaValidatorFactory} from '../schemavalidatorfactory';\nimport {ValidatorRegistry} from './validatorregistry';\nimport { ExpressionCompilerFactory } from '../expression-compiler-factory';\n\nexport class ArrayProperty extends PropertyGroup {\n\n  constructor(private formPropertyFactory: FormPropertyFactory,\n              schemaValidatorFactory: SchemaValidatorFactory,\n              validatorRegistry: ValidatorRegistry,\n              expressionCompilerFactory: ExpressionCompilerFactory,\n              schema: any,\n              parent: PropertyGroup,\n              path: string) {\n    super(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n  }\n\n  addItem(value: any = null): FormProperty {\n    let newProperty = this.addProperty();\n    newProperty.reset(value, false);\n    return newProperty;\n  }\n\n  private addProperty() {\n    let newProperty = this.formPropertyFactory.createProperty(this.schema.items, this);\n    (<FormProperty[]>this.properties).push(newProperty);\n    return newProperty;\n  }\n\n  removeItem(item: FormProperty) {\n    this.properties = (<FormProperty[]>this.properties).filter(i => i !== item);\n    this.updateValueAndValidity(false, true);\n  }\n\n  setValue(value: any, onlySelf: boolean) {\n    this.createProperties();\n    this.resetProperties(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  public _hasValue(): boolean {\n    return true;\n  }\n\n  public _updateValue() {\n    this.reduceValue();\n  }\n\n  private reduceValue(): void {\n    const value = [];\n    this.forEachChild((property, _) => {\n      if (property.visible && property._hasValue()) {\n        value.push(property.value);\n      }\n    });\n    this._value = value;\n  }\n\n  reset(value: any, onlySelf = true) {\n    value = value || this.schema.default || [];\n    this.properties = [];\n    this.resetProperties(value);\n    this.updateValueAndValidity(onlySelf, true);\n  }\n\n  private createProperties() {\n    this.properties = [];\n  }\n\n\n  private resetProperties(value: any) {\n    for (let idx in value) {\n      if (value.hasOwnProperty(idx)) {\n        let property = this.addProperty();\n        property.reset(value[idx], true);\n      }\n    }\n  }\n}\n\nPROPERTY_TYPE_MAPPING.array = (\n    schemaValidatorFactory: SchemaValidatorFactory,\n    validatorRegistry: ValidatorRegistry,\n    expressionCompilerFactory: ExpressionCompilerFactory,\n    schema: any,\n    parent: PropertyGroup,\n    path: string,\n    formPropertyFactory: FormPropertyFactory,\n) => {\n    return new ArrayProperty(\n        formPropertyFactory, schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n};\n","import { AtomicProperty } from './atomicproperty';\nimport { PROPERTY_TYPE_MAPPING } from './typemapping';\nimport { PropertyGroup } from './formproperty';\nimport { ExpressionCompilerFactory } from '../expression-compiler-factory';\nimport { ValidatorRegistry } from './validatorregistry';\nimport { SchemaValidatorFactory } from '../schemavalidatorfactory';\n\nexport class StringProperty extends AtomicProperty {\n\n  fallbackValue() {\n    return '';\n  }\n\n}\n\nPROPERTY_TYPE_MAPPING.string = (\n    schemaValidatorFactory: SchemaValidatorFactory,\n    validatorRegistry: ValidatorRegistry,\n    expressionCompilerFactory: ExpressionCompilerFactory,\n    schema: any,\n    parent: PropertyGroup,\n    path: string\n) => {\n    return new StringProperty(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n};\n","import { AtomicProperty } from './atomicproperty';\nimport { ValidatorRegistry, PropertyGroup } from '.';\nimport { ExpressionCompilerFactory } from '../expression-compiler-factory';\nimport { SchemaValidatorFactory } from '../schemavalidatorfactory';\nimport { PROPERTY_TYPE_MAPPING } from './typemapping';\n\nexport class BooleanProperty extends AtomicProperty {\n\n  fallbackValue() {\n    return null;\n  }\n}\n\nPROPERTY_TYPE_MAPPING.boolean = (\n    schemaValidatorFactory: SchemaValidatorFactory,\n    validatorRegistry: ValidatorRegistry,\n    expressionCompilerFactory: ExpressionCompilerFactory,\n    schema: any,\n    parent: PropertyGroup,\n    path: string\n) => {\n    return new BooleanProperty(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n};\n","import {AtomicProperty} from './atomicproperty';\nimport { ValidatorRegistry, PropertyGroup } from '.';\nimport { ExpressionCompilerFactory } from '../expression-compiler-factory';\nimport { SchemaValidatorFactory } from '../schemavalidatorfactory';\nimport { PROPERTY_TYPE_MAPPING } from './typemapping';\n\nexport class NumberProperty extends AtomicProperty {\n\n  fallbackValue() {\n    return null;\n  }\n\n  setValue(value, onlySelf = false) {\n    if (typeof value === 'string') {\n      if (value.length) {\n        value = value.indexOf('.') > -1 ? parseFloat(value) : parseInt(value, 10);\n      } else {\n        value = null;\n      }\n    }\n    this._value = value;\n    this.updateValueAndValidity(onlySelf, true);\n  }\n}\n\nPROPERTY_TYPE_MAPPING.integer = (\n    schemaValidatorFactory: SchemaValidatorFactory,\n    validatorRegistry: ValidatorRegistry,\n    expressionCompilerFactory: ExpressionCompilerFactory,\n    schema: any,\n    parent: PropertyGroup,\n    path: string\n) => {\n    return new NumberProperty(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n};\n\n PROPERTY_TYPE_MAPPING.number = (\n    schemaValidatorFactory: SchemaValidatorFactory,\n    validatorRegistry: ValidatorRegistry,\n    expressionCompilerFactory: ExpressionCompilerFactory,\n    schema: any,\n    parent: PropertyGroup,\n    path: string\n) => {\n    return new NumberProperty(schemaValidatorFactory, validatorRegistry, expressionCompilerFactory, schema, parent, path);\n};\n","import {AfterViewInit} from '@angular/core';\nimport {FormControl} from '@angular/forms';\n\nimport {ArrayProperty} from './model/arrayproperty';\nimport {FormProperty} from './model/formproperty';\nimport {ObjectProperty} from './model/objectproperty';\n\nexport abstract class Widget<T extends FormProperty> {\n  formProperty: T;\n  control: FormControl;\n  errorMessages: string[];\n\n  id: string = '';\n  name: string = '';\n  schema: any = {};\n}\n\nexport class ControlWidget extends Widget<FormProperty> implements AfterViewInit {\n\n  ngAfterViewInit() {\n    const control = this.control;\n    this.formProperty.valueChanges.subscribe((newValue) => {\n      if (control.value !== newValue) {\n        control.setValue(newValue, {emitEvent: false});\n      }\n    });\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, { emitEvent: true });\n      const messages = (errors || [])\n        .filter(e => {\n          return e.path && e.path.slice(1) === this.formProperty.path;\n        })\n        .map(e => e.message);\n      this.errorMessages = messages.filter((m, i) => messages.indexOf(m) === i);\n    });\n    control.valueChanges.subscribe((newValue) => {\n      this.formProperty.setValue(newValue, false);\n    });\n  }\n\n}\n\nexport class ArrayLayoutWidget extends Widget<ArrayProperty> implements AfterViewInit {\n\n  ngAfterViewInit() {\n    const control = this.control;\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, {emitEvent: true});\n    });\n  }\n}\n\nexport class ObjectLayoutWidget extends Widget<ObjectProperty> implements AfterViewInit {\n\n  ngAfterViewInit() {\n    const control = this.control;\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, {emitEvent: true});\n    });\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { ArrayLayoutWidget } from '../../widget';\nimport { FormProperty } from '../../model';\n\n@Component({\n  selector: 'sf-array-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n\t<span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<div *ngFor=\"let itemProperty of formProperty.properties\">\n\t\t<sf-form-element [formProperty]=\"itemProperty\"></sf-form-element>\n\t\t<button (click)=\"removeItem(itemProperty)\" class=\"btn btn-default array-remove-button\"\n\t\t\t[disabled]=\"isRemoveButtonDisabled()\" \n\t\t\t*ngIf=\"!(schema.hasOwnProperty('minItems') && schema.hasOwnProperty('maxItems') && schema.minItems === schema.maxItems)\"\n\t\t\t>\n\t\t\t<span class=\"glyphicon glyphicon-minus\" aria-hidden=\"true\"></span> Remove\n\t\t</button>\n\t</div>\n\t<button (click)=\"addItem()\" class=\"btn btn-default array-add-button\"\n\t\t[disabled]=\"isAddButtonDisabled()\"\n\t\t*ngIf=\"!(schema.hasOwnProperty('minItems') && schema.hasOwnProperty('maxItems') && schema.minItems === schema.maxItems)\"\n\t>\n\t\t<span class=\"glyphicon glyphicon-plus\" aria-hidden=\"true\"></span> Add\n\t</button>\n</div>`\n})\nexport class ArrayWidget extends ArrayLayoutWidget {\n  buttonDisabledAdd:boolean\n  buttonDisabledRemove:boolean\n\n  addItem() {\n\tthis.formProperty.addItem();\n\tthis.updateButtonDisabledState()\n  }\n\n  removeItem(item: FormProperty) {\n\tthis.formProperty.removeItem(item);\n\tthis.updateButtonDisabledState()\n  }\n\n  trackByIndex(index: number, item: any) {\n    return index;\n  }\n\n\tupdateButtonDisabledState() {\n\t\tthis.buttonDisabledAdd = this.isAddButtonDisabled()\n\t\tthis.buttonDisabledRemove = this.isRemoveButtonDisabled()\n\t}\n\tisAddButtonDisabled() {\n\t\tif (this.schema.hasOwnProperty('maxItems') && Array.isArray(this.formProperty.properties)) {\n\t\t\tif (this.formProperty.properties.length >= this.schema.maxItems) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\n\tisRemoveButtonDisabled() {\n\t\tif (this.schema.hasOwnProperty('minItems') && Array.isArray(this.formProperty.properties)) {\n\t\t\tif (this.formProperty.properties.length <= this.schema.minItems) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n}\n","import {Component} from \"@angular/core\";\n\n@Component({\n  selector: 'sf-button-widget',\n  template: '<button (click)=\"button.action($event)\">{{button.label}}</button>'\n})\nexport class ButtonWidget {\n  public button\n  public formProperty\n}\n","import { Component } from '@angular/core';\n\nimport { ObjectLayoutWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-form-object',\n  template: `<fieldset *ngFor=\"let fieldset of formProperty.schema.fieldsets\">\n\t<legend *ngIf=\"fieldset.title\">{{fieldset.title}}</legend>\n\t<div *ngIf=\"fieldset.description\">{{fieldset.description}}</div>\n\t<div *ngFor=\"let fieldId of fieldset.fields\">\n\t\t<sf-form-element [formProperty]=\"formProperty.getProperty(fieldId)\"></sf-form-element>\n\t</div>\n</fieldset>`\n})\nexport class ObjectWidget extends ObjectLayoutWidget { }\n","import { Component, AfterViewInit } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-checkbox-widget',\n  template: `<div class=\"widget form-group\">\n    <label [attr.for]=\"id\" class=\"horizontal control-label\">\n        {{ schema.title }}\n    </label>\n\t<div *ngIf=\"schema.type!='array'\" class=\"checkbox\">\n\t\t<label class=\"horizontal control-label\">\n\t\t\t<input [formControl]=\"control\" [attr.name]=\"name\" [attr.id]=\"id\" [indeterminate]=\"control.value !== false && control.value !== true ? true :null\" type=\"checkbox\" [disabled]=\"schema.readOnly\">\n\t\t\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n\t\t\t{{schema.description}}\n\t\t</label>\n\t</div>\n\t<ng-container *ngIf=\"schema.type==='array'\">\n\t\t<div *ngFor=\"let option of schema.items.oneOf\" class=\"checkbox\">\n\t\t\t<label class=\"horizontal control-label\">\n\t\t\t\t<input [attr.name]=\"name\"\n\t\t\t\t\tvalue=\"{{option.enum[0]}}\" type=\"checkbox\" \n\t\t\t\t\t[attr.disabled]=\"schema.readOnly\"\n\t\t\t\t\t(change)=\"onCheck($event.target)\"\n\t\t\t\t\t[attr.checked]=\"checked[option.enum[0]] ? true : null\"\n\t\t\t\t\t[attr.id]=\"id + '.' + option.enum[0]\"\n\t\t\t\t\t>\n\t\t\t\t{{option.description}}\n\t\t\t</label>\n\t\t</div>\n\t</ng-container>\n</div>`\n})\nexport class CheckboxWidget extends ControlWidget implements AfterViewInit {\n\n\tchecked: any = {};\n\n\tngAfterViewInit() {\n\t\tconst control = this.control;\n\t\tthis.formProperty.valueChanges.subscribe((newValue) => {\n\t\t\tif (control.value !== newValue) {\n\t\t\t\tcontrol.setValue(newValue, { emitEvent: false });\n\t\t\t\tif (newValue && Array.isArray(newValue)) {\n\t\t\t\t\tnewValue.map(v => this.checked[v] = true);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.formProperty.errorsChanges.subscribe((errors) => {\n\t\t\tcontrol.setErrors(errors, { emitEvent: true });\n\t\t});\n\t\tcontrol.valueChanges.subscribe((newValue) => {\n\t\t\tthis.formProperty.setValue(newValue, false);\n\t\t});\n\t}\n\n\tonCheck(el) {\n\t\tif (el.checked) {\n\t\t\tthis.checked[el.value] = true;\n\t\t} else {\n\t\t\tdelete this.checked[el.value];\n\t\t}\n\t\tthis.formProperty.setValue(Object.keys(this.checked), false);\n\t}\n}\n","import { Component, AfterViewInit } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-file-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n  <input [name]=\"name\" class=\"text-widget file-widget\" [attr.id]=\"id\"\n    [formControl]=\"control\" type=\"file\" [attr.disabled]=\"schema.readOnly?true:null\"\n    (change)=\"onFileChange($event)\">\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>`\n})\nexport class FileWidget extends ControlWidget implements AfterViewInit {\n\n  protected reader = new FileReader();\n  protected filedata: any = {};\n\n  constructor() {\n    super();\n  }\n\n  ngAfterViewInit() {\n    // OVERRIDE ControlWidget ngAfterViewInit() as ReactiveForms do not handle\n    // file inputs\n    const control = this.control;\n    this.formProperty.errorsChanges.subscribe((errors) => {\n      control.setErrors(errors, { emitEvent: true });\n    });\n\n    this.reader.onloadend = () => {\n      this.filedata.data = window.btoa((this.reader.result as string));\n      this.formProperty.setValue(this.filedata, false);\n    };\n  }\n\n  onFileChange($event) {\n    const file = $event.target.files[0];\n    this.filedata.filename = file.name;\n    this.filedata.size = file.size;\n    this.filedata['content-type'] = file.type;\n    this.filedata.encoding = 'base64';\n    this.reader.readAsBinaryString(file);\n  }\n}\n","import {\n  Component,\n} from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-integer-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n  <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<input [attr.readonly]=\"schema.readOnly?true:null\" [attr.name]=\"name\"\n\t[attr.id]=\"id\"\n\tclass=\"text-widget integer-widget form-control\" [formControl]=\"control\"\n\t[attr.type]=\"'number'\" [attr.min]=\"schema.minimum\" [attr.max]=\"schema.maximum\"\n\t[attr.placeholder]=\"schema.placeholder\"\n\t[attr.maxLength]=\"schema.maxLength || null\"\n  [attr.minLength]=\"schema.minLength || null\">\n</div>`\n})\nexport class IntegerWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-textarea-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<textarea [readonly]=\"schema.readOnly\" [name]=\"name\"\n\t\t[attr.id]=\"id\"\n\t\tclass=\"text-widget textarea-widget form-control\"\n\t\t[attr.placeholder]=\"schema.placeholder\"\n\t\t[attr.maxLength]=\"schema.maxLength || null\"\n    [attr.minLength]=\"schema.minLength || null\"\n\t\t[formControl]=\"control\"></textarea>\n</div>`\n})\nexport class TextAreaWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-radio-widget',\n  template: `<div class=\"widget form-group\">\n\t<label>{{schema.title}}</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n\t<div *ngFor=\"let option of schema.oneOf\" class=\"radio\">\n\t\t<label class=\"horizontal control-label\">\n\t\t\t<input [formControl]=\"control\" [attr.name]=\"name\" [attr.id]=\"id + '.' + option.enum[0]\" value=\"{{option.enum[0]}}\" type=\"radio\"  [disabled]=\"schema.readOnly||option.readOnly\">\n\t\t\t{{option.description}}\n\t\t</label>\n\t</div>\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>`\n})\nexport class RadioWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-range-widget',\n  template: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\t\n\t<input [name]=\"name\" class=\"text-widget range-widget\" [attr.id]=\"id\"\n\t[formControl]=\"control\" [attr.type]=\"'range'\" [attr.min]=\"schema.minimum\" [attr.max]=\"schema.maximum\" [disabled]=\"schema.readOnly?true:null\" >\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\">\n</div>`\n})\nexport class RangeWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n\tselector: 'sf-select-widget',\n\ttemplate: `<div class=\"widget form-group\">\n\t<label [attr.for]=\"id\" class=\"horizontal control-label\">\n\t\t{{ schema.title }}\n\t</label>\n\n\t<span *ngIf=\"schema.description\" class=\"formHelp\">\n\t\t{{schema.description}}\n\t</span>\n\n\t<select *ngIf=\"schema.type!='array'\" [formControl]=\"control\" [attr.name]=\"name\" [attr.id]=\"id\" [disabled]=\"schema.readOnly\" [disableControl]=\"schema.readOnly\" class=\"form-control\">\n\t\t<ng-container *ngIf=\"schema.oneOf; else use_enum\">\n\t\t\t<option *ngFor=\"let option of schema.oneOf\" [ngValue]=\"option.enum[0]\" >{{option.description}}</option>\n\t\t</ng-container>\n\t\t<ng-template #use_enum>\n\t\t\t<option *ngFor=\"let option of schema.enum\" [ngValue]=\"option\" >{{option}}</option>\n\t\t</ng-template>\n\t</select>\n\n\t<select *ngIf=\"schema.type==='array'\" multiple [formControl]=\"control\" [attr.name]=\"name\" [attr.id]=\"id\" [disabled]=\"schema.readOnly\" [disableControl]=\"schema.readOnly\" class=\"form-control\">\n    <option *ngFor=\"let option of schema.items.oneOf\" [ngValue]=\"option.enum[0]\" [disabled]=\"option.readOnly\">{{option.description}}</option>\n\t</select>\n\n\t<input *ngIf=\"schema.readOnly\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>`\n})\nexport class SelectWidget extends ControlWidget {}\n","import { Component } from '@angular/core';\n\nimport { ControlWidget } from '../../widget';\n\n@Component({\n  selector: 'sf-string-widget',\n  template: `<input *ngIf=\"this.schema.widget.id ==='hidden'; else notHiddenFieldBlock\"\n  [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n<ng-template #notHiddenFieldBlock>\n<div class=\"widget form-group\">\n    <label [attr.for]=\"id\" class=\"horizontal control-label\">\n    \t{{ schema.title }}\n    </label>\n    <span *ngIf=\"schema.description\" class=\"formHelp\">{{schema.description}}</span>\n    <input [name]=\"name\" [attr.readonly]=\"(schema.widget.id!=='color') && schema.readOnly?true:null\"\n    class=\"text-widget.id textline-widget form-control\"\n    [attr.type]=\"!this.schema.widget.id || this.schema.widget.id === 'string' ? 'text' : this.schema.widget.id\"\n    [attr.id]=\"id\"  [formControl]=\"control\" [attr.placeholder]=\"schema.placeholder\"\n    [attr.maxLength]=\"schema.maxLength || null\"\n    [attr.minLength]=\"schema.minLength || null\"\n    [attr.required]=\"schema.isRequired || null\"\n    [attr.disabled]=\"(schema.widget.id=='color' && schema.readOnly)?true:null\">\n    <input *ngIf=\"(schema.widget.id==='color' && schema.readOnly)\" [attr.name]=\"name\" type=\"hidden\" [formControl]=\"control\">\n</div>\n</ng-template>`\n})\nexport class StringWidget extends ControlWidget {\n\n    getInputType() {\n        if (!this.schema.widget.id || this.schema.widget.id === 'string') {\n            return 'text';\n        } else {\n            return this.schema.widget.id;\n        }\n    }\n}\n","import { ArrayWidget } from './array/array.widget';\nimport { ButtonWidget } from './button/button.widget';\nimport { CheckboxWidget } from './checkbox/checkbox.widget';\nimport { FileWidget } from './file/file.widget';\nimport { IntegerWidget } from './integer/integer.widget';\nimport { ObjectWidget } from './object/object.widget';\nimport { RadioWidget } from './radio/radio.widget';\nimport { RangeWidget } from './range/range.widget';\nimport { SelectWidget } from './select/select.widget';\nimport { StringWidget } from './string/string.widget';\nimport { TextAreaWidget } from './textarea/textarea.widget';\n\nimport { WidgetRegistry } from '../widgetregistry';\n\nexport class DefaultWidgetRegistry extends WidgetRegistry {\n  constructor() {\n    super();\n\n    this.register('array',  ArrayWidget);\n    this.register('object',  ObjectWidget);\n\n    this.register('string', StringWidget);\n    this.register('search', StringWidget);\n    this.register('tel', StringWidget);\n    this.register('url', StringWidget);\n    this.register('email', StringWidget);\n    this.register('password', StringWidget);\n    this.register('color', StringWidget);\n    this.register('date', StringWidget);\n    this.register('date-time', StringWidget);\n    this.register('time', StringWidget);\n\n    this.register('integer', IntegerWidget);\n    this.register('number', IntegerWidget);\n    this.register('range', RangeWidget);\n\n    this.register('textarea', TextAreaWidget);\n\n    this.register('file', FileWidget);\n    this.register('select', SelectWidget);\n    this.register('radio', RadioWidget);\n    this.register('boolean', CheckboxWidget);\n    this.register('checkbox', CheckboxWidget);\n\n    this.register('button', ButtonWidget);\n\n    this.setDefaultWidget(StringWidget);\n  }\n}\n","import { Input, Directive } from '@angular/core'\nimport { NgControl } from '@angular/forms';\n\n@Directive({\n    selector: '[disableControl]'\n})\nexport class DisableControlDirective {\n\n    @Input() set disableControl(condition: boolean) {\n        const action = condition ? 'disable' : 'enable';\n        this.ngControl.control[action]();\n    }\n\n    constructor(private ngControl: NgControl) {\n    }\n\n}","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sf-default-field',\n  template: `<p>Unknow type</p>`\n})\nexport class DefaultWidget {}\n","import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {\n  FormsModule,\n  ReactiveFormsModule\n} from '@angular/forms';\n\nimport {FormElementComponent} from './formelement.component';\nimport {FormComponent} from './form.component';\nimport {WidgetChooserComponent} from './widgetchooser.component';\nimport {ArrayWidget} from './defaultwidgets/array/array.widget';\nimport {ButtonWidget} from './defaultwidgets/button/button.widget';\nimport {ObjectWidget} from './defaultwidgets/object/object.widget';\nimport {CheckboxWidget} from './defaultwidgets/checkbox/checkbox.widget';\nimport {FileWidget} from './defaultwidgets/file/file.widget';\nimport {IntegerWidget} from './defaultwidgets/integer/integer.widget';\nimport {TextAreaWidget} from './defaultwidgets/textarea/textarea.widget';\nimport {RadioWidget} from './defaultwidgets/radio/radio.widget';\nimport {RangeWidget} from './defaultwidgets/range/range.widget';\nimport {SelectWidget} from './defaultwidgets/select/select.widget';\nimport {StringWidget} from './defaultwidgets/string/string.widget';\nimport {DefaultWidgetRegistry} from './defaultwidgets/defaultwidgetregistry';\nimport {DisableControlDirective} from './defaultwidgets/_directives/disableControl.directive';\n\nimport {\n  DefaultWidget\n} from './default.widget';\n\nimport {WidgetRegistry} from './widgetregistry';\nimport {SchemaValidatorFactory, ZSchemaValidatorFactory} from './schemavalidatorfactory';\nimport {FormElementComponentAction} from './formelement.action.component';\nimport {ExpressionCompilerFactory, JEXLExpressionCompilerFactory} from './expression-compiler-factory';\n\nconst moduleProviders = [\n  {\n    provide: WidgetRegistry,\n    useClass: DefaultWidgetRegistry\n  },\n  {\n    provide: SchemaValidatorFactory,\n    useClass: ZSchemaValidatorFactory\n  },\n  {\n    provide: ExpressionCompilerFactory,\n    useClass: JEXLExpressionCompilerFactory\n  }\n];\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule],\n  declarations: [\n    FormElementComponent,\n    FormElementComponentAction,\n    FormComponent,\n    WidgetChooserComponent,\n    DefaultWidget,\n    ArrayWidget,\n    ButtonWidget,\n    ObjectWidget,\n    CheckboxWidget,\n    FileWidget,\n    IntegerWidget,\n    TextAreaWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    StringWidget,\n    DisableControlDirective\n  ],\n  entryComponents: [\n    FormElementComponent,\n    FormElementComponentAction,\n    FormComponent,\n    WidgetChooserComponent,\n    ArrayWidget,\n    ButtonWidget,\n    ObjectWidget,\n    CheckboxWidget,\n    FileWidget,\n    IntegerWidget,\n    TextAreaWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    StringWidget\n  ],\n  exports: [\n    FormComponent,\n    FormElementComponent,\n    FormElementComponentAction,\n    WidgetChooserComponent,\n    ArrayWidget,\n    ButtonWidget,\n    ObjectWidget,\n    CheckboxWidget,\n    FileWidget,\n    IntegerWidget,\n    TextAreaWidget,\n    RadioWidget,\n    RangeWidget,\n    SelectWidget,\n    StringWidget,\n    DisableControlDirective\n  ]\n})\nexport class SchemaFormModule {\n\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: SchemaFormModule,\n      providers: [...moduleProviders]\n    };\n  }\n\n}\n","import { Injectable, EventEmitter } from '@angular/core';\n\nexport class TemplateSchemaService {\n\n  changes = new EventEmitter();\n\n  constructor() { }\n\n  changed() {\n    this.changes.emit();\n  }\n\n}\n","import { ElementRef } from '@angular/core';\n\nexport class TemplateSchemaElement {\n\n  getTextContent(elementRef: ElementRef): string {\n    const nodes = Array.from(elementRef.nativeElement.childNodes);\n    const node = <HTMLElement>nodes.filter((el: HTMLElement) => {\n      return el.nodeType === el.TEXT_NODE;\n    }).pop();\n\n    if (!node || !node.nodeValue) {\n      return '';\n    }\n\n    return node.nodeValue.trim();\n  }\n\n}\n","import {\n  Component,\n  AfterContentInit,\n  Input,\n  Output,\n  ElementRef,\n  EventEmitter,\n  forwardRef\n} from '@angular/core';\nimport { Subject } from 'rxjs';\n\nimport { TemplateSchemaElement } from '../template-schema-element';\n\n\n@Component({\n  selector: 'sf-button',\n  templateUrl: './button.component.html',\n  providers: [\n    {\n      provide: TemplateSchemaElement,\n      useExisting: forwardRef(() => ButtonComponent),\n    }\n  ]\n})\nexport class ButtonComponent extends TemplateSchemaElement implements AfterContentInit {\n\n  @Input()\n  id: string;\n\n  @Input()\n  label = '';\n\n  @Input()\n  widget: string | object;\n\n  @Output()\n  click = new EventEmitter<any>();\n\n  constructor(private elementRef: ElementRef) {\n    super();\n  }\n\n  private setLabelFromContent() {\n    const textContent = this.getTextContent(this.elementRef);\n\n    // label as @Input takes priority over content text\n    if (textContent && !this.label) {\n      this.label = textContent;\n    }\n\n  }\n\n  ngAfterContentInit() {\n    this.setLabelFromContent();\n  }\n\n}\n","import { Validator } from '../../model/validator';\n\nexport enum FieldType {\n  String = 'string',\n  Object = 'object',\n  Array = 'array',\n  Boolean = 'boolean',\n  Integer =  'integer',\n  Number = 'number',\n}\n\nexport interface Field {\n  name: string;\n  required: boolean;\n  getSchema(): any;\n  getButtons(): any;\n  getValidators(): { path: string, validator: Validator }[];\n}\n\n\n","import { ElementRef, QueryList } from '@angular/core';\n\nimport { Validator } from '../../model/validator';\nimport { ActionRegistry } from '../../model/actionregistry';\nimport { ButtonComponent } from '../button/button.component';\nimport { TemplateSchemaElement } from '../template-schema-element';\n\nimport { Field, FieldType } from './field';\n\nexport abstract class FieldParent extends TemplateSchemaElement {\n\n  name = '';\n  type: FieldType;\n\n  get path(): string {\n    if (!this.name) {\n      return '';\n    }\n\n    return '/' + this.name;\n  }\n\n  protected abstract actionRegistry: ActionRegistry;\n  protected abstract childButtons: QueryList<ButtonComponent>;\n\n\n  getButtons(): { id: string, label: string, widget?: string | object }[] {\n\n    return this.childButtons.map((button, index) => {\n\n      if (!button.id) {\n        const randomString = Math.random().toString(16).substr(2, 8);\n        // generate id for button\n        button.id = this.name + randomString + '_'  + (index + 1);\n      }\n\n      // register as button action the EventEmitter click\n      this.actionRegistry.register(\n        button.id,\n        button.click.emit.bind(button.click)\n      );\n\n      const _button = <any>{\n        id: button.id,\n        label: button.label,\n      };\n\n      if (button.widget) {\n        _button.widget = button.widget;\n      }\n\n      return _button;\n\n    });\n  }\n\n  protected getFieldsValidators(\n    fields: Field[]\n  ): { path: string, validator: Validator }[] {\n\n    return fields.reduce((validators, field) => {\n      return validators.concat(field.getValidators());\n    }, []);\n\n  }\n\n  protected getFieldsSchema(fields: Field[]) {\n    return fields.reduce((schema: any, field) => {\n\n      switch (this.type) {\n        case FieldType.Array:\n          schema.items = field.getSchema();\n          break;\n\n        default:\n          if (!schema.properties) {\n            schema.properties = {};\n          }\n\n          schema.properties[field.name] = field.getSchema();\n          break;\n      }\n\n      const buttons = field.getButtons();\n      if (buttons.length > 0) {\n        schema.buttons = buttons;\n      }\n\n      if (!field.required) {\n        return schema;\n      }\n\n      if (!schema.required) {\n        schema.required = [];\n      }\n      schema.required.push(field.name);\n      return schema;\n    }, {});\n  }\n\n}\n","import {\n Component,\n ElementRef,\n Input,\n OnInit,\n forwardRef\n} from '@angular/core';\n\nimport { TemplateSchemaElement } from '../../template-schema-element';\n\n\n@Component({\n  selector: 'sf-item',\n  templateUrl: './item.component.html'\n})\nexport class ItemComponent extends TemplateSchemaElement implements OnInit {\n\n  @Input()\n  value: any;\n\n  description: string;\n\n  constructor(private elementRef: ElementRef) {\n    super();\n  }\n\n  ngOnInit() {\n    this.description = this.getTextContent(this.elementRef);\n  }\n\n}\n","import {\n  Component,\n  Input,\n  Output,\n  OnInit,\n  AfterContentInit,\n  ContentChildren,\n  ViewChild,\n  QueryList,\n  ElementRef,\n  forwardRef,\n  SimpleChanges,\n  SimpleChange,\n  OnChanges\n} from '@angular/core';\nimport { Observable, merge } from 'rxjs';\nimport { filter } from 'rxjs/operators';\n\nimport { Action } from '../../model/action';\nimport { ActionRegistry } from '../../model/actionregistry';\nimport { Validator } from '../../model/validator';\n\nimport { TemplateSchemaElement } from '../template-schema-element';\nimport { TemplateSchemaService } from '../template-schema.service';\nimport { ButtonComponent } from '../button/button.component';\n\nimport { FieldParent } from './field-parent';\nimport { FieldType, Field } from './field';\nimport { ItemComponent } from './item/item.component';\n\n\n@Component({\n  selector: 'sf-field',\n  templateUrl: './field.component.html'\n})\nexport class FieldComponent extends FieldParent implements\nField, OnChanges, AfterContentInit {\n\n  @ContentChildren(FieldComponent)\n  childFields: QueryList<FieldComponent>;\n\n  @ContentChildren(ItemComponent)\n  childItems: QueryList<ItemComponent>;\n\n  @ContentChildren(ButtonComponent)\n  childButtons: QueryList<ButtonComponent>;\n\n  @Input()\n  name: string;\n\n  @Input()\n  type = FieldType.String;\n\n  @Input()\n  format: string;\n\n  @Input()\n  required: boolean;\n\n  @Input()\n  readOnly: boolean;\n\n  @Input()\n  title: string;\n\n  @Input()\n  description: string;\n\n  @Input()\n  placeholder: string;\n\n  @Input()\n  widget: string | object;\n\n  @Input()\n  validator: Validator;\n\n  @Input()\n  schema: any = { };\n\n  constructor(\n    private elementRef: ElementRef,\n    private templateSchemaService: TemplateSchemaService,\n    protected actionRegistry: ActionRegistry\n  ) {\n    super();\n  }\n\n  getSchema(): any {\n\n    const { properties, items, required } = this.getFieldsSchema(\n      this.childFields.filter(field => field !== this)\n    );\n\n    const oneOf = this.getOneOf();\n\n    const schema = <any>{\n      type: this.type\n    };\n\n    if (this.title !== undefined) {\n      schema.title = this.title;\n    }\n\n    if (properties !== undefined) {\n      schema.properties = properties;\n    }\n\n    if (items !== undefined) {\n      schema.items = items;\n    }\n\n    // requried child fields\n    if (required !== undefined) {\n      schema.required = required;\n    }\n\n    if (oneOf !== undefined) {\n      schema.oneOf = oneOf;\n    }\n\n    if (this.description !== undefined) {\n      schema.description = this.description;\n    }\n\n    if (this.placeholder !== undefined) {\n      schema.placeholder = this.placeholder;\n    }\n\n    if (this.format !== undefined) {\n      schema.format = this.format;\n    }\n\n    if (this.widget !== undefined) {\n      schema.widget = this.widget;\n    }\n\n    if (this.readOnly !== undefined) {\n      schema.readOnly = this.readOnly;\n    }\n\n    const buttons = this.getButtons();\n    if (buttons.length > 0) {\n      schema.buttons = buttons;\n    }\n\n    // @Input schema takes precedence\n    return Object.assign(schema, this.schema);\n\n  }\n\n  getValidators(): { path: string, validator: Validator }[] {\n\n    // registering validator here is not possible since prop full path is needed\n    const childValidators = this.getFieldsValidators(\n      this.childFields.filter(field => field !== this)\n    );\n    const validators = childValidators.map(({ path, validator }) => {\n      return {\n        path: this.path + path,\n        validator\n      };\n    });\n\n    if (!this.validator) {\n      return validators;\n    }\n\n    validators.push({ path: this.path, validator: this.validator });\n    return validators;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n\n    const keys = Object.keys(changes);\n    if (keys.length > 0) {\n      for (const key of keys) {\n        if (!changes[key].isFirstChange()) {\n          // on any input change, force schema change generation\n          this.templateSchemaService.changed();\n          break;\n        }\n      }\n    }\n\n  }\n\n\n  private getOneOf() {\n\n    if (this.childItems.length === 0) {\n      return;\n    }\n\n    const items = this.childItems.map(({ value, description }) => {\n      if (!Array.isArray(value)) {\n        return { enum: [value], description };\n      }\n\n      return { enum: value, description };\n    });\n\n    if (items.length === 0) {\n      return;\n    }\n\n    return items;\n  }\n\n\n  private setTitleFromContent() {\n    const textContent = this.getTextContent(this.elementRef);\n\n    //  title as @Input takes priority over content text\n    if (textContent && !this.title) {\n      this.title = textContent;\n    }\n  }\n\n  ngAfterContentInit() {\n\n    // cache it\n    this.setTitleFromContent();\n\n    merge(\n      this.childFields.changes,\n      this.childItems.changes,\n      this.childButtons.changes\n    )\n    .subscribe(() => this.templateSchemaService.changed());\n  }\n\n}\n","import {\n  Directive,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  HostBinding,\n  SimpleChange,\n  SimpleChanges\n} from '@angular/core';\nimport { merge } from 'rxjs';\n\nimport { FormComponent } from '../form.component';\nimport { ActionRegistry } from '../model/actionregistry';\nimport { ValidatorRegistry } from '../model/validatorregistry';\nimport { TerminatorService } from '../terminator.service';\n\nimport { TemplateSchemaService } from './template-schema.service';\nimport { FieldComponent } from './field/field.component';\nimport { FieldType, Field } from './field/field';\nimport { ButtonComponent } from './button/button.component';\nimport { FieldParent } from './field/field-parent';\n\n\n@Directive({\n  selector: 'sf-form[templateSchema]',\n  providers: [\n    TemplateSchemaService\n  ]\n})\nexport class TemplateSchemaDirective extends FieldParent implements AfterContentInit {\n\n  @ContentChildren(FieldComponent)\n  childFields: QueryList<FieldComponent>;\n\n  @ContentChildren(ButtonComponent)\n  childButtons: QueryList<ButtonComponent>;\n\n  constructor(\n    protected actionRegistry: ActionRegistry,\n    protected validatorRegistry: ValidatorRegistry,\n    private formComponent: FormComponent,\n    private terminatorService: TerminatorService,\n    private templateSchemaService: TemplateSchemaService\n  ) {\n    super();\n  }\n\n  setFormDocumentSchema(fields: FieldComponent[]) {\n      this.actionRegistry.clear();\n      this.validatorRegistry.clear();\n\n      const schema = this.getFieldsSchema(fields);\n\n      const validators = this.getFieldsValidators(fields);\n      validators.forEach(({ path, validator }) => {\n        this.validatorRegistry.register(path, validator);\n      });\n\n      const previousSchema = this.formComponent.schema;\n      this.formComponent.schema = {\n        type: FieldType.Object,\n        properties: schema.properties\n      };\n\n      if (schema.required && schema.required.length > 0) {\n        this.formComponent.schema.requred = schema.required;\n      }\n\n      const buttons = this.getButtons();\n      if (buttons.length > 0) {\n        this.formComponent.schema.buttons = buttons;\n      }\n\n      this.formComponent.ngOnChanges({\n        schema: new SimpleChange(\n          previousSchema,\n          this.formComponent.schema,\n          Boolean(previousSchema)\n        )\n      });\n\n  }\n\n\n  ngAfterContentInit() {\n\n    if (this.childFields.length > 0) {\n      this.setFormDocumentSchema(this.childFields.toArray());\n    }\n\n    merge(\n      this.childFields.changes,\n      this.templateSchemaService.changes\n    )\n   .subscribe(() => {\n      this.terminatorService.destroy();\n      this.setFormDocumentSchema(this.childFields.toArray());\n    });\n\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FieldComponent } from './field/field.component';\nimport { TemplateSchemaDirective } from './template-schema.directive';\nimport { ButtonComponent } from './button/button.component';\nimport { ItemComponent } from './field/item/item.component';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [\n    TemplateSchemaDirective,\n    FieldComponent,\n    ButtonComponent,\n    ItemComponent\n  ],\n  exports: [\n    TemplateSchemaDirective,\n    FieldComponent,\n    ButtonComponent,\n    ItemComponent\n  ]\n})\nexport class TemplateSchemaModule { }\n"]}