/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * @abstract
 */
var /**
 * @abstract
 */
ExpressionCompilerFactory = /** @class */ (function () {
    function ExpressionCompilerFactory() {
    }
    return ExpressionCompilerFactory;
}());
/**
 * @abstract
 */
export { ExpressionCompilerFactory };
if (false) {
    /**
     * @abstract
     * @return {?}
     */
    ExpressionCompilerFactory.prototype.createExpressionCompiler = function () { };
    /**
     * @abstract
     * @return {?}
     */
    ExpressionCompilerFactory.prototype.createExpressionCompilerVisibilityIf = function () { };
}
/**
 * @record
 */
export function ExpressionCompiler() { }
if (false) {
    /**
     * @param {?} expression
     * @param {?} context
     * @return {?}
     */
    ExpressionCompiler.prototype.evaluate = function (expression, context) { };
}
/**
 * @record
 */
export function ExpressionCompilerVisibilityIf() { }
if (false) {
    /**
     * @param {?} expression
     * @param {?} context
     * @return {?}
     */
    ExpressionCompilerVisibilityIf.prototype.evaluate = function (expression, context) { };
}
/**
 * UseCase:<br/>
 * When evaluating the expression of a <code>visibilityIf</code> condition
 * an instance of this definition will be passed as context.<br/>
 * This will give access to the source and target <code>FormProperty</code>.
 * @record
 */
export function ExpressionContextVisibilitIf() { }
if (false) {
    /**
     * The source property which has the <code>visibilityIf</code> defined
     * @type {?}
     */
    ExpressionContextVisibilitIf.prototype.source;
    /**
     * The target property given with the <code>visibilityIf</code>
     * <em>path</em> property
     * @type {?}
     */
    ExpressionContextVisibilitIf.prototype.target;
}
import * as JEXL from 'jexl';
var JEXLExpressionCompilerFactory = /** @class */ (function (_super) {
    tslib_1.__extends(JEXLExpressionCompilerFactory, _super);
    function JEXLExpressionCompilerFactory() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    JEXLExpressionCompilerFactory.prototype.createExpressionCompiler = /**
     * @return {?}
     */
    function () {
        return new JEXLExpressionCompiler();
    };
    /**
     * @return {?}
     */
    JEXLExpressionCompilerFactory.prototype.createExpressionCompilerVisibilityIf = /**
     * @return {?}
     */
    function () {
        return new JEXLExpressionCompilerVisibiltyIf();
    };
    return JEXLExpressionCompilerFactory;
}(ExpressionCompilerFactory));
export { JEXLExpressionCompilerFactory };
var JEXLExpressionCompiler = /** @class */ (function () {
    function JEXLExpressionCompiler() {
    }
    /**
     * @param {?} expression
     * @param {?=} context
     * @return {?}
     */
    JEXLExpressionCompiler.prototype.evaluate = /**
     * @param {?} expression
     * @param {?=} context
     * @return {?}
     */
    function (expression, context) {
        if (context === void 0) { context = {}; }
        return new JEXL.Jexl().evalSync(expression, context);
    };
    return JEXLExpressionCompiler;
}());
export { JEXLExpressionCompiler };
var JEXLExpressionCompilerVisibiltyIf = /** @class */ (function () {
    function JEXLExpressionCompilerVisibiltyIf() {
    }
    /**
     * @param {?} expression
     * @param {?=} context
     * @return {?}
     */
    JEXLExpressionCompilerVisibiltyIf.prototype.evaluate = /**
     * @param {?} expression
     * @param {?=} context
     * @return {?}
     */
    function (expression, context) {
        if (context === void 0) { context = { source: (/** @type {?} */ ({})), target: (/** @type {?} */ ({})) }; }
        return new JEXL.Jexl().evalSync(expression, context);
    };
    return JEXLExpressionCompilerVisibiltyIf;
}());
export { JEXLExpressionCompilerVisibiltyIf };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbi1jb21waWxlci1mYWN0b3J5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXNjaGVtYS1mb3JtLyIsInNvdXJjZXMiOlsibGliL2V4cHJlc3Npb24tY29tcGlsZXItZmFjdG9yeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7O0lBQUE7SUFHQSxDQUFDO0lBQUQsZ0NBQUM7QUFBRCxDQUFDLEFBSEQsSUFHQzs7Ozs7Ozs7OztJQUZHLCtFQUErRDs7Ozs7SUFDL0QsMkZBQXVGOzs7OztBQUczRix3Q0FFQzs7Ozs7OztJQURHLDJFQUFtRDs7Ozs7QUFHdkQsb0RBRUM7Ozs7Ozs7SUFERyx1RkFBeUU7Ozs7Ozs7OztBQVE3RSxrREFVQzs7Ozs7O0lBTkcsOENBQW9COzs7Ozs7SUFLcEIsOENBQW9COztBQUl4QixPQUFPLEtBQUssSUFBSSxNQUFNLE1BQU0sQ0FBQztBQUc3QjtJQUFtRCx5REFBeUI7SUFBNUU7O0lBUUEsQ0FBQzs7OztJQVBVLGdFQUF3Qjs7O0lBQS9CO1FBQ0ksT0FBTyxJQUFJLHNCQUFzQixFQUFFLENBQUM7SUFDeEMsQ0FBQzs7OztJQUVNLDRFQUFvQzs7O0lBQTNDO1FBQ0ksT0FBTyxJQUFJLGlDQUFpQyxFQUFFLENBQUM7SUFDbkQsQ0FBQztJQUNMLG9DQUFDO0FBQUQsQ0FBQyxBQVJELENBQW1ELHlCQUF5QixHQVEzRTs7QUFFRDtJQUFBO0lBSUEsQ0FBQzs7Ozs7O0lBSEcseUNBQVE7Ozs7O0lBQVIsVUFBUyxVQUFrQixFQUFFLE9BQW9CO1FBQXBCLHdCQUFBLEVBQUEsWUFBb0I7UUFDN0MsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ3hELENBQUM7SUFDTCw2QkFBQztBQUFELENBQUMsQUFKRCxJQUlDOztBQUVEO0lBQUE7SUFJQSxDQUFDOzs7Ozs7SUFIRyxvREFBUTs7Ozs7SUFBUixVQUFTLFVBQWtCLEVBQUUsT0FBa0c7UUFBbEcsd0JBQUEsRUFBQSxZQUEwQyxNQUFNLEVBQUUsbUJBQUEsRUFBRSxFQUFnQixFQUFFLE1BQU0sRUFBRSxtQkFBQSxFQUFFLEVBQWdCLEVBQUU7UUFDM0gsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFBO0lBQ3hELENBQUM7SUFDTCx3Q0FBQztBQUFELENBQUMsQUFKRCxJQUlDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGFic3RyYWN0IGNsYXNzIEV4cHJlc3Npb25Db21waWxlckZhY3Rvcnkge1xuICAgIHB1YmxpYyBhYnN0cmFjdCBjcmVhdGVFeHByZXNzaW9uQ29tcGlsZXIoKTogRXhwcmVzc2lvbkNvbXBpbGVyO1xuICAgIHB1YmxpYyBhYnN0cmFjdCBjcmVhdGVFeHByZXNzaW9uQ29tcGlsZXJWaXNpYmlsaXR5SWYoKTogRXhwcmVzc2lvbkNvbXBpbGVyVmlzaWJpbGl0eUlmO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEV4cHJlc3Npb25Db21waWxlciB7XG4gICAgZXZhbHVhdGUoZXhwcmVzc2lvbjogc3RyaW5nLCBjb250ZXh0OiBvYmplY3QpOiBhbnk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXhwcmVzc2lvbkNvbXBpbGVyVmlzaWJpbGl0eUlmIHtcbiAgICBldmFsdWF0ZShleHByZXNzaW9uOiBzdHJpbmcsIGNvbnRleHQ6IEV4cHJlc3Npb25Db250ZXh0VmlzaWJpbGl0SWYpOiBhbnk7XG59XG4vKipcbiAqIFVzZUNhc2U6PGJyLz5cbiAqIFdoZW4gZXZhbHVhdGluZyB0aGUgZXhwcmVzc2lvbiBvZiBhIDxjb2RlPnZpc2liaWxpdHlJZjwvY29kZT4gY29uZGl0aW9uXG4gKiBhbiBpbnN0YW5jZSBvZiB0aGlzIGRlZmluaXRpb24gd2lsbCBiZSBwYXNzZWQgYXMgY29udGV4dC48YnIvPlxuICogVGhpcyB3aWxsIGdpdmUgYWNjZXNzIHRvIHRoZSBzb3VyY2UgYW5kIHRhcmdldCA8Y29kZT5Gb3JtUHJvcGVydHk8L2NvZGU+LlxuICovXG5leHBvcnQgaW50ZXJmYWNlIEV4cHJlc3Npb25Db250ZXh0VmlzaWJpbGl0SWYge1xuICAgIC8qKlxuICAgICAqIFRoZSBzb3VyY2UgcHJvcGVydHkgd2hpY2ggaGFzIHRoZSA8Y29kZT52aXNpYmlsaXR5SWY8L2NvZGU+IGRlZmluZWRcbiAgICAgKi9cbiAgICBzb3VyY2U6IEZvcm1Qcm9wZXJ0eVxuICAgIC8qKlxuICAgICAqIFRoZSB0YXJnZXQgcHJvcGVydHkgZ2l2ZW4gd2l0aCB0aGUgPGNvZGU+dmlzaWJpbGl0eUlmPC9jb2RlPlxuICAgICAqIDxlbT5wYXRoPC9lbT4gcHJvcGVydHlcbiAgICAgKi9cbiAgICB0YXJnZXQ6IEZvcm1Qcm9wZXJ0eVxufVxuXG5cbmltcG9ydCAqIGFzIEpFWEwgZnJvbSAnamV4bCc7XG5pbXBvcnQgeyBGb3JtUHJvcGVydHkgfSBmcm9tICcuL21vZGVsJztcblxuZXhwb3J0IGNsYXNzIEpFWExFeHByZXNzaW9uQ29tcGlsZXJGYWN0b3J5IGV4dGVuZHMgRXhwcmVzc2lvbkNvbXBpbGVyRmFjdG9yeSB7XG4gICAgcHVibGljIGNyZWF0ZUV4cHJlc3Npb25Db21waWxlcigpOiBFeHByZXNzaW9uQ29tcGlsZXIge1xuICAgICAgICByZXR1cm4gbmV3IEpFWExFeHByZXNzaW9uQ29tcGlsZXIoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlRXhwcmVzc2lvbkNvbXBpbGVyVmlzaWJpbGl0eUlmKCk6IEV4cHJlc3Npb25Db21waWxlclZpc2liaWxpdHlJZiB7XG4gICAgICAgIHJldHVybiBuZXcgSkVYTEV4cHJlc3Npb25Db21waWxlclZpc2liaWx0eUlmKCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgSkVYTEV4cHJlc3Npb25Db21waWxlciBpbXBsZW1lbnRzIEV4cHJlc3Npb25Db21waWxlciB7XG4gICAgZXZhbHVhdGUoZXhwcmVzc2lvbjogc3RyaW5nLCBjb250ZXh0OiBvYmplY3QgPSB7fSk6IGFueSB7XG4gICAgICAgIHJldHVybiBuZXcgSkVYTC5KZXhsKCkuZXZhbFN5bmMoZXhwcmVzc2lvbiwgY29udGV4dClcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBKRVhMRXhwcmVzc2lvbkNvbXBpbGVyVmlzaWJpbHR5SWYgaW1wbGVtZW50cyBFeHByZXNzaW9uQ29tcGlsZXJWaXNpYmlsaXR5SWYge1xuICAgIGV2YWx1YXRlKGV4cHJlc3Npb246IHN0cmluZywgY29udGV4dDogRXhwcmVzc2lvbkNvbnRleHRWaXNpYmlsaXRJZiA9IHsgc291cmNlOiB7fSBhcyBGb3JtUHJvcGVydHksIHRhcmdldDoge30gYXMgRm9ybVByb3BlcnR5IH0pOiBhbnkge1xuICAgICAgICByZXR1cm4gbmV3IEpFWEwuSmV4bCgpLmV2YWxTeW5jKGV4cHJlc3Npb24sIGNvbnRleHQpXG4gICAgfVxufVxuIl19