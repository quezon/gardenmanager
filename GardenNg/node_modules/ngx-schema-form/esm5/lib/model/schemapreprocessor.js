/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { isBlank } from './utils';
/**
 * @param {?} message
 * @param {?} path
 * @return {?}
 */
function formatMessage(message, path) {
    return "Parsing error on " + path + ": " + message;
}
/**
 * @param {?} message
 * @param {?} path
 * @return {?}
 */
function schemaError(message, path) {
    /** @type {?} */
    var mesg = formatMessage(message, path);
    throw new Error(mesg);
}
/**
 * @param {?} message
 * @param {?} path
 * @return {?}
 */
function schemaWarning(message, path) {
    /** @type {?} */
    var mesg = formatMessage(message, path);
    throw new Error(mesg);
}
var SchemaPreprocessor = /** @class */ (function () {
    function SchemaPreprocessor() {
    }
    /**
     * @param {?} jsonSchema
     * @param {?=} path
     * @return {?}
     */
    SchemaPreprocessor.preprocess = /**
     * @param {?} jsonSchema
     * @param {?=} path
     * @return {?}
     */
    function (jsonSchema, path) {
        if (path === void 0) { path = '/'; }
        jsonSchema = jsonSchema || {};
        SchemaPreprocessor.normalizeExtensions(jsonSchema);
        if (jsonSchema.type === 'object') {
            SchemaPreprocessor.checkProperties(jsonSchema, path);
            SchemaPreprocessor.checkAndCreateFieldsets(jsonSchema, path);
        }
        else if (jsonSchema.type === 'array') {
            SchemaPreprocessor.checkItems(jsonSchema, path);
        }
        SchemaPreprocessor.normalizeWidget(jsonSchema);
        SchemaPreprocessor.recursiveCheck(jsonSchema, path);
    };
    /**
     * @private
     * @param {?} jsonSchema
     * @param {?} path
     * @return {?}
     */
    SchemaPreprocessor.checkProperties = /**
     * @private
     * @param {?} jsonSchema
     * @param {?} path
     * @return {?}
     */
    function (jsonSchema, path) {
        if (isBlank(jsonSchema.properties)) {
            jsonSchema.properties = {};
            schemaWarning('Provided json schema does not contain a \'properties\' entry. Output schema will be empty', path);
        }
    };
    /**
     * @private
     * @param {?} jsonSchema
     * @param {?} path
     * @return {?}
     */
    SchemaPreprocessor.checkAndCreateFieldsets = /**
     * @private
     * @param {?} jsonSchema
     * @param {?} path
     * @return {?}
     */
    function (jsonSchema, path) {
        if (jsonSchema.fieldsets === undefined) {
            if (jsonSchema.order !== undefined) {
                SchemaPreprocessor.replaceOrderByFieldsets(jsonSchema);
            }
            else {
                SchemaPreprocessor.createFieldsets(jsonSchema);
            }
        }
        SchemaPreprocessor.checkFieldsUsage(jsonSchema, path);
    };
    /**
     * @private
     * @param {?} jsonSchema
     * @param {?} path
     * @return {?}
     */
    SchemaPreprocessor.checkFieldsUsage = /**
     * @private
     * @param {?} jsonSchema
     * @param {?} path
     * @return {?}
     */
    function (jsonSchema, path) {
        var e_1, _a, e_2, _b, e_3, _c;
        /** @type {?} */
        var fieldsId = Object.keys(jsonSchema.properties);
        /** @type {?} */
        var usedFields = {};
        try {
            for (var _d = tslib_1.__values(jsonSchema.fieldsets), _e = _d.next(); !_e.done; _e = _d.next()) {
                var fieldset = _e.value;
                try {
                    for (var _f = tslib_1.__values(fieldset.fields), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var fieldId = _g.value;
                        if (usedFields[fieldId] === undefined) {
                            usedFields[fieldId] = [];
                        }
                        usedFields[fieldId].push(fieldset.id);
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var fieldsId_1 = tslib_1.__values(fieldsId), fieldsId_1_1 = fieldsId_1.next(); !fieldsId_1_1.done; fieldsId_1_1 = fieldsId_1.next()) {
                var fieldId = fieldsId_1_1.value;
                /** @type {?} */
                var isRequired = jsonSchema.required && jsonSchema.required.indexOf(fieldId) > -1;
                if (isRequired && jsonSchema.properties[fieldId]) {
                    jsonSchema.properties[fieldId].isRequired = true;
                }
                if (usedFields.hasOwnProperty(fieldId)) {
                    if (usedFields[fieldId].length > 1) {
                        schemaError(fieldId + " is referenced by more than one fieldset: " + usedFields[fieldId], path);
                    }
                    delete usedFields[fieldId];
                }
                else if (isRequired) {
                    schemaError(fieldId + " is a required field but it is not referenced as part of a 'order' or a 'fieldset' property", path);
                }
                else {
                    delete jsonSchema[fieldId];
                    schemaWarning("Removing unreferenced field " + fieldId, path);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (fieldsId_1_1 && !fieldsId_1_1.done && (_c = fieldsId_1.return)) _c.call(fieldsId_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        for (var remainingfieldsId in usedFields) {
            if (usedFields.hasOwnProperty(remainingfieldsId)) {
                schemaWarning("Referencing non-existent field " + remainingfieldsId + " in one or more fieldsets", path);
            }
        }
    };
    /**
     * @private
     * @param {?} jsonSchema
     * @return {?}
     */
    SchemaPreprocessor.createFieldsets = /**
     * @private
     * @param {?} jsonSchema
     * @return {?}
     */
    function (jsonSchema) {
        jsonSchema.order = Object.keys(jsonSchema.properties);
        SchemaPreprocessor.replaceOrderByFieldsets(jsonSchema);
    };
    /**
     * @private
     * @param {?} jsonSchema
     * @return {?}
     */
    SchemaPreprocessor.replaceOrderByFieldsets = /**
     * @private
     * @param {?} jsonSchema
     * @return {?}
     */
    function (jsonSchema) {
        jsonSchema.fieldsets = [{
                id: 'fieldset-default',
                title: jsonSchema.title || '',
                description: jsonSchema.description || '',
                name: jsonSchema.name || '',
                fields: jsonSchema.order
            }];
        delete jsonSchema.order;
    };
    /**
     * @private
     * @param {?} fieldSchema
     * @return {?}
     */
    SchemaPreprocessor.normalizeWidget = /**
     * @private
     * @param {?} fieldSchema
     * @return {?}
     */
    function (fieldSchema) {
        /** @type {?} */
        var widget = fieldSchema.widget;
        if (widget === undefined) {
            widget = { 'id': fieldSchema.type };
        }
        else if (typeof widget === 'string') {
            widget = { 'id': widget };
        }
        fieldSchema.widget = widget;
    };
    /**
     * @private
     * @param {?} jsonSchema
     * @param {?} path
     * @return {?}
     */
    SchemaPreprocessor.checkItems = /**
     * @private
     * @param {?} jsonSchema
     * @param {?} path
     * @return {?}
     */
    function (jsonSchema, path) {
        if (jsonSchema.items === undefined) {
            schemaError('No \'items\' property in array', path);
        }
    };
    /**
     * @private
     * @param {?} jsonSchema
     * @param {?} path
     * @return {?}
     */
    SchemaPreprocessor.recursiveCheck = /**
     * @private
     * @param {?} jsonSchema
     * @param {?} path
     * @return {?}
     */
    function (jsonSchema, path) {
        if (jsonSchema.type === 'object') {
            for (var fieldId in jsonSchema.properties) {
                if (jsonSchema.properties.hasOwnProperty(fieldId)) {
                    /** @type {?} */
                    var fieldSchema = jsonSchema.properties[fieldId];
                    SchemaPreprocessor.preprocess(fieldSchema, path + fieldId + '/');
                }
            }
            if (jsonSchema.hasOwnProperty('definitions')) {
                for (var fieldId in jsonSchema.definitions) {
                    if (jsonSchema.definitions.hasOwnProperty(fieldId)) {
                        /** @type {?} */
                        var fieldSchema = jsonSchema.definitions[fieldId];
                        SchemaPreprocessor.removeRecursiveRefProperties(fieldSchema, "#/definitions/" + fieldId);
                        SchemaPreprocessor.preprocess(fieldSchema, path + fieldId + '/');
                    }
                }
            }
        }
        else if (jsonSchema.type === 'array') {
            SchemaPreprocessor.preprocess(jsonSchema.items, path + '*/');
        }
    };
    /**
     * @private
     * @param {?} jsonSchema
     * @param {?} definitionPath
     * @return {?}
     */
    SchemaPreprocessor.removeRecursiveRefProperties = /**
     * @private
     * @param {?} jsonSchema
     * @param {?} definitionPath
     * @return {?}
     */
    function (jsonSchema, definitionPath) {
        // to avoid infinite loop
        if (jsonSchema.type === 'object') {
            for (var fieldId in jsonSchema.properties) {
                if (jsonSchema.properties.hasOwnProperty(fieldId)) {
                    if (jsonSchema.properties[fieldId].$ref
                        && jsonSchema.properties[fieldId].$ref === definitionPath) {
                        delete jsonSchema.properties[fieldId];
                    }
                    else if (jsonSchema.properties[fieldId].type === 'object') {
                        SchemaPreprocessor.removeRecursiveRefProperties(jsonSchema.properties[fieldId], definitionPath);
                    }
                }
            }
        }
    };
    /**
     * Enables alias names for JSON schema extensions.
     *
     * Copies the value of each alias JSON schema property
     * to the JSON schema property of ngx-schema-form.
     *
     * @param schema JSON schema to enable alias names.
     */
    /**
     * Enables alias names for JSON schema extensions.
     *
     * Copies the value of each alias JSON schema property
     * to the JSON schema property of ngx-schema-form.
     *
     * @private
     * @param {?} schema JSON schema to enable alias names.
     * @return {?}
     */
    SchemaPreprocessor.normalizeExtensions = /**
     * Enables alias names for JSON schema extensions.
     *
     * Copies the value of each alias JSON schema property
     * to the JSON schema property of ngx-schema-form.
     *
     * @private
     * @param {?} schema JSON schema to enable alias names.
     * @return {?}
     */
    function (schema) {
        /** @type {?} */
        var extensions = [
            { name: "fieldsets", regex: /^x-?field-?sets$/i },
            { name: "widget", regex: /^x-?widget$/i },
            { name: "visibleIf", regex: /^x-?visible-?if$/i }
        ];
        /** @type {?} */
        var keys = Object.keys(schema);
        var _loop_1 = function (i) {
            /** @type {?} */
            var k = keys[i];
            /** @type {?} */
            var e = extensions.find((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return !!k.match(e.regex); }));
            if (e) {
                /** @type {?} */
                var v = schema[k];
                /** @type {?} */
                var copy = JSON.parse(JSON.stringify(v));
                schema[e.name] = copy;
            }
        };
        for (var i = 0; i < keys.length; ++i) {
            _loop_1(i);
        }
    };
    return SchemaPreprocessor;
}());
export { SchemaPreprocessor };
//# sourceMappingURL=data:application/json;base64,