/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, Input, Renderer2 } from '@angular/core';
import { FormControl } from '@angular/forms';
import { ActionRegistry } from './model/actionregistry';
import { FormProperty } from './model/formproperty';
import { BindingRegistry } from './model/bindingregistry';
var FormElementComponent = /** @class */ (function () {
    function FormElementComponent(actionRegistry, bindingRegistry, renderer, elementRef) {
        this.actionRegistry = actionRegistry;
        this.bindingRegistry = bindingRegistry;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.control = new FormControl('', (/**
         * @return {?}
         */
        function () { return null; }));
        this.widget = null;
        this.buttons = [];
        this.unlisten = [];
    }
    /**
     * @return {?}
     */
    FormElementComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.parseButtons();
        this.setupBindings();
    };
    /**
     * @private
     * @return {?}
     */
    FormElementComponent.prototype.setupBindings = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var bindings = this.bindingRegistry.get(this.formProperty.path);
        if ((bindings || []).length) {
            bindings.forEach((/**
             * @param {?} binding
             * @return {?}
             */
            function (binding) {
                for (var eventId in binding) {
                    _this.createBinding(eventId, binding[eventId]);
                }
            }));
        }
    };
    /**
     * @private
     * @param {?} eventId
     * @param {?} listener
     * @return {?}
     */
    FormElementComponent.prototype.createBinding = /**
     * @private
     * @param {?} eventId
     * @param {?} listener
     * @return {?}
     */
    function (eventId, listener) {
        var _this = this;
        this.unlisten.push(this.renderer.listen(this.elementRef.nativeElement, eventId, (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (listener instanceof Function) {
                listener(event, _this.formProperty);
            }
            else {
                console.warn('Calling non function handler for eventId ' + eventId + ' for path ' + _this.formProperty.path);
            }
        })));
    };
    /**
     * @private
     * @return {?}
     */
    FormElementComponent.prototype.parseButtons = /**
     * @private
     * @return {?}
     */
    function () {
        var e_1, _a;
        if (this.formProperty.schema.buttons !== undefined) {
            this.buttons = this.formProperty.schema.buttons;
            try {
                for (var _b = tslib_1.__values(this.buttons), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var button = _c.value;
                    this.createButtonCallback(button);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    /**
     * @private
     * @param {?} button
     * @return {?}
     */
    FormElementComponent.prototype.createButtonCallback = /**
     * @private
     * @param {?} button
     * @return {?}
     */
    function (button) {
        var _this = this;
        button.action = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            /** @type {?} */
            var action;
            if (button.id && (action = _this.actionRegistry.get(button.id))) {
                if (action) {
                    action(_this.formProperty, button.parameters);
                }
            }
            e.preventDefault();
        });
    };
    /**
     * @param {?} widget
     * @return {?}
     */
    FormElementComponent.prototype.onWidgetInstanciated = /**
     * @param {?} widget
     * @return {?}
     */
    function (widget) {
        this.widget = widget;
        /** @type {?} */
        var id = this.formProperty.canonicalPathNotation || 'field' + (FormElementComponent.counter++);
        if (this.formProperty.root.rootName) {
            id = this.formProperty.root.rootName + ":" + id;
        }
        this.widget.formProperty = this.formProperty;
        this.widget.schema = this.formProperty.schema;
        this.widget.name = id;
        this.widget.id = id;
        this.widget.control = this.control;
    };
    /**
     * @return {?}
     */
    FormElementComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.unlisten) {
            this.unlisten.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                item();
            }));
        }
    };
    FormElementComponent.counter = 0;
    FormElementComponent.decorators = [
        { type: Component, args: [{
                    selector: 'sf-form-element',
                    template: "\n    <div *ngIf=\"formProperty.visible\"\n         [class.has-error]=\"!control.valid\"\n         [class.has-success]=\"control.valid\">\n      <sf-widget-chooser\n        (widgetInstanciated)=\"onWidgetInstanciated($event)\"\n        [widgetInfo]=\"formProperty.schema.widget\">\n      </sf-widget-chooser>\n      <sf-form-element-action *ngFor=\"let button of buttons\" [button]=\"button\" [formProperty]=\"formProperty\"></sf-form-element-action>\n    </div>"
                }] }
    ];
    /** @nocollapse */
    FormElementComponent.ctorParameters = function () { return [
        { type: ActionRegistry },
        { type: BindingRegistry },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    FormElementComponent.propDecorators = {
        formProperty: [{ type: Input }]
    };
    return FormElementComponent;
}());
export { FormElementComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FormElementComponent.counter;
    /** @type {?} */
    FormElementComponent.prototype.formProperty;
    /** @type {?} */
    FormElementComponent.prototype.control;
    /** @type {?} */
    FormElementComponent.prototype.widget;
    /** @type {?} */
    FormElementComponent.prototype.buttons;
    /** @type {?} */
    FormElementComponent.prototype.unlisten;
    /**
     * @type {?}
     * @private
     */
    FormElementComponent.prototype.actionRegistry;
    /**
     * @type {?}
     * @private
     */
    FormElementComponent.prototype.bindingRegistry;
    /**
     * @type {?}
     * @private
     */
    FormElementComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FormElementComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,