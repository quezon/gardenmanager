/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * General purpose propery binding registry
 */
var /**
 * General purpose propery binding registry
 */
PropertyBindingRegistry = /** @class */ (function () {
    function PropertyBindingRegistry() {
        this.bindings = {};
    }
    /**
     * @param {?} type
     * @return {?}
     */
    PropertyBindingRegistry.prototype.getPropertyBindings = /**
     * @param {?} type
     * @return {?}
     */
    function (type) {
        this.bindings[type] = this.bindings[type] || new PropertyBindings();
        return this.bindings[type];
    };
    /**
     * @return {?}
     */
    PropertyBindingRegistry.prototype.getPropertyBindingsVisibility = /**
     * @return {?}
     */
    function () {
        return this.getPropertyBindings(PropertyBindingTypes.visibility);
    };
    return PropertyBindingRegistry;
}());
/**
 * General purpose propery binding registry
 */
export { PropertyBindingRegistry };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PropertyBindingRegistry.prototype.bindings;
}
/** @enum {number} */
var PropertyBindingTypes = {
    visibility: 0,
};
export { PropertyBindingTypes };
PropertyBindingTypes[PropertyBindingTypes.visibility] = 'visibility';
/**
 * Storage that holds all bindings that are property paths related.<br/>
 */
var /**
 * Storage that holds all bindings that are property paths related.<br/>
 */
PropertyBindings = /** @class */ (function () {
    function PropertyBindings() {
        this.sourcesIndex = new SimplePropertyIndexer();
        this.dependenciesIndex = new SimplePropertyIndexer();
    }
    /**
     * @param {?} dependencyPath
     * @param {?} sourcePropertyPath
     * @return {?}
     */
    PropertyBindings.prototype.add = /**
     * @param {?} dependencyPath
     * @param {?} sourcePropertyPath
     * @return {?}
     */
    function (dependencyPath, sourcePropertyPath) {
        this.sourcesIndex.store(sourcePropertyPath, dependencyPath);
        this.dependenciesIndex.store(dependencyPath, sourcePropertyPath);
    };
    /**
     * @param {?} dependencyPath
     * @return {?}
     */
    PropertyBindings.prototype.findByDependencyPath = /**
     * @param {?} dependencyPath
     * @return {?}
     */
    function (dependencyPath) {
        var e_1, _a;
        /** @type {?} */
        var result = this.dependenciesIndex.find(dependencyPath);
        result.results = result.results || [];
        /** @type {?} */
        var values = [];
        try {
            for (var _b = tslib_1.__values(result.results), _c = _b.next(); !_c.done; _c = _b.next()) {
                var res = _c.value;
                values = values.concat(Object.keys(res.value));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return result.found ? values : [];
    };
    /**
     * @param {?} sourcePropertyPath
     * @return {?}
     */
    PropertyBindings.prototype.getBySourcePropertyPath = /**
     * @param {?} sourcePropertyPath
     * @return {?}
     */
    function (sourcePropertyPath) {
        var e_2, _a;
        /** @type {?} */
        var result = this.sourcesIndex.find(sourcePropertyPath);
        result.results = result.results || [];
        /** @type {?} */
        var values = [];
        try {
            for (var _b = tslib_1.__values(result.results), _c = _b.next(); !_c.done; _c = _b.next()) {
                var res = _c.value;
                values = values.concat(Object.keys(res.value));
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return result.found ? values : [];
    };
    /**
     * @param {?} path
     * @return {?}
     */
    PropertyBindings.prototype.createPathIndex = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        return path.split('/');
    };
    return PropertyBindings;
}());
/**
 * Storage that holds all bindings that are property paths related.<br/>
 */
export { PropertyBindings };
if (false) {
    /** @type {?} */
    PropertyBindings.prototype.sourcesIndex;
    /** @type {?} */
    PropertyBindings.prototype.dependenciesIndex;
}
/**
 * Simple indexer to store property paths
 */
var SimplePropertyIndexer = /** @class */ (function () {
    function SimplePropertyIndexer() {
        this.index = {};
        this.findOnlyWithValue = true;
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    SimplePropertyIndexer.prototype._createPathIndex = /**
     * @private
     * @param {?} path
     * @return {?}
     */
    function (path) {
        return path
            .replace(new RegExp('//', 'g'), '/')
            .replace(new RegExp('^/', 'g'), '')
            .split('/').filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item; }));
    };
    /**
     * @param {?} propertyPath
     * @param {?=} value
     * @return {?}
     */
    SimplePropertyIndexer.prototype.store = /**
     * @param {?} propertyPath
     * @param {?=} value
     * @return {?}
     */
    function (propertyPath, value) {
        this._storeIndex(this._createPathIndex(propertyPath), value);
    };
    /**
     * @private
     * @param {?} pathIndex
     * @param {?=} value
     * @return {?}
     */
    SimplePropertyIndexer.prototype._storeIndex = /**
     * @private
     * @param {?} pathIndex
     * @param {?=} value
     * @return {?}
     */
    function (pathIndex, value) {
        var e_3, _a;
        /** @type {?} */
        var indexPos = this.index;
        try {
            for (var pathIndex_1 = tslib_1.__values(pathIndex), pathIndex_1_1 = pathIndex_1.next(); !pathIndex_1_1.done; pathIndex_1_1 = pathIndex_1.next()) {
                var key = pathIndex_1_1.value;
                indexPos[key] = indexPos[key] || {};
                indexPos = indexPos[key];
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (pathIndex_1_1 && !pathIndex_1_1.done && (_a = pathIndex_1.return)) _a.call(pathIndex_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (indexPos && value) {
            indexPos[SimplePropertyIndexer.MARKER] = indexPos[SimplePropertyIndexer.MARKER] || {};
            indexPos[SimplePropertyIndexer.MARKER][value] = value;
        }
    };
    /**
     * Find path in index.<br/>
     * Will find path like:<br/>
     * <ul>
     *     <li>/property/0/prop</li>
     *     <li>/property/0/prop/2/test</li>
     *     <li>/property/0/prop/&#42;/test</li>
     *     <li>/property/&#42;/prop/1/test</li>
     *     <li>/property/&#42;/prop/&#42;/test</li>
     *     <li>/property/1/prop/&#42;/test</li>
     *  </ul>
     * @param path
     */
    /**
     * Find path in index.<br/>
     * Will find path like:<br/>
     * <ul>
     *     <li>/property/0/prop</li>
     *     <li>/property/0/prop/2/test</li>
     *     <li>/property/0/prop/&#42;/test</li>
     *     <li>/property/&#42;/prop/1/test</li>
     *     <li>/property/&#42;/prop/&#42;/test</li>
     *     <li>/property/1/prop/&#42;/test</li>
     *  </ul>
     * @param {?} path
     * @return {?}
     */
    SimplePropertyIndexer.prototype.find = /**
     * Find path in index.<br/>
     * Will find path like:<br/>
     * <ul>
     *     <li>/property/0/prop</li>
     *     <li>/property/0/prop/2/test</li>
     *     <li>/property/0/prop/&#42;/test</li>
     *     <li>/property/&#42;/prop/1/test</li>
     *     <li>/property/&#42;/prop/&#42;/test</li>
     *     <li>/property/1/prop/&#42;/test</li>
     *  </ul>
     * @param {?} path
     * @return {?}
     */
    function (path) {
        return this._findInIndex(this._createPathIndex(path));
    };
    /**
     * @param {?} path
     * @return {?}
     */
    SimplePropertyIndexer.prototype._findInIndex = /**
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var ixRes = { target: path, found: false, results: [] };
        this.__findIndex(ixRes, path, this.index, []);
        return ixRes;
    };
    /**
     * @param {?} indexerResults
     * @param {?} path
     * @param {?} index
     * @param {?=} parent
     * @return {?}
     */
    SimplePropertyIndexer.prototype.__findIndex = /**
     * @param {?} indexerResults
     * @param {?} path
     * @param {?} index
     * @param {?=} parent
     * @return {?}
     */
    function (indexerResults, path, index, parent) {
        var e_4, _a;
        /** @type {?} */
        var p = parent || [];
        /** @type {?} */
        var segment = path[0];
        /** @type {?} */
        var wild = ('*' === segment) ? Object.keys(index) : [];
        /** @type {?} */
        var _keys = ((/** @type {?} */ ((Array.isArray(segment) ? segment : [segment])))).concat(wild);
        /** @type {?} */
        var keys = _keys.filter((/**
         * @param {?} item
         * @param {?} pos
         * @return {?}
         */
        function (item, pos) { return '*' !== item && _keys.indexOf(item) === pos; }));
        if (index['*']) {
            keys.push('*');
        }
        /** @type {?} */
        var paths = [];
        try {
            for (var keys_1 = tslib_1.__values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
                var key = keys_1_1.value;
                /** @type {?} */
                var restPath = path.slice(1);
                /** @type {?} */
                var restIndex = index[key];
                /** @type {?} */
                var restParent = p.concat(key);
                if (path.length === 1) { // collect only the full paths
                    if (!this.findOnlyWithValue || (restIndex && restIndex[SimplePropertyIndexer.MARKER])) {
                        indexerResults.results = indexerResults.results || [];
                        indexerResults.results.push({
                            path: restParent,
                            value: restIndex[SimplePropertyIndexer.MARKER]
                        });
                        paths.push(restParent);
                        indexerResults.found = indexerResults.results.length > 0;
                    }
                }
                if (!restPath || !restPath.length || !restIndex) {
                    break;
                }
                /** @type {?} */
                var restPaths = this.__findIndex(indexerResults, restPath, restIndex, restParent);
                paths = paths.concat(restPaths);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
        return paths;
    };
    SimplePropertyIndexer.MARKER = '$____value';
    return SimplePropertyIndexer;
}());
export { SimplePropertyIndexer };
if (false) {
    /** @type {?} */
    SimplePropertyIndexer.MARKER;
    /** @type {?} */
    SimplePropertyIndexer.prototype.index;
    /** @type {?} */
    SimplePropertyIndexer.prototype.findOnlyWithValue;
}
/**
 * @record
 */
export function IndexerResult() { }
if (false) {
    /**
     * The path originally searched for
     * @type {?}
     */
    IndexerResult.prototype.target;
    /**
     * Flag for the status of found or not found.<br/>
     * Usually <code>results</code> will be empty if no matches found.
     * @type {?}
     */
    IndexerResult.prototype.found;
    /**
     * The result path and values from the index search.<br/>
     * Usually <code>results</code> will be empty if no matches found.
     * @type {?}
     */
    IndexerResult.prototype.results;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvcGVydHktYmluZGluZy1yZWdpc3RyeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1zY2hlbWEtZm9ybS8iLCJzb3VyY2VzIjpbImxpYi9wcm9wZXJ0eS1iaW5kaW5nLXJlZ2lzdHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBR0E7Ozs7SUFBQTtRQUVVLGFBQVEsR0FBd0MsRUFBRSxDQUFDO0lBVTdELENBQUM7Ozs7O0lBUkMscURBQW1COzs7O0lBQW5CLFVBQW9CLElBQTBCO1FBQzVDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLGdCQUFnQixFQUFFLENBQUM7UUFDcEUsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCwrREFBNkI7OztJQUE3QjtRQUNFLE9BQU8sSUFBSSxDQUFDLG1CQUFtQixDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ25FLENBQUM7SUFDSCw4QkFBQztBQUFELENBQUMsQUFaRCxJQVlDOzs7Ozs7Ozs7O0lBVkMsMkNBQTJEOzs7O0lBaUIzRCxhQUFVOzs7Ozs7O0FBTVo7Ozs7SUFBQTtRQUNFLGlCQUFZLEdBQTBCLElBQUkscUJBQXFCLEVBQUUsQ0FBQztRQUNsRSxzQkFBaUIsR0FBMEIsSUFBSSxxQkFBcUIsRUFBRSxDQUFDO0lBOEJ6RSxDQUFDOzs7Ozs7SUE1QkMsOEJBQUc7Ozs7O0lBQUgsVUFBSSxjQUFzQixFQUFFLGtCQUEwQjtRQUNwRCxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQ25FLENBQUM7Ozs7O0lBRUQsK0NBQW9COzs7O0lBQXBCLFVBQXFCLGNB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Qzt3QkFDdkIsY0FBYyxDQUFDLEtBQUssR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7cUJBQzFEO2lCQUNGO2dCQUVELElBQUksQ0FBQyxRQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUMsU0FBUyxFQUFFO29CQUMvQyxNQUFNO2lCQUNQOztvQkFDSyxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxjQUFjLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxVQUFVLENBQUM7Z0JBRW5GLEtBQUssR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO2FBQ2pDOzs7Ozs7Ozs7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUF4Rk0sNEJBQU0sR0FBRyxZQUFZLENBQUM7SUEwRi9CLDRCQUFDO0NBQUEsQUE1RkQsSUE0RkM7U0E1RlkscUJBQXFCOzs7SUFFaEMsNkJBQTZCOztJQUM3QixzQ0FBbUI7O0lBQ25CLGtEQUF5Qjs7Ozs7QUEwRjNCLG1DQXlCQzs7Ozs7O0lBckJDLCtCQUFpQjs7Ozs7O0lBS2pCLDhCQUFlOzs7Ozs7SUFLZixnQ0FVSSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2VuZXJhbCBwdXJwb3NlIHByb3BlcnkgYmluZGluZyByZWdpc3RyeVxuICovXG5leHBvcnQgY2xhc3MgUHJvcGVydHlCaW5kaW5nUmVnaXN0cnkge1xuXG4gIHByaXZhdGUgYmluZGluZ3M6IHsgW2tleTogc3RyaW5nXTogUHJvcGVydHlCaW5kaW5ncyB9ID0ge307XG5cbiAgZ2V0UHJvcGVydHlCaW5kaW5ncyh0eXBlOiBQcm9wZXJ0eUJpbmRpbmdUeXBlcyk6IFByb3BlcnR5QmluZGluZ3Mge1xuICAgIHRoaXMuYmluZGluZ3NbdHlwZV0gPSB0aGlzLmJpbmRpbmdzW3R5cGVdIHx8IG5ldyBQcm9wZXJ0eUJpbmRpbmdzKCk7XG4gICAgcmV0dXJuIHRoaXMuYmluZGluZ3NbdHlwZV07XG4gIH1cblxuICBnZXRQcm9wZXJ0eUJpbmRpbmdzVmlzaWJpbGl0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRQcm9wZXJ0eUJpbmRpbmdzKFByb3BlcnR5QmluZGluZ1R5cGVzLnZpc2liaWxpdHkpO1xuICB9XG59XG5cbi8qKlxuICogRGVmaW5lcyB0aGUgdHlwZXMgb2Ygc3VwcG9ydGVkIHByb3BlcnR5IGJpbmRpbmdzLjxici8+XG4gKiBGb3Igbm93IG9ubHkgPGNvZGU+dmlzaWJpbGl0eTwvY29kZT4gaXMgc3VwcG9ydGVkLjxici8+XG4gKi9cbmV4cG9ydCBlbnVtIFByb3BlcnR5QmluZGluZ1R5cGVzIHtcbiAgdmlzaWJpbGl0eVxufVxuXG4vKipcbiAqIFN0b3JhZ2UgdGhhdCBob2xkcyBhbGwgYmluZGluZ3MgdGhhdCBhcmUgcHJvcGVydHkgcGF0aHMgcmVsYXRlZC48YnIvPlxuICovXG5leHBvcnQgY2xhc3MgUHJvcGVydHlCaW5kaW5ncyB7XG4gIHNvdXJjZXNJbmRleDogU2ltcGxlUHJvcGVydHlJbmRleGVyID0gbmV3IFNpbXBsZVByb3BlcnR5SW5kZXhlcigpO1xuICBkZXBlbmRlbmNpZXNJbmRleDogU2ltcGxlUHJvcGVydHlJbmRleGVyID0gbmV3IFNpbXBsZVByb3BlcnR5SW5kZXhlcigpO1xuXG4gIGFkZChkZXBlbmRlbmN5UGF0aDogc3RyaW5nLCBzb3VyY2VQcm9wZXJ0eVBhdGg6IHN0cmluZykge1xuICAgIHRoaXMuc291cmNlc0luZGV4LnN0b3JlKHNvdXJjZVByb3BlcnR5UGF0aCwgZGVwZW5kZW5jeVBhdGgpO1xuICAgIHRoaXMuZGVwZW5kZW5jaWVzSW5kZXguc3RvcmUoZGVwZW5kZW5jeVBhdGgsIHNvdXJjZVByb3BlcnR5UGF0aCk7XG4gIH1cblxuICBmaW5kQnlEZXBlbmRlbmN5UGF0aChkZXBlbmRlbmN5UGF0aDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuZGVwZW5kZW5jaWVzSW5kZXguZmluZChkZXBlbmRlbmN5UGF0aCk7XG4gICAgcmVzdWx0LnJlc3VsdHMgPSByZXN1bHQucmVzdWx0cyB8fCBbXTtcbiAgICBsZXQgdmFsdWVzID0gW107XG4gICAgZm9yIChjb25zdCByZXMgb2YgcmVzdWx0LnJlc3VsdHMpIHtcbiAgICAgIHZhbHVlcyA9IHZhbHVlcy5jb25jYXQoT2JqZWN0LmtleXMocmVzLnZhbHVlKSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQuZm91bmQgPyB2YWx1ZXMgOiBbXTtcbiAgfVxuXG4gIGdldEJ5U291cmNlUHJvcGVydHlQYXRoKHNvdXJjZVByb3BlcnR5UGF0aDogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuc291cmNlc0luZGV4LmZpbmQoc291cmNlUHJvcGVydHlQYXRoKTtcbiAgICByZXN1bHQucmVzdWx0cyA9IHJlc3VsdC5yZXN1bHRzIHx8IFtdO1xuICAgIGxldCB2YWx1ZXMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHJlcyBvZiByZXN1bHQucmVzdWx0cykge1xuICAgICAgdmFsdWVzID0gdmFsdWVzLmNvbmNhdChPYmplY3Qua2V5cyhyZXMudmFsdWUpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdC5mb3VuZCA/IHZhbHVlcyA6IFtdO1xuICB9XG5cbiAgY3JlYXRlUGF0aEluZGV4KHBhdGg6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gcGF0aC5zcGxpdCgnLycpO1xuICB9XG59XG5cbi8qKlxuICogU2ltcGxlIGluZGV4ZXIgdG8gc3RvcmUgcHJvcGVydHkgcGF0aHNcbiAqL1xuZXhwb3J0IGNsYXNzIFNpbXBsZVByb3BlcnR5SW5kZXhlciB7XG5cbiAgc3RhdGljIE1BUktFUiA9ICckX19fX3ZhbHVlJztcbiAgaW5kZXg6IG9iamVjdCA9IHt9O1xuICBmaW5kT25seVdpdGhWYWx1ZSA9IHRydWU7XG5cbiAgcHJpdmF0ZSBfY3JlYXRlUGF0aEluZGV4KHBhdGg6IHN0cmluZykge1xuICAgIHJldHVybiBwYXRoXG4gICAgICAucmVwbGFjZShuZXcgUmVnRXhwKCcvLycsICdnJyksICcvJylcbiAgICAgIC5yZXBsYWNlKG5ldyBSZWdFeHAoJ14vJywgJ2cnKSwgJycpXG4gICAgICAuc3BsaXQoJy8nKS5maWx0ZXIoaXRlbSA9PiBpdGVtKTtcbiAgfVxuXG4gIHN0b3JlKHByb3BlcnR5UGF0aDogc3RyaW5nLCB2YWx1ZT86IGFueSkge1xuICAgIHRoaXMuX3N0b3JlSW5kZXgodGhpcy5fY3JlYXRlUGF0aEluZGV4KHByb3BlcnR5UGF0aCksIHZhbHVlKTtcbiAgfVxuXG4gIHByaXZhdGUgX3N0b3JlSW5kZXgocGF0aEluZGV4OiBzdHJpbmdbXSwgdmFsdWU/OiBzdHJpbmcpIHtcbiAgICBsZXQgaW5kZXhQb3MgPSB0aGlzLmluZGV4O1xuICAgIGZvciAoY29uc3Qga2V5IG9mIHBhdGhJbmRleCkge1xuICAgICAgaW5kZXhQb3Nba2V5XSA9IGluZGV4UG9zW2tleV0gfHwge307XG4gICAgICBpbmRleFBvcyA9IGluZGV4UG9zW2tleV07XG4gICAgfVxuICAgIGlmIChpbmRleFBvcyAmJiB2YWx1ZSkge1xuICAgICAgaW5kZXhQb3NbU2ltcGxlUHJvcGVydHlJbmRleGVyLk1BUktFUl0gPSBpbmRleFBvc1tTaW1wbGVQcm9wZXJ0eUluZGV4ZXIuTUFSS0VSXSB8fCB7fTtcbiAgICAgIGluZGV4UG9zW1NpbXBsZVByb3BlcnR5SW5kZXhlci5NQVJLRVJdW3ZhbHVlXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kIHBhdGggaW4gaW5kZXguPGJyLz5cbiAgICogV2lsbCBmaW5kIHBhdGggbGlrZTo8YnIvPlxuICAgKiA8dWw+XG4gICAqICAgICA8bGk+L3Byb3BlcnR5LzAvcHJvcDwvbGk+XG4gICAqICAgICA8bGk+L3Byb3BlcnR5LzAvcHJvcC8yL3Rlc3Q8L2xpPlxuICAgKiAgICAgPGxpPi9wcm9wZXJ0eS8wL3Byb3AvJiM0MjsvdGVzdDwvbGk+XG4gICAqICAgICA8bGk+L3Byb3BlcnR5LyYjNDI7L3Byb3AvMS90ZXN0PC9saT5cbiAgICogICAgIDxsaT4vcHJvcGVydHkvJiM0MjsvcHJvcC8mIzQyOy90ZXN0PC9saT5cbiAgICogICAgIDxsaT4vcHJvcGVydHkvMS9wcm9wLyYjNDI7L3Rlc3Q8L2xpPlxuICAgKiAgPC91bD5cbiAgICogQHBhcmFtIHBhdGhcbiAgICovXG4gIGZpbmQocGF0aDogc3RyaW5nKTogSW5kZXhlclJlc3VsdCB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpbmRJbkluZGV4KHRoaXMuX2NyZWF0ZVBhdGhJbmRleChwYXRoKSk7XG4gIH1cblxuICBfZmluZEluSW5kZXgocGF0aDogc3RyaW5nW10pOiBJbmRleGVyUmVzdWx0IHtcbiAgICBjb25zdCBpeFJlczogSW5kZXhlclJlc3VsdCA9IHt0YXJnZXQ6IHBhdGgsIGZvdW5kOiBmYWxzZSwgcmVzdWx0czogW119O1xuICAgIHRoaXMuX19maW5kSW5kZXgoaXhSZXMsIHBhdGgsIHRoaXMuaW5kZXgsIFtdKTtcbiAgICByZXR1cm4gaXhSZXM7XG4gIH1cblxuICBfX2ZpbmRJbmRleChpbmRleGVyUmVzdWx0czogSW5kZXhlclJlc3VsdCwgcGF0aDogc3RyaW5nW10sIGluZGV4OiBvYmplY3QsIHBhcmVudD86IHN0cmluZ1tdKSB7XG5cbiAgICBjb25zdCBwID0gcGFyZW50IHx8IFtdO1xuICAgIGNvbnN0IHNlZ21lbnQgPSBwYXRoWzBdO1xuICAgIGNvbnN0IHdpbGQgPSAoJyonID09PSBzZWdtZW50KSA/IE9iamVjdC5rZXlzKGluZGV4KSA6IFtdO1xuICAgIGNvbnN0IF9rZXlzID0gKChBcnJheS5pc0FycmF5KHNlZ21lbnQpID8gc2VnbWVudCA6IFtzZWdtZW50XSkgYXMgc3RyaW5nW10pLmNvbmNhdCh3aWxkKTtcbiAgICBjb25zdCBrZXlzID0gX2tleXMuZmlsdGVyKChpdGVtLCBwb3MpID0+ICcqJyAhPT0gaXRlbSAmJiBfa2V5cy5pbmRleE9mKGl0ZW0pID09PSBwb3MpOyAvLyByZW1vdmUgZHVwbGljYXRlc1xuXG4gICAgaWYgKGluZGV4WycqJ10pIHtcbiAgICAgIGtleXMucHVzaCgnKicpO1xuICAgIH1cblxuICAgIGxldCBwYXRocyA9IFtdO1xuICAgIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICAgIGNvbnN0IHJlc3RQYXRoID0gcGF0aC5zbGljZSgxKTtcbiAgICAgIGNvbnN0IHJlc3RJbmRleCA9IGluZGV4W2tleV07XG4gICAgICBjb25zdCByZXN0UGFyZW50ID0gcC5jb25jYXQoa2V5KTtcblxuICAgICAgaWYgKHBhdGgubGVuZ3RoID09PSAxKSB7Ly8gY29sbGVjdCBvbmx5IHRoZSBmdWxsIHBhdGhzXG4gICAgICAgIGlmICghdGhpcy5maW5kT25seVdpdGhWYWx1ZSB8fCAocmVzdEluZGV4ICYmIHJlc3RJbmRleFtTaW1wbGVQcm9wZXJ0eUluZGV4ZXIuTUFSS0VSXSkpIHtcbiAgICAgICAgICBpbmRleGVyUmVzdWx0cy5yZXN1bHRzID0gaW5kZXhlclJlc3VsdHMucmVzdWx0cyB8fCBbXTtcbiAgICAgICAgICBpbmRleGVyUmVzdWx0cy5yZXN1bHRzLnB1c2goe1xuICAgICAgICAgICAgcGF0aDogcmVzdFBhcmVudCxcbiAgICAgICAgICAgIHZhbHVlOiByZXN0SW5kZXhbU2ltcGxlUHJvcGVydHlJbmRleGVyLk1BUktFUl1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBwYXRocy5wdXNoKHJlc3RQYXJlbnQpO1xuICAgICAgICAgIGluZGV4ZXJSZXN1bHRzLmZvdW5kID0gaW5kZXhlclJlc3VsdHMucmVzdWx0cy5sZW5ndGggPiAwO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmICghcmVzdFBhdGggfHwgIXJlc3RQYXRoLmxlbmd0aCB8fCAhcmVzdEluZGV4KSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgY29uc3QgcmVzdFBhdGhzID0gdGhpcy5fX2ZpbmRJbmRleChpbmRleGVyUmVzdWx0cywgcmVzdFBhdGgsIHJlc3RJbmRleCwgcmVzdFBhcmVudCk7XG5cbiAgICAgIHBhdGhzID0gcGF0aHMuY29uY2F0KHJlc3RQYXRocyk7XG4gICAgfVxuICAgIHJldHVybiBwYXRocztcbiAgfVxuXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5kZXhlclJlc3VsdCB7XG4gIC8qKlxuICAgKiBUaGUgcGF0aCBvcmlnaW5hbGx5IHNlYXJjaGVkIGZvclxuICAgKi9cbiAgdGFyZ2V0OiBzdHJpbmdbXTtcbiAgLyoqXG4gICAqIEZsYWcgZm9yIHRoZSBzdGF0dXMgb2YgZm91bmQgb3Igbm90IGZvdW5kLjxici8+XG4gICAqIFVzdWFsbHkgPGNvZGU+cmVzdWx0czwvY29kZT4gd2lsbCBiZSBlbXB0eSBpZiBubyBtYXRjaGVzIGZvdW5kLlxuICAgKi9cbiAgZm91bmQ6IGJvb2xlYW47XG4gIC8qKlxuICAgKiBUaGUgcmVzdWx0IHBhdGggYW5kIHZhbHVlcyBmcm9tIHRoZSBpbmRleCBzZWFyY2guPGJyLz5cbiAgICogVXN1YWxseSA8Y29kZT5yZXN1bHRzPC9jb2RlPiB3aWxsIGJlIGVtcHR5IGlmIG5vIG1hdGNoZXMgZm91bmQuXG4gICAqL1xuICByZXN1bHRzOiB7XG4gICAgLyoqXG4gICAgICogVGhlIHBhdGggdGhhdCBtYXRjaGVkIHRoZSA8Y29kZT50YXJnZXQ8L2NvZGU+XG4gICAgICogc2VwYXJhdGVkIGluIHNlZ21lbnRzXG4gICAgICovXG4gICAgcGF0aDogc3RyaW5nW10sXG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIHN0b3JlZCBhdCB0aGUgPGNvZGU+cGF0aDwvY29kZT5cbiAgICAgKi9cbiAgICB2YWx1ZTogYW55XG4gIH1bXTtcbn1cbiJdfQ==