{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@ngx-formly/core/lib/utils.ts","ng://@ngx-formly/core/lib/services/formly.config.ts","ng://@ngx-formly/core/lib/services/formly.form.builder.ts","ng://@ngx-formly/core/lib/components/formly.form.ts","ng://@ngx-formly/core/lib/components/formly.field.ts","ng://@ngx-formly/core/lib/components/formly.attributes.ts","ng://@ngx-formly/core/lib/templates/field.type.ts","ng://@ngx-formly/core/lib/extensions/field-form/utils.ts","ng://@ngx-formly/core/lib/templates/field-array.type.ts","ng://@ngx-formly/core/lib/templates/field.wrapper.ts","ng://@ngx-formly/core/lib/templates/formly.group.ts","ng://@ngx-formly/core/lib/templates/formly.validation-message.ts","ng://@ngx-formly/core/lib/templates/field-template.type.ts","ng://@ngx-formly/core/lib/extensions/field-expression/utils.ts","ng://@ngx-formly/core/lib/extensions/field-expression/field-expression.ts","ng://@ngx-formly/core/lib/extensions/field-validation/field-validation.ts","ng://@ngx-formly/core/lib/extensions/field-form/field-form.ts","ng://@ngx-formly/core/lib/extensions/core/core.ts","ng://@ngx-formly/core/lib/core.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__values","o","m","Symbol","iterator","next","value","done","__read","r","e","ar","push","error","__spread","concat","getKeyPath","field","key","_keyPath","indexOf","replace","path","split","slice","FORMLY_VALIDATORS","assignModelValue","model","paths","isObject","test","clone","getFieldValue","parent","_b","tslib_1.__values","_c","reverseDeepMerge","dest","args","_i","forEach","src","srcArg","isNullOrUndefined","obj1","obj2","getPrototypeOf","isArray","undefined","isUndefined","isFunction","x","isObservable","changingThisBreaksApplicationSecurity","name","_isAMomentObject","AbstractControl","Date","getTime","map","v","proto","c","keys","reduce","newVal","prop","propDesc","getOwnPropertyDescriptor","get","defineProperty","defineHiddenProp","defaultValue","enumerable","writable","configurable","wrapProperty","setFn","_observers","fns","currentValue","firstChange","set","previousValue_1","changeFn","previousValue","filter","FORMLY_CONFIG","InjectionToken","FormlyConfig","types","validators","wrappers","messages","templateManipulators","preWrapper","postWrapper","extras","checkExpressionOn","showError","formControl","invalid","touched","options","parentForm","submitted","validation","show","extensions","addConfig","config","_this","type","setType","validator","setValidator","wrapper","setWrapper","manipulators","console","warn","manipulator","setManipulator","validationMessages","addValidatorMessage","message","extension","option","setTypeWrapper","getType","Error","mergeExtendedType","getMergedField","defaultOptions","extendDefaults","extends","optionsTypes","componentRef","createComponent","instance","resolver","injector","cf","_componentFactory","hostView","destroyed","_componentFactoryResolver","getFieldInjector","component","resolveComponentFactory","getWrapper","getValidator","getValidatorMessage","class","method","extendedType","_injector","Injectable","providedIn","FormlyFormBuilder","formlyConfig","componentFactoryResolver","buildForm","fieldGroup","core","_buildForm","_setOptions","getExtensions","prePopulate","onPopulate","f","postPopulate","formState","fieldChanges","Subject","_hiddenFieldsForCheck","_markForCheck","_componentRefs","ref","changeDetectorRef","markForCheck","ComponentFactoryResolver","Injector","FormlyForm","formlyBuilder","ngZone","immutable","parentFormGroup","modelChange","EventEmitter","modelChangeSubs","modelChange$","modelChangeSub","pipe","switchMap","onStable","asObservable","take","subscribe","checkExpressionChange","emit","_model","_fields","fields","_options","content","nativeElement","nextSibling","ngDoCheck","ngOnChanges","changes","form","FormGroup","setOptions","updateInitialValue","clearModelSubscriptions","trackModelChanges","ngOnDestroy","unsubscribe","changeModel","_a","k","pop","resetModel","_initialModel","control","resetForm","reset","emitModelChange","_checkField","rootKey","control_1","valueChanges","distinctUntilChanged","modelOptions","updateOn","debounce","default","debounceTime","FormControl","patchValue","emitEvent","onlySelf","parsers","parserFn","tslib_1.__spread","join","sub","Component","selector","template","providers","NgZone","Attribute","FormGroupDirective","decorators","Optional","Input","Output","ViewChild","FormlyField","renderer","elementRef","hideDeprecation","warnDeprecation","hostObservers","ngAfterContentInit","triggerHook","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","ngOnInit","renderField","containerRef","clear","wps_1","cfr","ref_1","attachComponentRef","detectChanges","insert","hooks","lifecycle","renderHostBinding","setStyle","setAttribute","Renderer2","ElementRef","read","ViewContainerRef","static","FormlyAttributes","_document","uiAttributesCache","uiAttributes","uiEvents","listeners","events","document","templateOptions","attr","listener","eventName","to","listen","attributes","removeAttribute","attachAttrElement","fieldAttrElements","element","focusElement","detachAttrElement","focus","isFocused","activeElement","some","contains","blur","onFocus","$event","onBlur","onChange","change","markAsDirty","index","findIndex","splice","Directive","host","(focus)","(blur)","(change)","Inject","DOCUMENT","FieldType","id","Field","_super","tslib_1.__extends","unregisterControl","opts","FormArray","key_1","controls","updateControl","removeAt","key_2","removeControl","setParent","disabled","registerControl","includes","disable","enable","registerOnDisabledChange","_hide","setControl","action","_forEachChild","cb","updateValueAndValidity","bind","FieldArrayType","builder","fieldArray","add","initialModel","remove","FieldWrapper","FormlyGroup","[class]","FormlyValidationMessage","errorMessage$","statusChanges","startWith","errorMessage","fieldForm","errors","errorPath","asyncValidators","changeDetection","ChangeDetectionStrategy","OnPush","FormlyTemplateType","evalExpression","expression","thisArg","argVal","Function","FieldExpressionExtension","ignoreCache","sort","hide","toggleFormControl","_expressionProperties","expressionProperties","expressionProperty","expressionValueSetter","evalExpressionValueSetter","argNames","this_1","_evalExpression","Observable","subscription_1","onDestroy_1","onDestroy","hideExpression","parent_1","parentExpression","evalStringExpression","checkFieldExpressionChange","checkFieldVisibilityChange","expressionValue","JSON","stringify","setDisabledState","hideExpressionResult","hidden","every","FieldValidationExtension","initFieldValidation","getPredefinedFieldValidation","validatorName","wrapNgValidatorFn","Validators","compose","composeAsync","VALIDATORS","opt","required","pattern","minLength","maxLength","min","max","validatorFn","isValid","isPromise","obj","then","result","handleResult","controlErrors","setErrors","_d","FieldFormExtension","addFormControl","setValidators","_updateTreeValidity","findControl","controlOptions","createControl","updateValidity","c_1","enabled","asyncValidator","_validators","setAsyncValidators","_asyncValidators","of","CoreExtension","formId","getFieldComponentInstance","fieldTransforms","fieldTransform","initFieldOptions","root","getFieldId","label","placeholder","initFieldWrappers","fieldTemplateManipulators","el","a","defaultFormlyConfig","FormlyModule","configService","configs","forRoot","ngModule","provide","multi","useFactory","deps","useValue","ANALYZE_FOR_ENTRY_COMPONENTS","forChild","NgModule","declarations","entryComponents","exports","imports","CommonModule","getFieldInitialValue","paths_1","paths_1_1"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { FormlyFieldConfig } from './core';\nimport { isObservable } from 'rxjs';\nimport { AbstractControl } from '@angular/forms';\nimport { FormlyFieldConfigCache } from './components/formly.field.config';\n\nexport function getFieldId(formId: string, field: FormlyFieldConfig, index: string|number) {\n  if (field.id) return field.id;\n  let type = field.type;\n  if (!type && field.template) type = 'template';\n  return [formId, type, field.key, index].join('_');\n}\n\nexport function getKeyPath(field: FormlyFieldConfigCache): string[] {\n  if (!field.key) {\n    return [];\n  }\n\n  /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n  if (!field._keyPath || field._keyPath.key !== field.key) {\n    const key = field.key.indexOf('[') === -1\n      ? field.key\n      : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n\n    field._keyPath = { key: field.key, path: key.indexOf('.') !== -1 ? key.split('.') : [key] };\n  }\n\n  return field._keyPath.path.slice(0);\n}\n\nexport const FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\n\nexport function assignModelValue(model: any, paths: string[], value: any) {\n  for (let i = 0; i < (paths.length - 1); i++) {\n    const path = paths[i];\n    if (!model[path] || !isObject(model[path])) {\n      model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n    }\n\n    model = model[path];\n  }\n\n  model[paths[paths.length - 1]] = clone(value);\n}\n\nexport function getFieldInitialValue(field: FormlyFieldConfig) {\n  let value = field.options['_initialModel'];\n  let paths = getKeyPath(field);\n  while (field.parent) {\n    field = field.parent;\n    paths = [...getKeyPath(field), ...paths];\n  }\n\n  for (const path of paths) {\n    if (!value) {\n      return undefined;\n    }\n    value = value[path];\n  }\n\n  return value;\n}\n\nexport function getFieldValue(field: FormlyFieldConfig): any {\n  let model = field.parent.model;\n  for (const path of getKeyPath(field)) {\n    if (!model) {\n      return model;\n    }\n    model = model[path];\n  }\n\n  return model;\n}\n\nexport function reverseDeepMerge(dest: any, ...args: any[]) {\n  args.forEach(src => {\n    for (let srcArg in src) {\n      if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {\n        dest[srcArg] = clone(src[srcArg]);\n      } else if (objAndSameType(dest[srcArg], src[srcArg])) {\n        reverseDeepMerge(dest[srcArg], src[srcArg]);\n      }\n    }\n  });\n  return dest;\n}\n\nexport function isNullOrUndefined(value: any) {\n  return value === undefined || value === null;\n}\n\nexport function isUndefined(value: any) {\n  return value === undefined;\n}\n\nexport function isBlankString(value: any) {\n  return value === '';\n}\n\nexport function isFunction(value: any) {\n  return typeof(value) === 'function';\n}\n\nexport function objAndSameType(obj1: any, obj2: any) {\n  return isObject(obj1) && isObject(obj2)\n    && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2)\n    && !(Array.isArray(obj1) || Array.isArray(obj2));\n}\n\nexport function isObject(x: any) {\n  return x != null && typeof x === 'object';\n}\n\nexport function isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nexport function clone(value: any): any {\n  if (\n    !isObject(value)\n    || isObservable(value)\n    || /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity\n    || ['RegExp', 'FileList', 'File', 'Blob'].indexOf(value.constructor.name) !== -1\n  ) {\n    return value;\n  }\n\n  // https://github.com/moment/moment/blob/master/moment.js#L252\n  if (value._isAMomentObject && isFunction(value.clone)) {\n    return value.clone();\n  }\n\n  if (value instanceof AbstractControl) {\n    return null;\n  }\n\n  if (value instanceof Date) {\n    return new Date(value.getTime());\n  }\n\n  if (Array.isArray(value)) {\n    return value.slice(0).map(v => clone(v));\n  }\n\n  // best way to clone a js object maybe\n  // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n  const proto = Object.getPrototypeOf(value);\n  let c = Object.create(proto);\n  c = Object.setPrototypeOf(c, proto);\n  // need to make a deep copy so we dont use Object.assign\n  // also Object.assign wont copy property descriptor exactly\n  return Object.keys(value).reduce((newVal, prop) => {\n    const propDesc = Object.getOwnPropertyDescriptor(value, prop);\n    if (propDesc.get) {\n      Object.defineProperty(newVal, prop, propDesc);\n    } else {\n      newVal[prop] = clone(value[prop]);\n    }\n\n    return newVal;\n  }, c);\n}\n\nexport function defineHiddenProp(field: any, prop: string, defaultValue: any) {\n  Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n  field[prop] = defaultValue;\n}\n\nexport function wrapProperty<T = any>(\n  o: any,\n  prop: string,\n  setFn: (change: {currentValue: T, previousValue?: T, firstChange: boolean}) => void,\n) {\n  if (!o._observers) {\n    defineHiddenProp(o, '_observers', {});\n  }\n\n  if (!o._observers[prop]) {\n    o._observers[prop] = [];\n  }\n\n  let fns = o._observers[prop];\n  if (fns.indexOf(setFn) === -1) {\n    fns.push(setFn);\n    setFn({ currentValue: o[prop], firstChange: true });\n    if (fns.length === 1) {\n      defineHiddenProp(o, `___$${prop}`, o[prop]);\n      Object.defineProperty(o, prop, {\n        configurable: true,\n        get: () => o[`___$${prop}`],\n        set: currentValue => {\n          if (currentValue !== o[`___$${prop}`]) {\n            const previousValue = o[`___$${prop}`];\n            o[`___$${prop}`] = currentValue;\n            fns.forEach(changeFn => changeFn({ previousValue, currentValue, firstChange: false }));\n          }\n        },\n      });\n    }\n  }\n\n  return () => {\n    fns = fns.filter(changeFn => changeFn !== setFn);\n  };\n}\n","import { Injectable, InjectionToken, ComponentRef, ComponentFactoryResolver, Injector } from '@angular/core';\nimport { ValidationErrors, AbstractControl } from '@angular/forms';\nimport { FieldType } from './../templates/field.type';\nimport { reverseDeepMerge, defineHiddenProp } from './../utils';\nimport { FormlyFieldConfig, FormlyFieldConfigCache } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG = new InjectionToken<FormlyConfig>('FORMLY_CONFIG');\n\n/** @experimental */\nexport interface FormlyExtension {\n  prePopulate?(field: FormlyFieldConfig): void;\n  onPopulate?(field: FormlyFieldConfig): void;\n  postPopulate?(field: FormlyFieldConfig): void;\n}\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable({ providedIn: 'root' })\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n  extras: ConfigOption['extras'] = {\n    checkExpressionOn: 'changeDetectionCheck',\n    showError: function(field: FieldType) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n  extensions: { [name: string]: FormlyExtension } = {};\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      console.warn(`NgxFormly: passing 'manipulators' config is deprecated, use custom extension instead.`);\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extensions) {\n      config.extensions.forEach(c => this.extensions[c.name] = c.extension);\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = <TypeOption>{ name: options.name };\n      }\n\n      ['component', 'extends', 'defaultOptions'].forEach(prop => {\n        if (options.hasOwnProperty(prop)) {\n          this.types[options.name][prop] = options[prop];\n        }\n      });\n\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    const type = this.getType(field.type);\n    if (type.defaultOptions) {\n      reverseDeepMerge(field, type.defaultOptions);\n    }\n\n    const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        const defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    const componentRef = this.createComponent(field);\n    if (componentRef && componentRef.instance && componentRef.instance.defaultOptions) {\n      reverseDeepMerge(field, componentRef.instance.defaultOptions);\n    }\n\n    if (!field.wrappers && type.wrappers) {\n      field.wrappers = [...type.wrappers];\n    }\n  }\n\n  /** @internal */\n  createComponent(\n    field: FormlyFieldConfigCache = {},\n    resolver?: ComponentFactoryResolver,\n    injector?: Injector,\n  ): ComponentRef<FieldType> {\n    if (!field.type) {\n      return;\n    }\n\n    const cf = field._componentFactory;\n    if (cf && field.type === cf.type && (cf.componentRef && cf.componentRef.hostView && !cf.componentRef.hostView.destroyed)) {\n      return field._componentFactory.componentRef;\n    }\n\n    const type = this.getType(field.type);\n    if (!resolver) {\n      resolver = field.parent.options._componentFactoryResolver;\n    }\n    if (!injector) {\n      injector = this.getFieldInjector(field);\n    }\n\n    defineHiddenProp(field, '_componentFactory', {\n      type: field.type,\n      component: type.component,\n      componentRef: resolver\n        ? resolver.resolveComponentFactory(type.component).create(injector)\n        : null,\n    });\n\n    return field._componentFactory.componentRef;\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = <TypeOption>{};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    if (this.types[type].wrappers.indexOf(name) === -1) {\n      this.types[type].wrappers.push(name);\n    }\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n\n  private getFieldInjector(field: FormlyFieldConfigCache = {}) {\n    const parent = field.parent;\n    if (parent._componentFactory && parent._componentFactory.componentRef) {\n      return parent._componentFactory.componentRef.injector;\n    }\n\n    return parent.options._injector;\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ExtensionOption {\n  name: string;\n  extension: FormlyExtension;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  extensions?: ExtensionOption[];\n  validationMessages?: ValidationMessageOption[];\n\n  /** @deprecated use `extensions` instead */\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    /** @deprecated use `extensions` instead */\n    fieldTransform?: any,\n    immutable?: boolean,\n    showError?: (field: FieldType) => boolean;\n\n    /**\n     * Defines the option which formly rely on to check field expression properties.\n     * - `modelChange`: perform a check when the value of the form control changes.\n     * - `changeDetectionCheck`: triggers an immediate check when `ngDoCheck` is called.\n    */\n    checkExpressionOn?: 'modelChange' | 'changeDetectionCheck',\n  };\n}\n","import { Injectable, ComponentFactoryResolver, Injector } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { FormlyConfig } from './formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache, FormlyValueChangeEvent, FormlyFormOptionsCache } from '../components/formly.field.config';\nimport { Subject } from 'rxjs';\nimport { defineHiddenProp } from '../utils';\n\n@Injectable({ providedIn: 'root' })\nexport class FormlyFormBuilder {\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector,\n  ) {}\n\n  buildForm(formControl: FormGroup | FormArray, fieldGroup: FormlyFieldConfig[] = [], model: any, options: FormlyFormOptions) {\n    if (!this.formlyConfig.extensions.core) {\n      throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n    }\n\n    this._buildForm({ fieldGroup, model, formControl, options: this._setOptions(options) });\n  }\n\n  private _buildForm(field: FormlyFieldConfigCache) {\n    this.getExtensions().forEach(extension => extension.prePopulate && extension.prePopulate(field));\n    this.getExtensions().forEach(extension => extension.onPopulate && extension.onPopulate(field));\n\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f) => this._buildForm(f));\n    }\n\n    this.getExtensions().forEach(extension => extension.postPopulate && extension.postPopulate(field));\n  }\n\n  private getExtensions() {\n    return Object.keys(this.formlyConfig.extensions).map(name => this.formlyConfig.extensions[name]);\n  }\n\n  private _setOptions(options: FormlyFormOptionsCache) {\n    options = options || {};\n    options.formState = options.formState || {};\n\n    if (!options.showError) {\n      options.showError = this.formlyConfig.extras.showError;\n    }\n\n    if (!options.fieldChanges) {\n      defineHiddenProp(options, 'fieldChanges', new Subject<FormlyValueChangeEvent>());\n    }\n\n    if (!options._componentFactoryResolver) {\n      defineHiddenProp(options, '_componentFactoryResolver', this.componentFactoryResolver);\n    }\n\n    if (!options._injector) {\n      defineHiddenProp(options, '_injector', this.injector);\n    }\n\n    if (!options._hiddenFieldsForCheck) {\n      options._hiddenFieldsForCheck = [];\n    }\n\n    if (!options._markForCheck) {\n      options._markForCheck = (field) => {\n        if (field._componentRefs) {\n          field._componentRefs.forEach(ref => ref.changeDetectorRef.markForCheck());\n        }\n\n        if (field.fieldGroup) {\n          field.fieldGroup.forEach(f => options._markForCheck(f));\n        }\n      };\n    }\n\n    return options;\n  }\n}\n","import { Component, DoCheck, OnChanges, Input, SimpleChanges, Optional, EventEmitter, Output, OnDestroy, Attribute, ViewChild, ElementRef, NgZone } from '@angular/core';\nimport { FormGroup, FormArray, FormGroupDirective, FormControl } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFormOptionsCache } from './formly.field.config';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyConfig } from '../services/formly.config';\nimport { assignModelValue, isNullOrUndefined, wrapProperty, clone, defineHiddenProp, getKeyPath } from '../utils';\nimport { Subscription, Subject } from 'rxjs';\nimport { debounceTime, switchMap, distinctUntilChanged, take } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-form',\n  template: `\n    <formly-field *ngFor=\"let field of fields\"\n      hide-deprecation\n      [form]=\"field.form\"\n      [options]=\"field.options\"\n      [model]=\"field.model\"\n      [field]=\"field\">\n    </formly-field>\n    <ng-container #content>\n      <ng-content></ng-content>\n    </ng-container>\n  `,\n  providers: [FormlyFormBuilder],\n})\nexport class FormlyForm implements DoCheck, OnChanges, OnDestroy {\n  @Input() form: FormGroup | FormArray;\n\n  @Input()\n  set model(model: any) { this._model = this.immutable ? clone(model) : model; }\n  get model() { return this._model || {}; }\n\n  @Input()\n  set fields(fields: FormlyFieldConfig[]) { this._fields = this.immutable ? clone(fields) : fields; }\n  get fields() { return this._fields || []; }\n\n  @Input()\n  set options(options: FormlyFormOptions) { this._options = this.immutable ? clone(options) : options; }\n  get options() { return this._options; }\n\n  @Output() modelChange = new EventEmitter<any>();\n  @ViewChild('content') set content(content: ElementRef<HTMLElement>) {\n    if (content && content.nativeElement.nextSibling) {\n      console.warn(`NgxFormly: content projection for 'formly-form' component is deprecated since v5.5, you should avoid passing content inside the 'formly-form' tag.`);\n    }\n  }\n\n  private immutable = false;\n  private _model: any;\n  private _fields: FormlyFieldConfig[];\n  private _options: FormlyFormOptions;\n  private modelChangeSubs: Subscription[] = [];\n  private modelChange$ = new Subject<void>();\n  private modelChangeSub = this.modelChange$.pipe(\n    switchMap(() => this.ngZone.onStable.asObservable().pipe(take(1))),\n  ).subscribe(() => {\n    this.checkExpressionChange();\n    this.modelChange.emit(clone(this.model));\n  });\n\n  constructor(\n    private formlyBuilder: FormlyFormBuilder,\n    private formlyConfig: FormlyConfig,\n    private ngZone: NgZone,\n    // tslint:disable-next-line\n    @Attribute('immutable') immutable,\n    @Optional() private parentFormGroup: FormGroupDirective,\n  ) {\n    if (immutable !== null) {\n      console.warn(`NgxFormly: passing 'immutable' attribute to 'formly-form' component is deprecated since v5.5, enable immutable mode through NgModule declaration instead.`);\n    }\n\n    this.immutable = (immutable !== null) || !!formlyConfig.extras.immutable;\n  }\n\n  ngDoCheck() {\n    if (this.formlyConfig.extras.checkExpressionOn === 'changeDetectionCheck') {\n      this.checkExpressionChange();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.fields || changes.form || changes.model) {\n      this.form = this.form || (new FormGroup({}));\n      this.setOptions();\n      this.options.updateInitialValue();\n      this.clearModelSubscriptions();\n      this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n      this.trackModelChanges(this.fields);\n    }\n  }\n\n  ngOnDestroy() {\n    this.modelChangeSub.unsubscribe();\n    this.clearModelSubscriptions();\n  }\n\n  changeModel({ key, value, field }: { key: string, value: any, field: FormlyFieldConfig }) {\n    if (\n      value == null\n      && field['autoClear']\n      && !field.formControl.parent\n    ) {\n      const paths = key.split('.');\n      const k = paths.pop();\n      const m = paths.reduce((model, path) => model[path] || {}, this.model);\n      delete m[k];\n    } else {\n      assignModelValue(this.model, key.split('.'), value);\n    }\n\n    this.modelChange$.next();\n  }\n\n  setOptions() {\n    if (!this.options) {\n      this.options = {};\n    }\n\n    if (!this.options.resetModel) {\n      this.options.resetModel = (model ?: any) => {\n        model = clone(isNullOrUndefined(model) ? (<FormlyFormOptionsCache> this.options)._initialModel : model);\n        if (this.model) {\n          Object.keys(this.model).forEach(k => delete this.model[k]);\n          Object.assign(this.model, model || {});\n        }\n\n        (<FormlyFormOptionsCache> this.options)._buildForm();\n\n        // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form\n        // but only when the current component is a root one.\n        if (this.options.parentForm && this.options.parentForm.control === this.form) {\n          this.options.parentForm.resetForm(model);\n        } else {\n          this.form.reset(model);\n        }\n      };\n    }\n\n    if (!this.options.parentForm && this.parentFormGroup) {\n      defineHiddenProp(this.options, 'parentForm', this.parentFormGroup);\n      wrapProperty(this.options.parentForm, 'submitted', ({ firstChange }) => {\n        if (!firstChange) {\n          (<FormlyFormOptionsCache> this.options)._markForCheck({\n            fieldGroup: this.fields,\n            model: this.model,\n            formControl: this.form,\n            options: this.options,\n          });\n        }\n      });\n    }\n\n    if (!this.options.updateInitialValue) {\n      this.options.updateInitialValue = () => (<FormlyFormOptionsCache> this.options)._initialModel = clone(this.model);\n    }\n\n    if (!(<FormlyFormOptionsCache> this.options)._buildForm) {\n      (<FormlyFormOptionsCache> this.options)._buildForm = (emitModelChange = false) => {\n        this.clearModelSubscriptions();\n        this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n        this.trackModelChanges(this.fields);\n\n        if (emitModelChange) {\n          this.modelChange.emit(clone(this.model));\n        }\n      };\n    }\n  }\n\n  private checkExpressionChange() {\n    if (this.options && (<FormlyFormOptionsCache> this.options)._checkField) {\n      (<FormlyFormOptionsCache> this.options)._checkField({\n        fieldGroup: this.fields,\n        model: this.model,\n        formControl: this.form,\n        options: this.options,\n      });\n    }\n  }\n\n  private trackModelChanges(fields: FormlyFieldConfig[], rootKey: string[] = []) {\n    fields.forEach(field => {\n      if (field.key && !field.fieldGroup) {\n        const control = field.formControl;\n        let valueChanges = control.valueChanges.pipe(distinctUntilChanged());\n\n        const { updateOn, debounce } = field.modelOptions;\n        if ((!updateOn || updateOn === 'change') && debounce && debounce.default > 0) {\n          valueChanges = control.valueChanges.pipe(debounceTime(debounce.default));\n        }\n\n        this.modelChangeSubs.push(valueChanges.subscribe((value) => {\n          // workaround for https://github.com/angular/angular/issues/13792\n          if (control instanceof FormControl && control['_fields'] && control['_fields'].length > 1) {\n            control.patchValue(value, { emitEvent: false, onlySelf: true });\n          }\n\n          if (field.parsers && field.parsers.length > 0) {\n            field.parsers.forEach(parserFn => value = parserFn(value));\n          }\n\n          this.changeModel({ key: [...rootKey, ...getKeyPath(field)].join('.'), value, field });\n        }));\n      }\n\n      if (field.fieldGroup && field.fieldGroup.length > 0) {\n        this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, ...getKeyPath(field)] : rootKey);\n      }\n    });\n  }\n\n  private clearModelSubscriptions() {\n    this.modelChangeSubs.forEach(sub => sub.unsubscribe());\n    this.modelChangeSubs = [];\n  }\n}\n","import {\n  Component, EventEmitter, Input, Output,\n  ViewContainerRef, ViewChild, ComponentRef, SimpleChanges, Attribute, ComponentFactoryResolver,\n  OnInit, OnChanges, OnDestroy, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, Injector, Renderer2, ElementRef,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache } from './formly.field.config';\nimport { defineHiddenProp, wrapProperty } from '../utils';\nimport { FieldWrapper } from '../templates/field.wrapper';\nimport { FieldType } from '../templates/field.type';\n\n@Component({\n  selector: 'formly-field',\n  template: `<ng-template #container></ng-template>`,\n})\nexport class FormlyField implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  @Input() field: FormlyFieldConfig;\n\n  warnDeprecation = false;\n\n  @Input() set model(m: any) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set form(form: FormGroup) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set options(options: FormlyFormOptions) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Output() modelChange: EventEmitter<any> = new EventEmitter();\n  // TODO: remove `any`, once dropping angular `V7` support.\n  @ViewChild('container', <any> {read: ViewContainerRef, static: true }) containerRef: ViewContainerRef;\n  private hostObservers: Function[] = [];\n\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector,\n    // tslint:disable-next-line\n    @Attribute('hide-deprecation') hideDeprecation,\n  ) {\n    this.warnDeprecation = hideDeprecation === null;\n  }\n\n  ngAfterContentInit() {\n    this.triggerHook('afterContentInit');\n  }\n\n  ngAfterContentChecked() {\n    this.triggerHook('afterContentChecked');\n  }\n\n  ngAfterViewInit() {\n    this.triggerHook('afterViewInit');\n  }\n\n  ngAfterViewChecked() {\n    this.triggerHook('afterViewChecked');\n  }\n\n  ngDoCheck() {\n    this.triggerHook('doCheck');\n  }\n\n  ngOnInit() {\n    this.triggerHook('onInit');\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this.triggerHook('onChanges', changes);\n  }\n\n  ngOnDestroy() {\n    this.field && defineHiddenProp(this.field, '_componentRefs', []);\n    this.hostObservers.forEach(unsubscribe => unsubscribe());\n    this.triggerHook('onDestroy');\n  }\n\n  private renderField(containerRef: ViewContainerRef, f: FormlyFieldConfigCache, wrappers: string[]) {\n    if (this.containerRef === containerRef) {\n      defineHiddenProp(this.field, '_componentRefs', []);\n      this.containerRef.clear();\n    }\n\n    if (wrappers && wrappers.length > 0) {\n      const [wrapper, ...wps] = wrappers;\n      const { component } = this.formlyConfig.getWrapper(wrapper);\n      const cfr = f.options && f.options._componentFactoryResolver\n        ? f.options._componentFactoryResolver\n        : this.componentFactoryResolver;\n\n      const ref = containerRef.createComponent<FieldWrapper>(cfr.resolveComponentFactory(component));\n      this.attachComponentRef(ref, f);\n      wrapProperty(ref.instance, 'fieldComponent', ({ currentValue, firstChange }) => {\n        if (currentValue) {\n          this.renderField(currentValue as ViewContainerRef, f, wps);\n          !firstChange && ref.changeDetectorRef.detectChanges();\n        }\n      });\n    } else {\n      const ref = this.formlyConfig.createComponent(f, this.componentFactoryResolver, this.injector);\n      if (ref) {\n        this.attachComponentRef(ref, f);\n        containerRef.insert(ref.hostView);\n      }\n    }\n  }\n\n  private triggerHook(name: string, changes?: SimpleChanges) {\n    if (this.field.hooks && this.field.hooks[name]) {\n      if (!changes || changes.field) {\n        this.field.hooks[name](this.field);\n      }\n    }\n\n    if (this.field.lifecycle && this.field.lifecycle[name]) {\n      this.field.lifecycle[name](\n        this.field.form,\n        this.field,\n        this.field.model,\n        this.field.options,\n      );\n    }\n\n    if (name === 'onChanges' && changes.field) {\n      this.renderHostBinding();\n      this.renderField(this.containerRef, this.field, this.field.wrappers);\n    }\n  }\n\n  private attachComponentRef<T extends FieldType>(ref: ComponentRef<T>, field: FormlyFieldConfigCache) {\n    field._componentRefs.push(ref);\n    Object.assign(ref.instance, { field });\n  }\n\n  private renderHostBinding() {\n    this.hostObservers.forEach(unsubscribe => unsubscribe());\n    this.hostObservers = [\n      wrapProperty(this.field, 'hide', ({ firstChange, currentValue }) => {\n        if (!firstChange || (firstChange && currentValue)) {\n          this.renderer.setStyle(this.elementRef.nativeElement, 'display', currentValue ? 'none' : '');\n        }\n      }),\n      wrapProperty(this.field, 'className', ({ firstChange, currentValue }) => {\n        if (!firstChange || (firstChange && currentValue)) {\n          this.renderer.setAttribute(this.elementRef.nativeElement, 'class', currentValue);\n        }\n      }),\n    ];\n  }\n}\n","import { Directive, ElementRef, Input, OnChanges, SimpleChanges, Renderer2, DoCheck, Inject, OnDestroy } from '@angular/core';\nimport { FormlyFieldConfig, FormlyTemplateOptions } from './formly.field.config';\nimport { wrapProperty, defineHiddenProp, FORMLY_VALIDATORS } from '../utils';\nimport { DOCUMENT } from '@angular/common';\n\n@Directive({\n  selector: '[formlyAttributes]',\n  host: {\n    '(focus)': 'onFocus($event)',\n    '(blur)': 'onBlur($event)',\n    '(change)': 'onChange($event)',\n  },\n})\nexport class FormlyAttributes implements OnChanges, DoCheck, OnDestroy {\n  @Input('formlyAttributes') field: FormlyFieldConfig;\n\n  private document: Document;\n  private uiAttributesCache: any = {};\n  private uiAttributes = [\n    ...FORMLY_VALIDATORS,\n    'tabindex',\n    'placeholder',\n    'readonly',\n    'disabled',\n    'step',\n  ];\n\n  /**\n   * HostBinding doesn't register listeners conditionally which may produce some perf issues.\n   *\n   * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1991\n   */\n  private uiEvents = {\n    listeners: [],\n    events: [\n      'click',\n      'keyup',\n      'keydown',\n      'keypress',\n    ],\n  };\n\n  get to(): FormlyTemplateOptions { return this.field.templateOptions || {}; }\n\n  private get fieldAttrElements() { return (this.field && this.field['_attrElements']) || []; }\n\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    this.document = _document;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      ['id', 'name'].forEach(attr => {\n        this.field[attr] && this.setAttribute(attr, this.field[attr]);\n      });\n\n      this.uiEvents.listeners.forEach(listener => listener());\n      this.uiEvents.events.forEach(eventName => {\n        if (this.to && this.to[eventName]) {\n          this.uiEvents.listeners.push(\n            this.renderer.listen(\n              this.elementRef.nativeElement,\n              eventName,\n              (e) => this.to[eventName](this.field, e),\n            ),\n          );\n        }\n      });\n\n      if (this.to && this.to.attributes) {\n        wrapProperty(this.to, 'attributes', ({ currentValue, previousValue }) => {\n          if (previousValue) {\n            Object.keys(previousValue).forEach(attr => this.removeAttribute(attr));\n          }\n\n          if (currentValue) {\n            Object.keys(currentValue).forEach(attr => this.setAttribute(attr, currentValue[attr]));\n          }\n        });\n      }\n\n      this.attachAttrElement();\n      if (this.fieldAttrElements.length === 1) {\n        wrapProperty(this.field, 'focus', ({ currentValue }) => {\n          const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n          if (!element) {\n            return;\n          }\n\n          this.focusElement(element, currentValue);\n        });\n      }\n    }\n  }\n\n  /**\n   * We need to re-evaluate all the attributes on every change detection cycle, because\n   * by using a HostBinding we run into certain edge cases. This means that whatever logic\n   * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n   *\n   * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n   * Material issue: https://github.com/angular/components/issues/14024\n   */\n  ngDoCheck() {\n    this.uiAttributes.forEach(attr => {\n      const value = this.to[attr];\n      if (this.uiAttributesCache[attr] !== value) {\n        this.uiAttributesCache[attr] = value;\n        if (value || value === 0) {\n          this.setAttribute(attr, value === true ? attr : `${value}`);\n        } else {\n          this.removeAttribute(attr);\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.uiEvents.listeners.forEach(listener => listener());\n    this.detachAttrElement();\n  }\n\n  focusElement(element, value: boolean) {\n    if (!element.focus) {\n      return;\n    }\n\n    const isFocused = !!this.document.activeElement\n      && this.fieldAttrElements\n        .some(element => this.document.activeElement === element || element.contains(this.document.activeElement));\n\n    if (value && !isFocused) {\n      element.focus();\n    } else if (!value && isFocused) {\n      element.blur();\n    }\n  }\n\n  onFocus($event: any) {\n    this.field['___$focus'] = true;\n    if (this.to.focus) {\n      this.to.focus(this.field, $event);\n    }\n  }\n\n  onBlur($event: any) {\n    this.field['___$focus'] = false;\n    if (this.to.blur) {\n      this.to.blur(this.field, $event);\n    }\n  }\n\n  onChange($event: any) {\n    if (this.to.change) {\n      this.to.change(this.field, $event);\n    }\n\n    if (this.field.formControl) {\n      this.field.formControl.markAsDirty();\n    }\n  }\n\n  private attachAttrElement() {\n    if (this.field['_attrElements']) {\n      this.field['_attrElements'].push(this.elementRef.nativeElement);\n    } else {\n      defineHiddenProp(this.field, '_attrElements', [this.elementRef.nativeElement]);\n    }\n  }\n\n  private detachAttrElement() {\n    const index = this.fieldAttrElements.findIndex(element => element !== this.elementRef.nativeElement);\n    if (index !== -1) {\n      this.field['_attrElements'].splice(index, 1);\n    }\n  }\n\n  private setAttribute(attr: string, value: string) {\n    this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n  }\n\n  private removeAttribute(attr: string) {\n    this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n  }\n}\n","import { Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldType<F extends FormlyFieldConfig = FormlyFieldConfig> {\n  @Input() field: F;\n  defaultOptions?: F;\n\n  @Input()\n  get model() { return this.field.model; }\n  set model(m: any) { console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get form() { return <FormGroup> this.field.parent.formControl; }\n  set form(form) { console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get options() { return this.field.options; }\n  set options(options: F['options']) { console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  get key() { return this.field.key; }\n\n  get formControl() { return this.field.formControl; }\n\n  get to() { return this.field.templateOptions || {}; }\n\n  get showError(): boolean { return this.options.showError(this); }\n\n  get id(): string { return this.field.id; }\n\n  get formState() { return this.options.formState || {}; }\n}\n\n/**\n * @deprecated use `FieldType` instead\n */\nexport abstract class Field extends FieldType {\n  constructor() {\n    super();\n    console.warn(`NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.`);\n  }\n}\n","import { FormArray, FormGroup, FormControl, AbstractControl } from '@angular/forms';\nimport { FormlyFieldConfig } from '../../core';\nimport { getKeyPath, getFieldValue, isNullOrUndefined, defineHiddenProp, wrapProperty, assignModelValue, isUndefined } from '../../utils';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\n\nexport function unregisterControl(field: FormlyFieldConfig, emitEvent = false) {\n  const form = field.formControl.parent as FormArray | FormGroup;\n  if (!form) {\n    return;\n  }\n\n  const control = field.formControl;\n  const opts = { emitEvent };\n  if (form instanceof FormArray) {\n    const key = form.controls.findIndex(c => c === control);\n    if (key !== -1) {\n      updateControl(form, opts, () => form.removeAt(key));\n    }\n  } else if (form instanceof FormGroup) {\n    const paths = getKeyPath(field);\n    const key = paths[paths.length - 1];\n    if (form.get([key]) === control) {\n      updateControl(form, opts, () => form.removeControl(key));\n    }\n  }\n\n  control.setParent(null);\n  if (field['autoClear']) {\n    if (field.parent.model) {\n      delete field.parent.model[field.key];\n    }\n    control.reset(\n      { value: undefined, disabled: control.disabled },\n      { emitEvent: field.fieldGroup ? false : emitEvent, onlySelf: true },\n    );\n  }\n}\n\nexport function findControl(field: FormlyFieldConfig): AbstractControl {\n  if (field.formControl) {\n    return field.formControl;\n  }\n\n  const form = field.parent.formControl as FormGroup;\n\n  return form ? form.get(getKeyPath(field)) : null;\n}\n\nexport function registerControl(field: FormlyFieldConfigCache, control?: any, emitEvent = false) {\n  control = control || field.formControl;\n  if (!control['_fields']) {\n    defineHiddenProp(control, '_fields', []);\n  }\n  if (!control['_fields'].includes(field)) {\n    control['_fields'].push(field);\n  }\n\n  if (!field.formControl && control) {\n    defineHiddenProp(field, 'formControl', control);\n\n    field.templateOptions.disabled = !!field.templateOptions.disabled;\n    wrapProperty(field.templateOptions, 'disabled', ({ firstChange, currentValue }) => {\n      if (!firstChange) {\n        currentValue ? field.formControl.disable() : field.formControl.enable();\n      }\n    });\n    if (control.registerOnDisabledChange) {\n      control.registerOnDisabledChange(\n        (value: boolean) => field.templateOptions['___$disabled'] = value,\n      );\n    }\n  }\n\n  let parent = field.parent.formControl as FormGroup;\n  if (!parent) {\n    return;\n  }\n\n  const paths = getKeyPath(field);\n  if (!parent['_formlyControls']) {\n    defineHiddenProp(parent, '_formlyControls', {});\n  }\n  parent['_formlyControls'][paths.join('.')] = control;\n\n  for (let i = 0; i < (paths.length - 1); i++) {\n    const path = paths[i];\n    if (!parent.get([path])) {\n      registerControl({\n        key: path,\n        formControl: new FormGroup({}),\n        parent: { formControl: parent },\n      });\n    }\n\n    parent = <FormGroup> parent.get([path]);\n  }\n\n  if (field['autoClear'] && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n    assignModelValue(field.parent.model, getKeyPath(field), field.defaultValue);\n  }\n\n  const value = getFieldValue(field);\n  if (\n    !(isNullOrUndefined(control.value) && isNullOrUndefined(value))\n    && control.value !== value\n    && control instanceof FormControl\n  ) {\n    control.patchValue(value);\n  }\n  const key = paths[paths.length - 1];\n  if (!field._hide && parent.get([key]) !== control) {\n    updateControl(\n      parent,\n      { emitEvent },\n      () => parent.setControl(key, control),\n    );\n  }\n}\n\nfunction updateControl(form: FormGroup|FormArray, opts: { emitEvent: boolean }, action: Function) {\n  /**\n   *  workaround for https://github.com/angular/angular/issues/27679\n   */\n  if (form instanceof FormGroup && !form['__patchForEachChild']) {\n    defineHiddenProp(form, '__patchForEachChild', true);\n    (form as any)._forEachChild = (cb: Function) => {\n      Object\n        .keys(form.controls)\n        .forEach(k => form.controls[k] && cb(form.controls[k], k));\n    };\n  }\n\n  /**\n   * workaround for https://github.com/angular/angular/issues/20439\n   */\n  const updateValueAndValidity = form.updateValueAndValidity.bind(form);\n  if (opts.emitEvent === false) {\n    form.updateValueAndValidity = (opts) => {\n      updateValueAndValidity({ ...(opts || {}), emitEvent: false });\n    };\n  }\n\n  action();\n\n  if (opts.emitEvent === false) {\n    form.updateValueAndValidity = updateValueAndValidity;\n  }\n}","import { Inject, Optional } from '@angular/core';\nimport { FormArray } from '@angular/forms';\nimport { FieldType } from './field.type';\nimport { clone, isNullOrUndefined, assignModelValue, getKeyPath } from '../utils';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\nimport { FORMLY_CONFIG, FormlyExtension } from '../services/formly.config';\nimport { registerControl, unregisterControl } from '../extensions/field-form/utils';\n\nexport abstract class FieldArrayType<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> implements FormlyExtension {\n  formControl: FormArray;\n  defaultOptions: any = {\n    defaultValue: [],\n  };\n\n  constructor(@Inject(FORMLY_CONFIG) @Optional() builder?: FormlyFormBuilder) {\n    super();\n\n    if (builder instanceof FormlyFormBuilder) {\n      console.warn(`NgxFormly: passing 'FormlyFormBuilder' to '${this.constructor.name}' type is not required anymore, you may remove it!`);\n    }\n  }\n\n  onPopulate(field: FormlyFieldConfig) {\n    if (!field.formControl) {\n      registerControl(field, new FormArray([], { updateOn: field.modelOptions.updateOn }));\n    }\n\n    field.fieldGroup = field.fieldGroup || [];\n\n    const length = field.model ? field.model.length : 0;\n    if (field.fieldGroup.length > length) {\n      for (let i = field.fieldGroup.length - 1; i >= length; --i) {\n        unregisterControl(field.fieldGroup[i]);\n        field.fieldGroup.splice(i, 1);\n      }\n    }\n\n    for (let i = field.fieldGroup.length; i < length; i++) {\n      const f = { ...clone(field.fieldArray), key: `${i}` };\n      field.fieldGroup.push(f);\n    }\n  }\n\n  add(i?: number, initialModel?: any) {\n    i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\n    if (!this.model) {\n      assignModelValue(this.field.parent.model, getKeyPath(this.field), []);\n    }\n\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n\n    (<any> this.options)._buildForm(true);\n    this.formControl.markAsDirty();\n  }\n\n  remove(i: number) {\n    this.model.splice(i, 1);\n    unregisterControl(this.field.fieldGroup[i], true);\n    this.field.fieldGroup.splice(i, 1);\n    this.field.fieldGroup.forEach((f, key) => f.key = `${key}`);\n\n    (<any> this.options)._buildForm(true);\n    this.formControl.markAsDirty();\n  }\n}\n","import { ViewContainerRef, ViewChild } from '@angular/core';\nimport { FieldType } from './field.type';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldWrapper<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> {\n  // TODO: remove `any`, once dropping angular `V7` support.\n  @ViewChild('fieldComponent', <any>{ read: ViewContainerRef, static: false }) fieldComponent: ViewContainerRef;\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-group',\n  template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n  host: {\n    '[class]': 'field.fieldGroupClassName || \"\"',\n  },\n})\nexport class FormlyGroup extends FieldType {\n  defaultOptions = {\n    defaultValue: {},\n  };\n}\n","import { Component, Input, ChangeDetectionStrategy, OnChanges } from '@angular/core';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\nimport { isObject } from '../utils';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-validation-message',\n  template: `{{ errorMessage$ | async }}`,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FormlyValidationMessage implements OnChanges {\n  @Input() field: FormlyFieldConfig;\n  errorMessage$: Observable<string>;\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  ngOnChanges() {\n    this.errorMessage$ = this.field.formControl.statusChanges.pipe(\n      startWith(null),\n      map(() => this.errorMessage),\n    );\n  }\n\n  get errorMessage(): string {\n    const fieldForm = this.field.formControl;\n    for (let error in fieldForm.errors) {\n      if (fieldForm.errors.hasOwnProperty(error)) {\n        let message: string | Function = this.formlyConfig.getValidatorMessage(error);\n\n        if (isObject(fieldForm.errors[error])) {\n          if (fieldForm.errors[error].errorPath) {\n            return;\n          }\n\n          if (fieldForm.errors[error].message) {\n            message = fieldForm.errors[error].message;\n          }\n        }\n\n        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n          message = this.field.validation.messages[error];\n        }\n\n        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n          message = this.field.validators[error].message;\n        }\n\n        if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {\n          message = this.field.asyncValidators[error].message;\n        }\n\n        if (typeof message === 'function') {\n          return message(fieldForm.errors[error], this.field);\n        }\n\n        return message;\n      }\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-template',\n  template: `<div [innerHtml]=\"field.template\"></div>`,\n})\nexport class FormlyTemplateType extends FieldType {}\n","export function evalStringExpression(expression: string, argNames: string[]) {\n  try {\n    if (expression.indexOf('this.field') !== -1) {\n      console.warn(`NgxFormly: using 'this.field' in expressionProperties is deprecated since v5.1, use 'field' instead.`);\n    }\n\n    return Function(...argNames, `return ${expression};`) as any;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpressionValueSetter(expression: string, argNames: string[]) {\n  try {\n    return Function(...argNames, `${expression} = expressionValue;`) as (value: any) => void;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpression(expression: string | Function | boolean, thisArg: any, argVal: any[]): any {\n  if (expression instanceof Function) {\n    return expression.apply(thisArg, argVal);\n  } else {\n    return expression ? true : false;\n  }\n}\n","import { FormlyFieldConfig, FormlyValueChangeEvent, FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { isObject, isNullOrUndefined, isFunction, defineHiddenProp, wrapProperty } from '../../utils';\nimport { evalExpression, evalStringExpression, evalExpressionValueSetter } from './utils';\nimport { Observable } from 'rxjs';\nimport { FormlyExtension } from '../../services/formly.config';\nimport { unregisterControl, registerControl } from '../field-form/utils';\n\n/** @experimental */\nexport class FieldExpressionExtension implements FormlyExtension {\n  prePopulate(field: FormlyFieldConfigCache) {\n    if (field.parent || field.options._checkField) {\n      return;\n    }\n\n    field.options._checkField = (f, ignoreCache) => {\n      this._checkField(f, ignoreCache);\n\n      field.options._hiddenFieldsForCheck\n        .sort(f => f.hide ? -1 : 1)\n        .forEach(f => this.toggleFormControl(f, f.hide));\n\n      field.options._hiddenFieldsForCheck = [];\n    };\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (!field.parent || field._expressionProperties) {\n      return;\n    }\n\n    // cache built expression\n    defineHiddenProp(field, '_expressionProperties', {});\n\n    if (field.expressionProperties) {\n      for (const key in field.expressionProperties) {\n        const expressionProperty = field.expressionProperties[key],\n          expressionValueSetter = evalExpressionValueSetter(\n            `field.${key}`,\n            ['expressionValue', 'model', 'field'],\n          );\n\n        if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {\n          field._expressionProperties[key] = {\n            expression: this._evalExpression(\n              expressionProperty,\n              field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled')\n                ? () => field.parent.templateOptions.disabled\n                : undefined,\n            ),\n            expressionValueSetter,\n          };\n          if (key === 'templateOptions.disabled') {\n            Object.defineProperty(field._expressionProperties[key], 'expressionValue', {\n              get: () => field.templateOptions.disabled,\n              set: () => { },\n              enumerable: true,\n              configurable: true,\n            });\n          }\n        } else if (expressionProperty instanceof Observable) {\n          const subscription = (expressionProperty as Observable<any>)\n            .subscribe(v => evalExpression(expressionValueSetter, { field }, [v, field.model, field]));\n\n          const onDestroy = field.hooks.onDestroy;\n          field.hooks.onDestroy = (field) => {\n            onDestroy && onDestroy(field);\n            subscription.unsubscribe();\n          };\n        }\n      }\n    }\n\n    if (field.hideExpression) {\n      // delete hide value in order to force re-evaluate it in FormlyFormExpression.\n      delete field.hide;\n\n      let parent = field.parent;\n      while (parent && !parent.hideExpression) {\n        parent = parent.parent;\n      }\n\n      field.hideExpression = this._evalExpression(\n        field.hideExpression,\n        parent && parent.hideExpression ? () => parent.hide : undefined,\n      );\n    } else {\n      wrapProperty(field, 'hide', ({ currentValue, firstChange }) => {\n        field._hide = currentValue;\n        if (!firstChange || (firstChange && currentValue === true)) {\n          field.options._hiddenFieldsForCheck.push(field);\n        }\n      });\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    if (field.parent) {\n      return;\n    }\n\n    field.options._checkField(field, true);\n  }\n\n  private _evalExpression(expression, parentExpression?) {\n    expression = expression || (() => false);\n    if (typeof expression === 'string') {\n      expression = evalStringExpression(expression, ['model', 'formState', 'field']);\n    }\n\n    return parentExpression\n      ? (model: any, formState: any, field: FormlyFieldConfig) => parentExpression() || expression(model, formState, field)\n      : expression;\n  }\n\n  private _checkField(field: FormlyFieldConfigCache, ignoreCache = false) {\n    let markForCheck = false;\n    field.fieldGroup.forEach(f => {\n      this.checkFieldExpressionChange(f, ignoreCache) && (markForCheck = true);\n      if (this.checkFieldVisibilityChange(f, ignoreCache)) {\n        field.options._hiddenFieldsForCheck.push(f);\n        markForCheck = true;\n      }\n\n      if (f.fieldGroup && f.fieldGroup.length > 0) {\n        this._checkField(f, ignoreCache);\n      }\n    });\n\n    if (markForCheck && field.options && field.options._markForCheck) {\n      field.options._markForCheck(field);\n    }\n  }\n\n  private checkFieldExpressionChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || !field._expressionProperties) {\n      return false;\n    }\n\n    let markForCheck = false;\n    const expressionProperties = field._expressionProperties;\n\n    for (const key in expressionProperties) {\n      let expressionValue = evalExpression(expressionProperties[key].expression, { field }, [field.model, field.options.formState, field]);\n      if (key === 'templateOptions.disabled') {\n        expressionValue = !!expressionValue;\n      }\n\n      if (\n        ignoreCache || (\n          expressionProperties[key].expressionValue !== expressionValue\n          && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue))\n        )\n      ) {\n        markForCheck = true;\n        expressionProperties[key].expressionValue = expressionValue;\n        evalExpression(\n          expressionProperties[key].expressionValueSetter,\n          { field },\n          [expressionValue, field.model, field],\n        );\n\n        if (key === 'templateOptions.disabled' && field.key) {\n          this.setDisabledState(field, expressionValue);\n        }\n\n        if (key.indexOf('model.') === 0) {\n          const path = key.replace(/^model\\./, ''),\n            control = field.key && key === path ? field.formControl : field.parent.formControl.get(path);\n\n          if (\n            control\n            && !(isNullOrUndefined(control.value) && isNullOrUndefined(expressionValue))\n            && control.value !== expressionValue\n          ) {\n            control.patchValue(expressionValue, { emitEvent: false });\n          }\n        }\n      }\n    }\n\n    return markForCheck;\n  }\n\n  private checkFieldVisibilityChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || isNullOrUndefined(field.hideExpression)) {\n      return false;\n    }\n\n    const hideExpressionResult: boolean = !!evalExpression(\n      field.hideExpression,\n      { field },\n      [field.model, field.options.formState, field],\n    );\n    let markForCheck = false;\n    if (hideExpressionResult !== field.hide || ignoreCache) {\n      markForCheck = true;\n      // toggle hide\n      field.hide = hideExpressionResult;\n      field.templateOptions.hidden = hideExpressionResult;\n    }\n\n    return markForCheck;\n  }\n\n  private setDisabledState(field: FormlyFieldConfig, value: boolean) {\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.expressionProperties || !f.expressionProperties.hasOwnProperty('templateOptions.disabled'))\n        .forEach(f => this.setDisabledState(f, value));\n    }\n\n    if (field.key && field.templateOptions.disabled !== value) {\n      field.templateOptions.disabled = value;\n    }\n  }\n\n  private toggleFormControl(field: FormlyFieldConfigCache, hide: boolean) {\n    if (field.formControl && field.key) {\n      defineHiddenProp(field, '_hide', !!(hide || field.hide));\n      const c = field.formControl;\n      if (c['_fields'].length > 1) {\n        c.updateValueAndValidity({ emitEvent: false });\n      }\n\n      hide === true && c['_fields'].every(f => !!f._hide)\n        ? unregisterControl(field)\n        : registerControl(field);\n    }\n\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.hideExpression)\n        .forEach(f => this.toggleFormControl(f, hide));\n    }\n\n    if (field.options.fieldChanges) {\n      field.options.fieldChanges.next(<FormlyValueChangeEvent> { field: field, type: 'hidden', value: hide });\n    }\n  }\n}\n","import { FormlyExtension, FieldValidatorFn, FormlyConfig } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { isObject, FORMLY_VALIDATORS, defineHiddenProp, isPromise, wrapProperty } from '../../utils';\n\n/** @experimental */\nexport class FieldValidationExtension implements FormlyExtension {\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (!field.parent || !field.key) {\n      return;\n    }\n\n    this.initFieldValidation(field, 'validators');\n    this.initFieldValidation(field, 'asyncValidators');\n  }\n\n  private initFieldValidation(field: FormlyFieldConfigCache, type: 'validators' | 'asyncValidators') {\n    const validators: ValidatorFn[] = type === 'validators' ? [this.getPredefinedFieldValidation(field)] : [];\n    if (field[type]) {\n      for (const validatorName in field[type]) {\n        if (validatorName === 'validation' && !Array.isArray(field[type].validation)) {\n          field[type].validation = [field[type].validation];\n          console.warn(`NgxFormly(${field.key}): passing a non array value to the 'validation' is deprecated, pass an array instead`);\n        }\n\n        validatorName === 'validation'\n          ? validators.push(...field[type].validation.map(v => this.wrapNgValidatorFn(field, v)))\n          : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName))\n        ;\n      }\n    }\n\n    defineHiddenProp(\n      field,\n      '_' + type,\n      type === 'validators' ? Validators.compose(validators) : Validators.composeAsync(validators as any),\n    );\n  }\n\n  private getPredefinedFieldValidation(field: FormlyFieldConfigCache): ValidatorFn {\n    let VALIDATORS = [];\n    FORMLY_VALIDATORS.forEach(opt => wrapProperty(field.templateOptions, opt, ({ currentValue, firstChange }) => {\n      VALIDATORS = VALIDATORS.filter(o => o !== opt);\n      if (currentValue != null && currentValue !== false) {\n        VALIDATORS.push(opt);\n      }\n      if (!firstChange && field.formControl) {\n        field.formControl.updateValueAndValidity({ emitEvent: false });\n      }\n    }));\n\n    return (control: AbstractControl) => {\n      if (VALIDATORS.length === 0) {\n        return null;\n      }\n\n      return Validators.compose(VALIDATORS.map(opt => () => {\n        const value = field.templateOptions[opt];\n        switch (opt) {\n          case 'required':\n            return Validators.required(control);\n          case 'pattern':\n            return Validators.pattern(value)(control);\n          case 'minLength':\n            return Validators.minLength(value)(control);\n          case 'maxLength':\n            return Validators.maxLength(value)(control);\n          case 'min':\n            return Validators.min(value)(control);\n          case 'max':\n            return Validators.max(value)(control);\n        }\n      }))(control);\n    };\n  }\n\n  private wrapNgValidatorFn(field: FormlyFieldConfigCache, validator: string | FieldValidatorFn, validatorName?: string) {\n    return (control: AbstractControl) => {\n      let validatorFn = validator as FieldValidatorFn;\n      if (typeof validator === 'string') {\n        validatorFn = this.formlyConfig.getValidator(validator).validation;\n      }\n      if (isObject(validator)) {\n        validatorFn = (validator as any).expression;\n      }\n\n      const isValid = validatorFn(control, field);\n      if (validatorName) {\n        if (isPromise(isValid)) {\n          return isValid.then((result: boolean) => {\n            // workaround for https://github.com/angular/angular/issues/13200\n            if (field.options && field.options._markForCheck) {\n              field.options._markForCheck(field);\n            }\n\n            return this.handleResult(field, result, { validatorName, validator });\n          });\n        }\n\n        return this.handleResult(field, isValid, { validatorName, validator });\n      }\n\n      return isValid;\n    };\n  }\n\n  private handleResult(field: FormlyFieldConfigCache, isValid, { validatorName, validator }) {\n    if (isObject(validator) && field.formControl && validator.errorPath) {\n      const control = field.formControl.get(validator.errorPath);\n      if (control) {\n        const controlErrors = (control.errors || {});\n        if (!isValid) {\n          control.setErrors({ ...controlErrors, [validatorName]: { message: validator.message } });\n        } else {\n          delete controlErrors[validatorName];\n          control.setErrors(Object.keys(controlErrors).length === 0 ? null : controlErrors);\n        }\n      }\n\n      return isValid ? null : { [validatorName]: { errorPath: validator.errorPath } };\n    }\n\n    return isValid ? null : { [validatorName]: true };\n  }\n}\n","import { FormlyExtension } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { FormGroup, FormControl, AbstractControlOptions, Validators } from '@angular/forms';\nimport { getFieldValue, defineHiddenProp } from '../../utils';\nimport { registerControl, findControl } from './utils';\nimport { of } from 'rxjs';\n\n/** @experimental */\nexport class FieldFormExtension implements FormlyExtension {\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (field.key) {\n      this.addFormControl(field);\n    }\n\n    if (field.parent && field.fieldGroup && !field.key) {\n      defineHiddenProp(field, 'formControl', field.parent.formControl);\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    if (field.parent) {\n      return;\n    }\n\n    const updateValidity = this.setValidators(field);\n    updateValidity && (field.formControl as any)._updateTreeValidity();\n  }\n\n  private addFormControl(field: FormlyFieldConfigCache) {\n    let control = findControl(field);\n    if (!control) {\n      const controlOptions: AbstractControlOptions = { updateOn: field.modelOptions.updateOn };\n      const value = getFieldValue(field);\n      if (field._componentFactory && field._componentFactory.component && field._componentFactory.component.createControl) {\n        const component = field._componentFactory.component;\n        console.warn(`NgxFormly: '${component.name}::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.`);\n        control = component.createControl(value, field);\n      } else if (field.fieldGroup) {\n        // TODO: move to postPopulate\n        control = new FormGroup({}, controlOptions);\n      } else {\n        control = new FormControl(value, controlOptions);\n      }\n    }\n\n    registerControl(field, control);\n  }\n\n  private setValidators(field: FormlyFieldConfigCache) {\n    let updateValidity = false;\n    if (field.key) {\n      const {\n        formControl: c,\n        templateOptions: { disabled },\n      } = field;\n\n      if (disabled && c.enabled) {\n        c.disable({ emitEvent: false, onlySelf: true });\n        updateValidity = true;\n      }\n\n      if (null === c.validator || null === c.asyncValidator) {\n        c.setValidators(() => {\n          const fields: FormlyFieldConfigCache[] = c['_fields'].length === 1\n            ? c['_fields']\n            : c['_fields'].filter(f => !f._hide);\n\n          const v = Validators.compose(fields.map(f => f._validators));\n\n          return v ? v(c) : null;\n        });\n        c.setAsyncValidators(() => {\n          const fields: FormlyFieldConfigCache[] = c['_fields'].length === 1\n            ? c['_fields']\n            : c['_fields'].filter(f => !f._hide);\n\n          const v = Validators.composeAsync(fields.map(f => f._asyncValidators));\n\n          return v ? v(c) : of(null);\n        });\n\n        if (!c.parent) {\n          c.updateValueAndValidity({ emitEvent: false });\n        } else {\n          updateValidity = true;\n        }\n      }\n    }\n\n    (field.fieldGroup || []).forEach(f => this.setValidators(f) && (updateValidity = true));\n\n    return updateValidity;\n  }\n}\n","import { FormlyExtension, FormlyConfig, TemplateManipulators } from '../../services/formly.config';\nimport { FormlyFieldConfigCache, FormlyFieldConfig } from '../../components/formly.field.config';\nimport { FormGroup } from '@angular/forms';\nimport { getFieldId, assignModelValue, isUndefined, getFieldValue, reverseDeepMerge, getKeyPath } from '../../utils';\n\n/** @experimental */\nexport class CoreExtension implements FormlyExtension {\n  private formId = 0;\n  constructor(private formlyConfig: FormlyConfig) { }\n\n  prePopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).prePopulate();\n    if (field.parent) {\n      return;\n    }\n\n    const fieldTransforms = (field.options && field.options.fieldTransform) || this.formlyConfig.extras.fieldTransform;\n    (Array.isArray(fieldTransforms) ? fieldTransforms : [fieldTransforms]).forEach(fieldTransform => {\n      if (fieldTransform) {\n        console.warn(`NgxFormly: fieldTransform is deprecated since v5.0, use custom extension instead.`);\n        const fieldGroup = fieldTransform(field.fieldGroup, field.model, <FormGroup>field.formControl, field.options);\n        if (!fieldGroup) {\n          throw new Error('fieldTransform must return an array of fields');\n        }\n      }\n    });\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    this.initFieldOptions(field);\n    this.getFieldComponentInstance(field).onPopulate();\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f, index) => {\n        Object.defineProperty(f, 'parent', { get: () => field, configurable: true });\n        Object.defineProperty(f, 'index', { get: () => index, configurable: true });\n        this.formId++;\n      });\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).postPopulate();\n  }\n\n  private initFieldOptions(field: FormlyFieldConfigCache) {\n    const root = <FormlyFieldConfigCache> field.parent;\n    if (!root) {\n      return;\n    }\n\n    Object.defineProperty(field, 'form', { get: () => root.formControl, configurable: true });\n    Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n    Object.defineProperty(field, 'model', {\n      get: () => field.key && field.fieldGroup ? getFieldValue(field) : root.model,\n      configurable: true,\n    });\n\n    reverseDeepMerge(field, {\n      id: getFieldId(`formly_${this.formId}`, field, field['index']),\n      hooks: {},\n      modelOptions: {},\n      templateOptions: !field.type || !field.key ? {} : {\n        label: '',\n        placeholder: '',\n        focus: false,\n        disabled: false,\n      },\n    });\n\n    if (field.lifecycle) {\n      console.warn(`NgxFormly: 'lifecycle' is deprecated since v5.0, use 'hooks' instead.`);\n    }\n\n    if (\n      field.type !== 'formly-template'\n      && (\n        field.hasOwnProperty('template')\n        || (field.expressionProperties && field.expressionProperties.template)\n      )\n    ) {\n      if (field.type) {\n        console.warn(`NgxFormly: passing 'type' property is not allowed when 'template' is set.`);\n      }\n      field.type = 'formly-template';\n    }\n\n    if (!field.type && field.fieldGroup) {\n      field.type = 'formly-group';\n    }\n\n    if (field.type) {\n      this.formlyConfig.getMergedField(field);\n    }\n\n    if (!field['autoClear'] && !isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n      assignModelValue(root.model, getKeyPath(field), field.defaultValue);\n    }\n\n    this.initFieldWrappers(field);\n  }\n\n  private initFieldWrappers(field: FormlyFieldConfig) {\n    field.wrappers = field.wrappers || [];\n    const fieldTemplateManipulators: TemplateManipulators = {\n      preWrapper: [],\n      postWrapper: [],\n      ...(field.templateOptions.templateManipulators || {}),\n    };\n\n    field.wrappers = [\n      ...this.formlyConfig.templateManipulators.preWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.preWrapper.map(m => m(field)),\n      ...field.wrappers,\n      ...this.formlyConfig.templateManipulators.postWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.postWrapper.map(m => m(field)),\n    ].filter((el, i, a) => el && i === a.indexOf(el));\n  }\n\n  private getFieldComponentInstance(field: FormlyFieldConfigCache) {\n    const componentRef = this.formlyConfig.createComponent(field);\n    const instance: FormlyExtension = componentRef ? componentRef.instance as any : {};\n\n    return {\n      prePopulate: () => instance.prePopulate && instance.prePopulate(field),\n      onPopulate: () => instance.onPopulate && instance.onPopulate(field),\n      postPopulate: () => instance.postPopulate && instance.postPopulate(field),\n    };\n  }\n}\n","import { NgModule, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS, Inject, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormlyForm } from './components/formly.form';\nimport { FormlyField } from './components/formly.field';\nimport { FormlyAttributes } from './components/formly.attributes';\nimport { FormlyConfig, ConfigOption, FORMLY_CONFIG } from './services/formly.config';\nimport { FormlyFormBuilder } from './services/formly.form.builder';\nimport { FormlyGroup } from './templates/formly.group';\nimport { FormlyValidationMessage } from './templates/formly.validation-message';\nimport { FormlyTemplateType } from './templates/field-template.type';\n\nimport { FieldExpressionExtension } from './extensions/field-expression/field-expression';\nimport { FieldValidationExtension } from './extensions/field-validation/field-validation';\nimport { FieldFormExtension } from './extensions/field-form/field-form';\nimport { CoreExtension } from './extensions/core/core';\n\nexport function defaultFormlyConfig(formlyConfig: FormlyConfig): ConfigOption {\n  return {\n    types: [\n      { name: 'formly-group', component: FormlyGroup },\n      { name: 'formly-template', component: FormlyTemplateType },\n    ],\n    extensions: [\n      { name: 'core', extension: new CoreExtension(formlyConfig) },\n      { name: 'field-validation', extension: new FieldValidationExtension(formlyConfig) },\n      { name: 'field-form', extension: new FieldFormExtension() },\n      { name: 'field-expression', extension: new FieldExpressionExtension() },\n    ],\n  };\n}\n\n@NgModule({\n  declarations: [\n    FormlyForm,\n    FormlyField,\n    FormlyAttributes,\n    FormlyGroup,\n    FormlyValidationMessage,\n    FormlyTemplateType,\n  ],\n  entryComponents: [FormlyGroup, FormlyTemplateType],\n  exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  imports: [CommonModule],\n})\nexport class FormlyModule {\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders<FormlyModule> {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyConfig,\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  static forChild(config: ConfigOption = {}): ModuleWithProviders<FormlyModule> {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  constructor(\n    configService: FormlyConfig,\n    @Optional() @Inject(FORMLY_CONFIG) configs: ConfigOption[] = [],\n  ) {\n    if (!configs) {\n      return;\n    }\n\n    configs.forEach(config => configService.addConfig(config));\n  }\n}\n"]}