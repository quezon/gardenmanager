/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Optional, EventEmitter, Output, Attribute, ViewChild, ElementRef, NgZone } from '@angular/core';
import { FormGroup, FormGroupDirective, FormControl } from '@angular/forms';
import { FormlyFormBuilder } from '../services/formly.form.builder';
import { FormlyConfig } from '../services/formly.config';
import { assignModelValue, isNullOrUndefined, wrapProperty, clone, defineHiddenProp, getKeyPath } from '../utils';
import { Subject } from 'rxjs';
import { debounceTime, switchMap, distinctUntilChanged, take } from 'rxjs/operators';
var FormlyForm = /** @class */ (function () {
    function FormlyForm(formlyBuilder, formlyConfig, ngZone, 
    // tslint:disable-next-line
    immutable, parentFormGroup) {
        var _this = this;
        this.formlyBuilder = formlyBuilder;
        this.formlyConfig = formlyConfig;
        this.ngZone = ngZone;
        this.parentFormGroup = parentFormGroup;
        this.modelChange = new EventEmitter();
        this.immutable = false;
        this.modelChangeSubs = [];
        this.modelChange$ = new Subject();
        this.modelChangeSub = this.modelChange$.pipe(switchMap((/**
         * @return {?}
         */
        function () { return _this.ngZone.onStable.asObservable().pipe(take(1)); }))).subscribe((/**
         * @return {?}
         */
        function () {
            _this.checkExpressionChange();
            _this.modelChange.emit(clone(_this.model));
        }));
        if (immutable !== null) {
            console.warn("NgxFormly: passing 'immutable' attribute to 'formly-form' component is deprecated since v5.5, enable immutable mode through NgModule declaration instead.");
        }
        this.immutable = (immutable !== null) || !!formlyConfig.extras.immutable;
    }
    Object.defineProperty(FormlyForm.prototype, "model", {
        get: /**
         * @return {?}
         */
        function () { return this._model || {}; },
        set: /**
         * @param {?} model
         * @return {?}
         */
        function (model) { this._model = this.immutable ? clone(model) : model; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyForm.prototype, "fields", {
        get: /**
         * @return {?}
         */
        function () { return this._fields || []; },
        set: /**
         * @param {?} fields
         * @return {?}
         */
        function (fields) { this._fields = this.immutable ? clone(fields) : fields; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyForm.prototype, "options", {
        get: /**
         * @return {?}
         */
        function () { return this._options; },
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) { this._options = this.immutable ? clone(options) : options; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyForm.prototype, "content", {
        set: /**
         * @param {?} content
         * @return {?}
         */
        function (content) {
            if (content && content.nativeElement.nextSibling) {
                console.warn("NgxFormly: content projection for 'formly-form' component is deprecated since v5.5, you should avoid passing content inside the 'formly-form' tag.");
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormlyForm.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        if (this.formlyConfig.extras.checkExpressionOn === 'changeDetectionCheck') {
            this.checkExpressionChange();
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FormlyForm.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.fields || changes.form || changes.model) {
            this.form = this.form || (new FormGroup({}));
            this.setOptions();
            this.options.updateInitialValue();
            this.clearModelSubscriptions();
            this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);
            this.trackModelChanges(this.fields);
        }
    };
    /**
     * @return {?}
     */
    FormlyForm.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.modelChangeSub.unsubscribe();
        this.clearModelSubscriptions();
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    FormlyForm.prototype.changeModel = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var key = _a.key, value = _a.value, field = _a.field;
        if (value == null
            && field['autoClear']
            && !field.formControl.parent) {
            /** @type {?} */
            var paths = key.split('.');
            /** @type {?} */
            var k = paths.pop();
            /** @type {?} */
            var m = paths.reduce((/**
             * @param {?} model
             * @param {?} path
             * @return {?}
             */
            function (model, path) { return model[path] || {}; }), this.model);
            delete m[k];
        }
        else {
            assignModelValue(this.model, key.split('.'), value);
        }
        this.modelChange$.next();
    };
    /**
     * @return {?}
     */
    FormlyForm.prototype.setOptions = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.options) {
            this.options = {};
        }
        if (!this.options.resetModel) {
            this.options.resetModel = (/**
             * @param {?=} model
             * @return {?}
             */
            function (model) {
                model = clone(isNullOrUndefined(model) ? ((/** @type {?} */ (_this.options)))._initialModel : model);
                if (_this.model) {
                    Object.keys(_this.model).forEach((/**
                     * @param {?} k
                     * @return {?}
                     */
                    function (k) { return delete _this.model[k]; }));
                    Object.assign(_this.model, model || {});
                }
                ((/** @type {?} */ (_this.options)))._buildForm();
                // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form
                // but only when the current component is a root one.
                if (_this.options.parentForm && _this.options.parentForm.control === _this.form) {
                    _this.options.parentForm.resetForm(model);
                }
                else {
                    _this.form.reset(model);
                }
            });
        }
        if (!this.options.parentForm && this.parentFormGroup) {
            defineHiddenProp(this.options, 'parentForm', this.parentFormGroup);
            wrapProperty(this.options.parentForm, 'submitted', (/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var firstChange = _a.firstChange;
                if (!firstChange) {
                    ((/** @type {?} */ (_this.options)))._markForCheck({
                        fieldGroup: _this.fields,
                        model: _this.model,
                        formControl: _this.form,
                        options: _this.options,
                    });
                }
            }));
        }
        if (!this.options.updateInitialValue) {
            this.options.updateInitialValue = (/**
             * @return {?}
             */
            function () { return ((/** @type {?} */ (_this.options)))._initialModel = clone(_this.model); });
        }
        if (!((/** @type {?} */ (this.options)))._buildForm) {
            ((/** @type {?} */ (this.options)))._buildForm = (/**
             * @param {?=} emitModelChange
             * @return {?}
             */
            function (emitModelChange) {
                if (emitModelChange === void 0) { emitModelChange = false; }
                _this.clearModelSubscriptions();
                _this.formlyBuilder.buildForm(_this.form, _this.fields, _this.model, _this.options);
                _this.trackModelChanges(_this.fields);
                if (emitModelChange) {
                    _this.modelChange.emit(clone(_this.model));
                }
            });
        }
    };
    /**
     * @private
     * @return {?}
     */
    FormlyForm.prototype.checkExpressionChange = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.options && ((/** @type {?} */ (this.options)))._checkField) {
            ((/** @type {?} */ (this.options)))._checkField({
                fieldGroup: this.fields,
                model: this.model,
                formControl: this.form,
                options: this.options,
            });
        }
    };
    /**
     * @private
     * @param {?} fields
     * @param {?=} rootKey
     * @return {?}
     */
    FormlyForm.prototype.trackModelChanges = /**
     * @private
     * @param {?} fields
     * @param {?=} rootKey
     * @return {?}
     */
    function (fields, rootKey) {
        var _this = this;
        if (rootKey === void 0) { rootKey = []; }
        fields.forEach((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            if (field.key && !field.fieldGroup) {
                /** @type {?} */
                var control_1 = field.formControl;
                /** @type {?} */
                var valueChanges = control_1.valueChanges.pipe(distinctUntilChanged());
                var _a = field.modelOptions, updateOn = _a.updateOn, debounce = _a.debounce;
                if ((!updateOn || updateOn === 'change') && debounce && debounce.default > 0) {
                    valueChanges = control_1.valueChanges.pipe(debounceTime(debounce.default));
                }
                _this.modelChangeSubs.push(valueChanges.subscribe((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    // workaround for https://github.com/angular/angular/issues/13792
                    if (control_1 instanceof FormControl && control_1['_fields'] && control_1['_fields'].length > 1) {
                        control_1.patchValue(value, { emitEvent: false, onlySelf: true });
                    }
                    if (field.parsers && field.parsers.length > 0) {
                        field.parsers.forEach((/**
                         * @param {?} parserFn
                         * @return {?}
                         */
                        function (parserFn) { return value = parserFn(value); }));
                    }
                    _this.changeModel({ key: tslib_1.__spread(rootKey, getKeyPath(field)).join('.'), value: value, field: field });
                })));
            }
            if (field.fieldGroup && field.fieldGroup.length > 0) {
                _this.trackModelChanges(field.fieldGroup, field.key ? tslib_1.__spread(rootKey, getKeyPath(field)) : rootKey);
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    FormlyForm.prototype.clearModelSubscriptions = /**
     * @private
     * @return {?}
     */
    function () {
        this.modelChangeSubs.forEach((/**
         * @param {?} sub
         * @return {?}
         */
        function (sub) { return sub.unsubscribe(); }));
        this.modelChangeSubs = [];
    };
    FormlyForm.decorators = [
        { type: Component, args: [{
                    selector: 'formly-form',
                    template: "\n    <formly-field *ngFor=\"let field of fields\"\n      hide-deprecation\n      [form]=\"field.form\"\n      [options]=\"field.options\"\n      [model]=\"field.model\"\n      [field]=\"field\">\n    </formly-field>\n    <ng-container #content>\n      <ng-content></ng-content>\n    </ng-container>\n  ",
                    providers: [FormlyFormBuilder]
                }] }
    ];
    /** @nocollapse */
    FormlyForm.ctorParameters = function () { return [
        { type: FormlyFormBuilder },
        { type: FormlyConfig },
        { type: NgZone },
        { type: undefined, decorators: [{ type: Attribute, args: ['immutable',] }] },
        { type: FormGroupDirective, decorators: [{ type: Optional }] }
    ]; };
    FormlyForm.propDecorators = {
        form: [{ type: Input }],
        model: [{ type: Input }],
        fields: [{ type: Input }],
        options: [{ type: Input }],
        modelChange: [{ type: Output }],
        content: [{ type: ViewChild, args: ['content',] }]
    };
    return FormlyForm;
}());
export { FormlyForm };
if (false) {
    /** @type {?} */
    FormlyForm.prototype.form;
    /** @type {?} */
    FormlyForm.prototype.modelChange;
    /**
     * @type {?}
     * @private
     */
    FormlyForm.prototype.immutable;
    /**
     * @type {?}
     * @private
     */
    FormlyForm.prototype._model;
    /**
     * @type {?}
     * @private
     */
    FormlyForm.prototype._fields;
    /**
     * @type {?}
     * @private
     */
    FormlyForm.prototype._options;
    /**
     * @type {?}
     * @private
     */
    FormlyForm.prototype.modelChangeSubs;
    /**
     * @type {?}
     * @private
     */
    FormlyForm.prototype.modelChange$;
    /**
     * @type {?}
     * @private
     */
    FormlyForm.prototype.modelChangeSub;
    /**
     * @type {?}
     * @private
     */
    FormlyForm.prototype.formlyBuilder;
    /**
     * @type {?}
     * @private
     */
    FormlyForm.prototype.formlyConfig;
    /**
     * @type {?}
     * @private
     */
    FormlyForm.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    FormlyForm.prototype.parentFormGroup;
}
//# sourceMappingURL=data:application/json;base64,