/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { getFieldValue, defineHiddenProp } from '../../utils';
import { registerControl, findControl } from './utils';
import { of } from 'rxjs';
/**
 * \@experimental
 */
export class FieldFormExtension {
    /**
     * @param {?} field
     * @return {?}
     */
    onPopulate(field) {
        if (field.key) {
            this.addFormControl(field);
        }
        if (field.parent && field.fieldGroup && !field.key) {
            defineHiddenProp(field, 'formControl', field.parent.formControl);
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    postPopulate(field) {
        if (field.parent) {
            return;
        }
        /** @type {?} */
        const updateValidity = this.setValidators(field);
        updateValidity && ((/** @type {?} */ (field.formControl)))._updateTreeValidity();
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    addFormControl(field) {
        /** @type {?} */
        let control = findControl(field);
        if (!control) {
            /** @type {?} */
            const controlOptions = { updateOn: field.modelOptions.updateOn };
            /** @type {?} */
            const value = getFieldValue(field);
            if (field._componentFactory && field._componentFactory.component && field._componentFactory.component.createControl) {
                /** @type {?} */
                const component = field._componentFactory.component;
                console.warn(`NgxFormly: '${component.name}::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.`);
                control = component.createControl(value, field);
            }
            else if (field.fieldGroup) {
                // TODO: move to postPopulate
                control = new FormGroup({}, controlOptions);
            }
            else {
                control = new FormControl(value, controlOptions);
            }
        }
        registerControl(field, control);
    }
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    setValidators(field) {
        /** @type {?} */
        let updateValidity = false;
        if (field.key) {
            const { formControl: c, templateOptions: { disabled }, } = field;
            if (disabled && c.enabled) {
                c.disable({ emitEvent: false, onlySelf: true });
                updateValidity = true;
            }
            if (null === c.validator || null === c.asyncValidator) {
                c.setValidators((/**
                 * @return {?}
                 */
                () => {
                    /** @type {?} */
                    const fields = c['_fields'].length === 1
                        ? c['_fields']
                        : c['_fields'].filter((/**
                         * @param {?} f
                         * @return {?}
                         */
                        f => !f._hide));
                    /** @type {?} */
                    const v = Validators.compose(fields.map((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => f._validators)));
                    return v ? v(c) : null;
                }));
                c.setAsyncValidators((/**
                 * @return {?}
                 */
                () => {
                    /** @type {?} */
                    const fields = c['_fields'].length === 1
                        ? c['_fields']
                        : c['_fields'].filter((/**
                         * @param {?} f
                         * @return {?}
                         */
                        f => !f._hide));
                    /** @type {?} */
                    const v = Validators.composeAsync(fields.map((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => f._asyncValidators)));
                    return v ? v(c) : of(null);
                }));
                if (!c.parent) {
                    c.updateValueAndValidity({ emitEvent: false });
                }
                else {
                    updateValidity = true;
                }
            }
        }
        (field.fieldGroup || []).forEach((/**
         * @param {?} f
         * @return {?}
         */
        f => this.setValidators(f) && (updateValidity = true)));
        return updateValidity;
    }
}
//# sourceMappingURL=data:application/json;base64,