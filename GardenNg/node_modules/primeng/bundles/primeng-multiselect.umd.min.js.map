{"version":3,"sources":["ng://primeng/multiselect/multiselect.ts"],"names":["MULTISELECT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MultiSelect","multi","MultiSelectItem","this","onClick","EventEmitter","onKeydown","prototype","onOptionClick","event","emit","originalEvent","option","onOptionKeydown","__decorate","Input","Output","Component","selector","template","el","renderer","cd","scrollHeight","_defaultLabel","filter","displaySelectedLabel","maxSelectedLabels","selectedItemsLabel","showToggleAll","emptyFilterMessage","resetFilterOnHide","dropdownIcon","showHeader","autoZIndex","baseZIndex","filterBy","showTransitionOptions","hideTransitionOptions","filterMatchMode","tooltip","tooltipPosition","tooltipPositionStyle","onChange","onFocus","onBlur","onPanelShow","onPanelHide","onModelChange","onModelTouched","disabledSelectedOptions","Object","defineProperty","val","updateLabel","_options","opts","optionLabel","ObjectUtils","generateSelectItems","visibleOptions","filterValue","length","activateFilter","ngOnInit","ngAfterContentInit","_this","templates","forEach","item","getType","itemTemplate","selectedItemsTemplate","ngAfterViewInit","overlayVisible","show","ngAfterViewChecked","filtered","alignOverlay","writeValue","value","updateFilledState","setDisabledSelectedOptions","checkSelectionLimit","markForCheck","selectionLimit","maxSelectionLimitReached","filled","valuesAsString","registerOnChange","fn","registerOnTouched","setDisabledState","disabled","optionValue","selectionIndex","findSelectionIndex","i","__spread","itemValue","isSelected","index","equals","dataKey","toggleAll","isAllChecked","getVisibleOptions","push","trim","isAllVisibleOptionsChecked","optionCount","getEnabledOptionCount","disabledSelectedOptionCount","options","_b","__values","_c","next","done","count","opt","setTimeout","undefined","filterInputChild","nativeElement","focus","bindDocumentClickListener","onOverlayAnimationStart","toState","overlay","element","appendOverlay","style","zIndex","String","DomHandler","zindex","bindDocumentResizeListener","onOverlayHide","appendTo","document","body","appendChild","minWidth","getWidth","containerViewChild","restoreOverlayAppend","absolutePosition","relativePosition","hide","unbindDocumentClickListener","onFilter","close","preventDefault","stopPropagation","onMouseclick","input","readonly","panelClick","selfClick","onInputFocus","onInputBlur","which","nextItem","findNextItem","target","parentElement","prevItem","findPrevItem","nextElementSibling","hasClass","children","isHidden","previousElementSibling","altKey","label","itemLabel","findLabelByValue","pattern","test","replace","match","defaultLabel","inputValue","searchFields","split","FilterUtils","isItemVisible","onHeaderCheckboxFocus","headerCheckboxFocus","onHeaderCheckboxBlur","documentClickListener","listen","documentResizeListener","onWindowResize","bind","window","addEventListener","unbindDocumentResizeListener","removeEventListener","isAndroid","ngOnDestroy","ElementRef","Renderer2","ChangeDetectorRef","ViewChild","static","ContentChild","Footer","Header","ContentChildren","PrimeTemplate","animations","trigger","state","transform","opacity","transition","animate","host","[class.ui-inputwrapper-filled]","[class.ui-inputwrapper-focus]","providers","MultiSelectModule","NgModule","imports","CommonModule","SharedModule","ScrollingModule","TooltipModule","exports","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Component, ElementRef, OnInit, AfterViewInit, AfterContentInit, AfterViewChecked, OnDestroy, Input, Output, Renderer2, EventEmitter,\n    forwardRef, ViewChild, ChangeDetectorRef, TemplateRef, ContentChildren, QueryList, ContentChild } from '@angular/core';\nimport { trigger,state,style,transition,animate,AnimationEvent} from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { SelectItem } from 'primeng/api';\nimport { DomHandler } from 'primeng/dom';\nimport { ObjectUtils } from 'primeng/utils';\nimport { SharedModule, PrimeTemplate, Footer, Header } from 'primeng/api';\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor } from '@angular/forms';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { FilterUtils } from 'primeng/utils';\nimport {TooltipModule} from 'primeng/tooltip';\n\nexport const MULTISELECT_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MultiSelect),\n  multi: true\n};\n\n@Component({\n    selector: 'p-multiSelectItem',\n    template: `\n        <li class=\"ui-multiselect-item ui-corner-all\" (click)=\"onOptionClick($event)\" (keydown)=\"onOptionKeydown($event)\" [attr.aria-label]=\"option.label\"\n            [style.display]=\"visible ? 'block' : 'none'\" [attr.tabindex]=\"option.disabled ? null : '0'\" [ngStyle]=\"{'height': itemSize + 'px'}\"\n            [ngClass]=\"{'ui-state-highlight': selected, 'ui-state-disabled': (option.disabled || (maxSelectionLimitReached && !selected))}\">\n            <div class=\"ui-chkbox ui-widget\">\n                <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\"\n                    [ngClass]=\"{'ui-state-active': selected}\">\n                    <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check': selected}\"></span>\n                </div>\n            </div>\n            <span *ngIf=\"!template\">{{option.label}}</span>\n            <ng-container *ngTemplateOutlet=\"template; context: {$implicit: option}\"></ng-container>\n        </li>\n    `\n})\nexport class MultiSelectItem {\n\n    @Input() option: SelectItem;\n\n    @Input() selected: boolean;\n\n    @Input() disabled: boolean;\n\n    @Input() visible: boolean;\n\n    @Input() itemSize: number;\n\n    @Input() template: TemplateRef<any>;\n\n    @Input() maxSelectionLimitReached: boolean;\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n\n    @Output() onKeydown: EventEmitter<any> = new EventEmitter();\n\n    onOptionClick(event: Event) {\n        this.onClick.emit({\n            originalEvent: event,\n            option: this.option\n        });\n    }\n\n    onOptionKeydown(event: Event) {\n        this.onKeydown.emit({\n            originalEvent: event,\n            option: this.option\n        });\n    }\n}\n\n@Component({\n    selector: 'p-multiSelect',\n    template: `\n        <div #container [ngClass]=\"{'ui-multiselect ui-widget ui-state-default ui-corner-all':true,'ui-multiselect-open':overlayVisible,'ui-state-focus':focus,'ui-state-disabled': disabled}\" [ngStyle]=\"style\" [class]=\"styleClass\"\n            (click)=\"onMouseclick($event,in)\">\n            <div class=\"ui-helper-hidden-accessible\">\n                <input #in type=\"text\" readonly=\"readonly\" [attr.id]=\"inputId\" [attr.name]=\"name\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\"\n                       [disabled]=\"disabled\" [attr.tabindex]=\"tabindex\" (keydown)=\"onKeydown($event)\" aria-haspopup=\"listbox\" [attr.aria-expanded]=\"overlayVisible\" \n                       [attr.aria-labelledby]=\"ariaLabelledBy\">\n            </div>\n            <div class=\"ui-multiselect-label-container\" [pTooltip]=\"tooltip\" [tooltipPosition]=\"tooltipPosition\" [positionStyle]=\"tooltipPositionStyle\" [tooltipStyleClass]=\"tooltipStyleClass\">\n                <span class=\"ui-multiselect-label ui-corner-all\">\n                    <ng-container *ngIf=\"!selectedItemsTemplate\">{{valuesAsString}}</ng-container>\n                    <ng-container *ngTemplateOutlet=\"selectedItemsTemplate; context: {$implicit: value}\"></ng-container>\n                </span>\n            </div>\n            <div [ngClass]=\"{'ui-multiselect-trigger ui-state-default ui-corner-right':true}\">\n                <span class=\"ui-multiselect-trigger-icon ui-clickable\" [ngClass]=\"dropdownIcon\"></span>\n            </div>\n            <div *ngIf=\"overlayVisible\" [ngClass]=\"['ui-multiselect-panel ui-widget ui-widget-content ui-corner-all ui-shadow']\" [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\"\n                [ngStyle]=\"panelStyle\" [class]=\"panelStyleClass\" (click)=\"panelClick=true\" (keydown)=\"onKeydown($event)\">\n                <div class=\"ui-widget-header ui-corner-all ui-multiselect-header ui-helper-clearfix\" [ngClass]=\"{'ui-multiselect-header-no-toggleall': !showToggleAll}\" *ngIf=\"showHeader\">\n                <ng-content select=\"p-header\"></ng-content>  \n                <div class=\"ui-chkbox ui-widget\" *ngIf=\"showToggleAll && !selectionLimit\">\n                        <div class=\"ui-helper-hidden-accessible\">\n                            <input type=\"checkbox\" readonly=\"readonly\" [checked]=\"isAllChecked()\" (focus)=\"onHeaderCheckboxFocus()\" (blur)=\"onHeaderCheckboxBlur()\" (keydown.space)=\"toggleAll($event)\">\n                        </div>\n                        <div class=\"ui-chkbox-box ui-widget ui-corner-all ui-state-default\" role=\"checkbox\" [attr.aria-checked]=\"allSelected\" [ngClass]=\"{'ui-state-active':isAllChecked(), 'ui-state-focus': headerCheckboxFocus}\" (click)=\"toggleAll($event)\">\n                            <span class=\"ui-chkbox-icon ui-clickable\" [ngClass]=\"{'pi pi-check':isAllChecked()}\"></span>\n                        </div>\n                    </div>\n                    <div class=\"ui-multiselect-filter-container\" *ngIf=\"filter\">\n                        <input #filterInput type=\"text\" role=\"textbox\" [value]=\"filterValue||''\" (input)=\"onFilter()\" class=\"ui-inputtext ui-widget ui-state-default ui-corner-all\" [attr.placeholder]=\"filterPlaceHolder\" [attr.aria-label]=\"ariaFilterLabel\">\n                        <span class=\"ui-multiselect-filter-icon pi pi-search\"></span>\n                    </div>\n                    <a class=\"ui-multiselect-close ui-corner-all\" tabindex=\"0\" (click)=\"close($event)\" (keydown.enter)=\"close($event)\">\n                        <span class=\"pi pi-times\"></span>\n                    </a>\n                </div>\n                <div class=\"ui-multiselect-items-wrapper\" [style.max-height]=\"virtualScroll ? 'auto' : (scrollHeight||'auto')\">\n                    <ul class=\"ui-multiselect-items ui-multiselect-list ui-widget-content ui-widget ui-corner-all ui-helper-reset\" role=\"listbox\" aria-multiselectable=\"true\">\n                        <ng-container *ngIf=\"!virtualScroll; else virtualScrollList\">\n                            <ng-template ngFor let-option let-i=\"index\" [ngForOf]=\"options\">\n                                <p-multiSelectItem [option]=\"option\" [selected]=\"isSelected(option.value)\" (onClick)=\"onOptionClick($event)\" (onKeydown)=\"onOptionKeydown($event)\" \n                                        [maxSelectionLimitReached]=\"maxSelectionLimitReached\" [visible]=\"isItemVisible(option)\" [template]=\"itemTemplate\"></p-multiSelectItem>\n                            </ng-template>\n                        </ng-container>\n                        <ng-template #virtualScrollList>\n                            <cdk-virtual-scroll-viewport #viewport [ngStyle]=\"{'height': scrollHeight}\" [itemSize]=\"itemSize\" *ngIf=\"virtualScroll && visibleOptions && visibleOptions.length\">\n                                <ng-container *cdkVirtualFor=\"let option of visibleOptions; let i = index; let c = count; let f = first; let l = last; let e = even; let o = odd\">\n                                    <p-multiSelectItem [option]=\"option\" [selected]=\"isSelected(option.value)\" (onClick)=\"onOptionClick($event)\" (onKeydown)=\"onOptionKeydown($event)\" \n                                        [maxSelectionLimitReached]=\"maxSelectionLimitReached\" [visible]=\"isItemVisible(option)\" [template]=\"itemTemplate\" [itemSize]=\"itemSize\"></p-multiSelectItem>\n                                </ng-container>\n                            </cdk-virtual-scroll-viewport>\n                        </ng-template>\n                        <li *ngIf=\"filter && visibleOptions && visibleOptions.length === 0\" class=\"ui-multiselect-empty-message\">{{emptyFilterMessage}}</li>\n                    </ul>\n                </div>\n                <div class=\"ui-multiselect-footer ui-widget-content\" *ngIf=\"footerFacet\">\n                    <ng-content select=\"p-footer\"></ng-content>\n                </div>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('overlayAnimation', [\n            state('void', style({\n                transform: 'translateY(5%)',\n                opacity: 0\n            })),\n            state('visible', style({\n                transform: 'translateY(0)',\n                opacity: 1\n            })),\n            transition('void => visible', animate('{{showTransitionParams}}')),\n            transition('visible => void', animate('{{hideTransitionParams}}'))\n        ])\n    ],\n    host: {\n        '[class.ui-inputwrapper-filled]': 'filled',\n        '[class.ui-inputwrapper-focus]': 'focus'\n    },\n    providers: [MULTISELECT_VALUE_ACCESSOR]\n})\nexport class MultiSelect implements OnInit,AfterViewInit,AfterContentInit,AfterViewChecked,OnDestroy,ControlValueAccessor {\n\n    @Input() scrollHeight: string = '200px';\n\n    _defaultLabel: string = 'Choose';\n\n    @Input() set defaultLabel(val: string) {\n        this._defaultLabel = val;\n        this.updateLabel();\n    }\n\n    get defaultLabel(): string {\n        return this._defaultLabel;\n    }\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n    \n    @Input() panelStyle: any;\n\n    @Input() panelStyleClass: string;\n\n    @Input() inputId: string;\n\n    @Input() disabled: boolean;\n\n    @Input() readonly: boolean;\n    \n    @Input() filter: boolean = true;\n\n    @Input() filterPlaceHolder: string;\n    \n    @Input() overlayVisible: boolean;\n\n    @Input() tabindex: number;\n    \n    @Input() appendTo: any;\n    \n    @Input() dataKey: string;\n    \n    @Input() name: string;\n    \n    @Input() ariaLabelledBy: string;\n\n    @Input() displaySelectedLabel: boolean = true;\n    \n    @Input() maxSelectedLabels: number = 3;\n    \n    @Input() selectionLimit: number;\n    \n    @Input() selectedItemsLabel: string = '{0} items selected';\n    \n    @Input() showToggleAll: boolean = true;\n    \n    @Input() emptyFilterMessage: string = 'No results found';\n    \n    @Input() resetFilterOnHide: boolean = false;\n    \n    @Input() dropdownIcon: string = 'pi pi-chevron-down';\n    \n    @Input() optionLabel: string;\n\n    @Input() showHeader: boolean = true;\n\n    @Input() autoZIndex: boolean = true;\n    \n    @Input() baseZIndex: number = 0;\n\n    @Input() filterBy: string = 'label';\n\n    @Input() virtualScroll: boolean;\n\n    @Input() itemSize: number; \n\n    @Input() showTransitionOptions: string = '225ms ease-out';\n\n    @Input() hideTransitionOptions: string = '195ms ease-in';\n\n    @Input() ariaFilterLabel: string;\n    \n    @Input() filterMatchMode: string = \"contains\";\n\n    @Input() tooltip: string = '';\n\n    @Input() tooltipPosition: string = 'right';\n\n    @Input() tooltipPositionStyle: string = 'absolute';\n\n    @Input() tooltipStyleClass: string;\n\n    @ViewChild('container', { static: true }) containerViewChild: ElementRef;\n    \n    @ViewChild('filterInput', { static: false }) filterInputChild: ElementRef;\n\n    @ContentChild(Footer, { static: true }) footerFacet;\n\n    @ContentChild(Header, { static: true }) headerFacet;\n    \n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n    \n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onPanelShow: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onPanelHide: EventEmitter<any> = new EventEmitter();\n    \n    public value: any[];\n    \n    public onModelChange: Function = () => {};\n    \n    public onModelTouched: Function = () => {};\n\n    overlay: HTMLDivElement;\n    \n    public valuesAsString: string;\n    \n    public focus: boolean;\n\n    filled: boolean;\n    \n    public documentClickListener: any;\n    \n    public selfClick: boolean;\n    \n    public panelClick: boolean;\n    \n    public filterValue: string;\n    \n    public visibleOptions: SelectItem[];\n\n    public disabledSelectedOptions: SelectItem[] = [];\n    \n    public filtered: boolean;\n    \n    public itemTemplate: TemplateRef<any>;\n    \n    public selectedItemsTemplate: TemplateRef<any>;\n    \n    public headerCheckboxFocus: boolean;\n    \n    _options: any[];\n    \n    maxSelectionLimitReached: boolean;\n\n    documentResizeListener: any;\n    \n    constructor(public el: ElementRef, public renderer: Renderer2, private cd: ChangeDetectorRef) {}\n    \n    @Input() get options(): any[] {\n        return this._options;\n    }\n\n    set options(val: any[]) {\n        let opts = this.optionLabel ? ObjectUtils.generateSelectItems(val, this.optionLabel) : val;\n        this.visibleOptions = opts;\n        this._options = opts;\n        this.updateLabel();\n\n        if (this.filterValue && this.filterValue.length) {\n            this.activateFilter();\n        }\n    }\n    \n    ngOnInit() {\n        this.updateLabel();\n    }\n    \n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'item':\n                    this.itemTemplate = item.template;\n                break;\n                \n                case 'selectedItems':\n                    this.selectedItemsTemplate = item.template;\n                break;\n                \n                default:\n                    this.itemTemplate = item.template;\n                break;\n            }\n        });\n    }\n    \n    ngAfterViewInit() {\n        if (this.overlayVisible) {\n            this.show();\n        }\n    }\n    \n    ngAfterViewChecked() {\n        if (this.filtered) {\n            this.alignOverlay();\n\n            this.filtered = false;\n        }\n    }\n    \n    writeValue(value: any) : void {\n        this.value = value;\n        this.updateLabel();\n        this.updateFilledState();\n        this.setDisabledSelectedOptions();\n        this.checkSelectionLimit();\n        \n        this.cd.markForCheck();\n    }\n\n    checkSelectionLimit() {\n        if (this.selectionLimit && (this.value && this.value.length === this.selectionLimit)) {\n            this.maxSelectionLimitReached = true;\n        }\n    }\n\n    updateFilledState() {\n        this.filled = (this.valuesAsString != null && this.valuesAsString.length > 0);\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n    \n    onOptionClick(event) {\n        let option = event.option;\n        if (option.disabled) {\n            return;\n        }\n        \n        const optionValue = option.value;\n        let selectionIndex = this.findSelectionIndex(optionValue);\n        if (selectionIndex != -1) {\n            this.value = this.value.filter((val,i) => i != selectionIndex);\n\n            if (this.selectionLimit) {\n                this.maxSelectionLimitReached = false;\n            }\n        }\n        else {\n            if (!this.selectionLimit || (!this.value || this.value.length < this.selectionLimit)) {\n                this.value = [...this.value || [], optionValue];\n            }\n\n            this.checkSelectionLimit();\n        }\n    \n        this.onModelChange(this.value);\n        this.onChange.emit({originalEvent: event.originalEvent, value: this.value, itemValue: optionValue});\n        this.updateLabel();\n        this.updateFilledState();\n    }\n    \n    isSelected(value) {\n        return this.findSelectionIndex(value) != -1;\n    }\n    \n    findSelectionIndex(val: any): numberÂ {\n        let index = -1;\n        \n        if (this.value) {\n            for (let i = 0; i < this.value.length; i++) {\n                if (ObjectUtils.equals(this.value[i], val, this.dataKey)) {\n                    index = i;\n                    break;\n                }\n            }\n        }\n    \n        return index;\n    }\n    \n    toggleAll(event: Event) {\n        if (this.isAllChecked()) {\n            if(this.disabledSelectedOptions && this.disabledSelectedOptions.length > 0) {\n                let value = [];\n                value = [...this.disabledSelectedOptions];\n                this.value = value;\n            }\n            else {\n                this.value = [];\n            }\n        }\n        else {\n            let opts = this.getVisibleOptions();\n            if (opts) {\n                let value = [];\n                if(this.disabledSelectedOptions && this.disabledSelectedOptions.length > 0) {\n                    value = [...this.disabledSelectedOptions];\n                }\n                for (let i = 0; i < opts.length; i++) {\n                    let option = opts[i];\n\n                    if (!option.disabled) {\n                        value.push(opts[i].value);\n                    }\n                }\n                this.value = value;\n            }\n        }\n        \n        this.onModelChange(this.value);\n        this.onChange.emit({originalEvent: event, value: this.value});\n        this.updateLabel();\n    }\n    \n    isAllChecked() {\n        if (this.filterValue && this.filterValue.trim().length) {\n            return this.value && this.visibleOptions && this.visibleOptions.length && this.isAllVisibleOptionsChecked();\n        }\n        else {\n            let optionCount = this.getEnabledOptionCount();\n            let disabledSelectedOptionCount = this.disabledSelectedOptions.length;\n\n            return this.value && this.options && (this.value.length > 0 && this.value.length == optionCount + disabledSelectedOptionCount);\n        }\n    }\n\n    isAllVisibleOptionsChecked() {\n        if (!this.visibleOptions || this.visibleOptions.length === 0) {\n            return false;\n        }\n        else {\n            for (let option of this.visibleOptions) {\n                if (!this.isSelected(option.value)) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }\n\n    getEnabledOptionCount(): number {\n        if (this.options) {\n            let count = 0;\n            for (let opt of this.options) {\n                if (!opt.disabled) {\n                    count++;\n                }\n            }\n\n            return count;\n        }\n        else {\n            return 0;\n        }\n    }\n\n    setDisabledSelectedOptions(){\n        if (this.options) {\n            this.disabledSelectedOptions = [];\n            if(this.value) {\n                for (let opt of this.options) {\n                    if (opt.disabled && this.isSelected(opt.value)) {\n                        this.disabledSelectedOptions.push(opt.value);\n                    }\n                }\n            }\n        }\n    }\n    \n    show() {\n        if (!this.overlayVisible){\n            this.overlayVisible = true;\n        }\n    \n        if (this.filter) {\n            setTimeout(() => {\n                if (this.filterInputChild != undefined) {\n                    this.filterInputChild.nativeElement.focus();\n                }\n            }, 200);\n        }\n        this.bindDocumentClickListener();\n        \n    }\n\n    onOverlayAnimationStart(event: AnimationEvent) {\n        switch (event.toState) {\n            case 'visible':\n                this.overlay = event.element;\n                this.appendOverlay();\n                if (this.autoZIndex) {\n                    this.overlay.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n                }\n                this.alignOverlay();\n                this.bindDocumentClickListener();\n                this.bindDocumentResizeListener();\n                this.onPanelShow.emit();\n            break;\n\n            case 'void':\n                this.onOverlayHide();\n            break;\n        }\n    }\n\n    appendOverlay() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.overlay);\n            else\n                DomHandler.appendChild(this.overlay, this.appendTo);\n\n            this.overlay.style.minWidth = DomHandler.getWidth(this.containerViewChild.nativeElement) + 'px';\n        }\n    }\n\n    restoreOverlayAppend() {\n        if (this.overlay && this.appendTo) {\n            this.el.nativeElement.appendChild(this.overlay);\n        }\n    }\n\n    alignOverlay() {\n        if (this.overlay) {\n            if (this.appendTo)\n                DomHandler.absolutePosition(this.overlay, this.containerViewChild.nativeElement);\n            else\n                DomHandler.relativePosition(this.overlay, this.containerViewChild.nativeElement);\n        }\n    }\n    \n    hide() {\n        this.overlayVisible = false;\n        this.unbindDocumentClickListener();\n        if (this.resetFilterOnHide){\n            this.filterInputChild.nativeElement.value = '';\n            this.onFilter();\n        }\n        this.onPanelHide.emit();\n    }\n    \n    close(event) {\n        this.hide();\n        event.preventDefault();\n        event.stopPropagation();\n    }\n    \n    onMouseclick(event,input) {\n        if (this.disabled || this.readonly) {\n            return;\n        }\n\n        this.onClick.emit(event);\n        \n        if (!this.panelClick) {\n            if (this.overlayVisible) {\n                this.hide();\n            }\n            else {\n                input.focus();\n                this.show();\n            }\n        }\n        \n        this.selfClick = true;\n    }\n    \n    onInputFocus(event) {\n        this.focus = true;\n        this.onFocus.emit({originalEvent: event});\n    }\n    \n    onInputBlur(event) {\n        this.focus = false;\n        this.onBlur.emit({originalEvent: event});\n        this.onModelTouched();\n    }\n\n    onOptionKeydown(event) {\n        if (this.readonly) {\n            return;\n        }\n        \n        switch(event.originalEvent.which) {\n        \n            //down\n            case 40:\n                var nextItem = this.findNextItem(event.originalEvent.target.parentElement);\n                if(nextItem) {\n                    nextItem.focus();\n                }\n                \n                event.originalEvent.preventDefault();\n            break;\n            \n            //up\n            case 38:\n                var prevItem = this.findPrevItem(event.originalEvent.target.parentElement);\n                if(prevItem) {\n                    prevItem.focus();\n                }\n                \n                event.originalEvent.preventDefault();\n            break;\n            \n            //enter\n            case 13:\n                this.onOptionClick(event);\n                event.originalEvent.preventDefault();\n            break;\n        }\n    }\n    \n    findNextItem(item) {\n        let nextItem = item.nextElementSibling;\n        \n        if (nextItem)\n            return DomHandler.hasClass(nextItem.children[0], 'ui-state-disabled') || DomHandler.isHidden(nextItem.children[0]) ? this.findNextItem(nextItem) : nextItem.children[0];\n        else\n            return null;\n    }\n\n    findPrevItem(item) {\n        let prevItem = item.previousElementSibling;\n        \n        if (prevItem)\n            return DomHandler.hasClass(prevItem.children[0], 'ui-state-disabled') || DomHandler.isHidden(prevItem.children[0]) ? this.findPrevItem(prevItem) : prevItem.children[0];\n        else\n            return null;\n    } \n    \n    onKeydown(event: KeyboardEvent){\n        switch(event.which) {\n            //down\n            case 40:\n                if (!this.overlayVisible && event.altKey) {\n                    this.show();\n                }\n            break;\n    \n            //space\n            case 32:\n                if (!this.overlayVisible){\n                    this.show();\n                    event.preventDefault();\n                }\n                break;\n    \n            //escape\n            case 27:\n                this.hide();\n            break;\n        }\n    }\n        \n    updateLabel() {\n        if (this.value && this.options && this.value.length && this.displaySelectedLabel) {\n            let label = '';\n            for (let i = 0; i < this.value.length; i++) {\n                let itemLabel = this.findLabelByValue(this.value[i]);\n                if (itemLabel) {\n                    if (label.length > 0) {\n                        label = label + ', ';\n                    }\n                    label = label + itemLabel;\n                }\n            }\n            \n            if (this.value.length <= this.maxSelectedLabels) {\n                this.valuesAsString = label;\n            }\n            else {\n                let pattern = /{(.*?)}/;\n                if (pattern.test(this.selectedItemsLabel)) {\n                    this.valuesAsString = this.selectedItemsLabel.replace(this.selectedItemsLabel.match(pattern)[0], this.value.length + '');\n                } else {\n                    this.valuesAsString = this.selectedItemsLabel;\n                }\n            }\n        }\n        else {\n            this.valuesAsString = this.defaultLabel;\n        }\n    }\n    \n    findLabelByValue(val: any): string {\n        let label = null;\n        for (let i = 0; i < this.options.length; i++) {\n            let option = this.options[i];\n            if (val == null && option.value == null || ObjectUtils.equals(val, option.value, this.dataKey)) {\n                label = option.label;\n                break;\n            }\n        }\n        return label;\n    }\n\n    onFilter() {\n        let inputValue = this.filterInputChild.nativeElement.value;\n        if (inputValue && inputValue.length) {\n            this.filterValue = inputValue;\n            this.activateFilter();\n        }\n        else {\n            this.filterValue = null;\n            this.visibleOptions = this.options;\n            this.filtered = false;\n        }\n    }\n    \n    activateFilter() {\n        if (this.options && this.options.length) {\n            let searchFields: string[] = this.filterBy.split(',');\n            this.visibleOptions = FilterUtils.filter(this.options, searchFields, this.filterValue, this.filterMatchMode);\n            this.filtered = true;\n        }        \n    }\n    \n    isItemVisible(option: SelectItem): boolean {\n        if (this.filterValue && this.filterValue.trim().length) {\n            for (let i = 0; i < this.visibleOptions.length; i++) {\n                if (this.visibleOptions[i].value == option.value) {\n                    return true;\n                }\n            }\n        }\n        else {\n            return true;\n        }\n    }\n    \n    getVisibleOptions(): SelectItem[] {\n        return this.visibleOptions || this.options;\n    }\n    \n    onHeaderCheckboxFocus() {\n        this.headerCheckboxFocus = true;\n    }\n    \n    onHeaderCheckboxBlur() {\n        this.headerCheckboxFocus = false;\n    }\n    \n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            this.documentClickListener = this.renderer.listen('document', 'click', () => {\n                if (!this.selfClick && !this.panelClick && this.overlayVisible) {\n                    this.hide();\n                }\n                \n                this.selfClick = false;\n                this.panelClick = false;\n                this.cd.markForCheck();\n            });\n        }\n    }\n    \n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n    \n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    onWindowResize() {\n        if (!DomHandler.isAndroid()) {\n            this.hide();\n        }\n    }\n\n    onOverlayHide() {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.overlay = null;\n    }\n\n    ngOnDestroy() {\n        this.restoreOverlayAppend();\n        this.onOverlayHide();\n    }\n\n}\n\n@NgModule({\n    imports: [CommonModule,SharedModule,ScrollingModule, TooltipModule],\n    exports: [MultiSelect,SharedModule,ScrollingModule],\n    declarations: [MultiSelect,MultiSelectItem]\n})\nexport class MultiSelectModule { }\n"]}